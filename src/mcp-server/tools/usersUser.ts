/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersUser } from "../../funcs/usersUser.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.UserRequest$inboundSchema,
};

export const tool$usersUser: ToolDefinition<typeof args> = {
  name: "users-user",
  description:
    `Retrieves detailed user information from Opal. This endpoint is designed to fetch user details by
either user ID (UUID) or email address. The endpoint follows a strict precedence rule where
user_id takes priority over email if both are provided.

Key Implementation Notes:
- Exactly one identifier (user_id OR email) must be provided
- Returns a complete User object with all associated metadata
- Suitable for user verification and profile data retrieval
- Recommended for MCP user synchronization workflows

Authentication:
- Requires valid API authentication
- Respects standard Opal authorization rules
`,
  scopes: ["read"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await usersUser(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
