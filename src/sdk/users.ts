/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersGetRemoteUsers } from "../funcs/usersGetRemoteUsers.js";
import { usersGetUsers } from "../funcs/usersGetUsers.js";
import { usersGetUserTags } from "../funcs/usersGetUserTags.js";
import { usersUser } from "../funcs/usersUser.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Users extends ClientSDK {
  /**
   * Retrieves detailed user information from Opal. This endpoint is designed to fetch user details by
   * either user ID (UUID) or email address. The endpoint follows a strict precedence rule where
   * user_id takes priority over email if both are provided.
   *
   * Key Implementation Notes:
   * - Exactly one identifier (user_id OR email) must be provided
   * - Returns a complete User object with all associated metadata
   * - Suitable for user verification and profile data retrieval
   * - Recommended for MCP user synchronization workflows
   *
   * Authentication:
   * - Requires valid API authentication
   * - Respects standard Opal authorization rules
   */
  async user(
    request: operations.UserRequest,
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(usersUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of users for your organization.
   */
  async getUsers(
    request: operations.GetUsersRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.GetUsersResponse, { cursor: string }>> {
    return unwrapResultIterator(usersGetUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of remote users for your organization.
   */
  async getRemoteUsers(
    request: operations.GetRemoteUsersRequest,
    options?: RequestOptions,
  ): Promise<components.PaginatedRemoteUsersList> {
    return unwrapAsync(usersGetRemoteUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all tags applied to the user.
   */
  async getUserTags(
    request: operations.GetUserTagsRequest,
    options?: RequestOptions,
  ): Promise<components.TagsList> {
    return unwrapAsync(usersGetUserTags(
      this,
      request,
      options,
    ));
  }
}
