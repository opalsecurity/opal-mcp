/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tagsAddGroupTag } from "../funcs/tagsAddGroupTag.js";
import { tagsAddResourceTag } from "../funcs/tagsAddResourceTag.js";
import { tagsAddUserTag } from "../funcs/tagsAddUserTag.js";
import { tagsCreateTag } from "../funcs/tagsCreateTag.js";
import { tagsDeleteTagByID } from "../funcs/tagsDeleteTagByID.js";
import { tagsGetTag } from "../funcs/tagsGetTag.js";
import { tagsGetTagByID } from "../funcs/tagsGetTagByID.js";
import { tagsGetTags } from "../funcs/tagsGetTags.js";
import { tagsRemoveGroupTag } from "../funcs/tagsRemoveGroupTag.js";
import { tagsRemoveResourceTag } from "../funcs/tagsRemoveResourceTag.js";
import { tagsRemoveUserTag } from "../funcs/tagsRemoveUserTag.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Tags extends ClientSDK {
  /**
   * UNSTABLE. May be removed at any time. Gets a tag with the given id.
   */
  async getTagByID(
    request: operations.GetTagByIDRequest,
    options?: RequestOptions,
  ): Promise<components.Tag> {
    return unwrapAsync(tagsGetTagByID(
      this,
      request,
      options,
    ));
  }

  /**
   * UNSTABLE. May be removed at any time. Deletes a tag with the given id.
   */
  async deleteTagByID(
    request: operations.DeleteTagByIDRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsDeleteTagByID(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets a tag with the given key and value.
   */
  async getTag(
    request: operations.GetTagRequest,
    options?: RequestOptions,
  ): Promise<components.Tag> {
    return unwrapAsync(tagsGetTag(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a tag with the given key and value.
   */
  async createTag(
    request: operations.CreateTagRequest,
    options?: RequestOptions,
  ): Promise<components.Tag> {
    return unwrapAsync(tagsCreateTag(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of tags created by your organization.
   */
  async getTags(
    request: operations.GetTagsRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.GetTagsResponse, { cursor: string }>> {
    return unwrapResultIterator(tagsGetTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Applies a tag to a user.
   */
  async addUserTag(
    request: operations.AddUserTagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsAddUserTag(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a tag from a user.
   */
  async removeUserTag(
    request: operations.RemoveUserTagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsRemoveUserTag(
      this,
      request,
      options,
    ));
  }

  /**
   * Applies a tag to a group.
   */
  async addGroupTag(
    request: operations.AddGroupTagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsAddGroupTag(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a tag from a group.
   */
  async removeGroupTag(
    request: operations.RemoveGroupTagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsRemoveGroupTag(
      this,
      request,
      options,
    ));
  }

  /**
   * Applies a tag to a resource.
   */
  async addResourceTag(
    request: operations.AddResourceTagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsAddResourceTag(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a tag from a resource.
   */
  async removeResourceTag(
    request: operations.RemoveResourceTagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsRemoveResourceTag(
      this,
      request,
      options,
    ));
  }
}
