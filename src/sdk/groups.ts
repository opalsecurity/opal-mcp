/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { groupsAddGroupContainingGroup } from "../funcs/groupsAddGroupContainingGroup.js";
import { groupsAddGroupResource } from "../funcs/groupsAddGroupResource.js";
import { groupsAddGroupUser } from "../funcs/groupsAddGroupUser.js";
import { groupsCreateGroup } from "../funcs/groupsCreateGroup.js";
import { groupsDeleteGroup } from "../funcs/groupsDeleteGroup.js";
import { groupsDeleteGroupUser } from "../funcs/groupsDeleteGroupUser.js";
import { groupsGetGroup } from "../funcs/groupsGetGroup.js";
import { groupsGetGroupContainingGroup } from "../funcs/groupsGetGroupContainingGroup.js";
import { groupsGetGroupContainingGroups } from "../funcs/groupsGetGroupContainingGroups.js";
import { groupsGetGroupMessageChannels } from "../funcs/groupsGetGroupMessageChannels.js";
import { groupsGetGroupOnCallSchedules } from "../funcs/groupsGetGroupOnCallSchedules.js";
import { groupsGetGroupResources } from "../funcs/groupsGetGroupResources.js";
import { groupsGetGroupReviewers } from "../funcs/groupsGetGroupReviewers.js";
import { groupsGetGroupReviewerStages } from "../funcs/groupsGetGroupReviewerStages.js";
import { groupsGetGroups } from "../funcs/groupsGetGroups.js";
import { groupsGetGroupTags } from "../funcs/groupsGetGroupTags.js";
import { groupsGetGroupUsers } from "../funcs/groupsGetGroupUsers.js";
import { groupsGetGroupVisibility } from "../funcs/groupsGetGroupVisibility.js";
import { groupsRemoveGroupContainingGroup } from "../funcs/groupsRemoveGroupContainingGroup.js";
import { groupsSetGroupMessageChannels } from "../funcs/groupsSetGroupMessageChannels.js";
import { groupsSetGroupOnCallSchedules } from "../funcs/groupsSetGroupOnCallSchedules.js";
import { groupsSetGroupResources } from "../funcs/groupsSetGroupResources.js";
import { groupsSetGroupReviewers } from "../funcs/groupsSetGroupReviewers.js";
import { groupsSetGroupReviewerStages } from "../funcs/groupsSetGroupReviewerStages.js";
import { groupsSetGroupVisibility } from "../funcs/groupsSetGroupVisibility.js";
import { groupsUpdateGroups } from "../funcs/groupsUpdateGroups.js";
import { groupsUpdateGroupUser } from "../funcs/groupsUpdateGroupUser.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Groups extends ClientSDK {
  /**
   * Returns a list of groups for your organization.
   */
  async getGroups(
    request: operations.GetGroupsRequest,
    options?: RequestOptions,
  ): Promise<components.PaginatedGroupsList> {
    return unwrapAsync(groupsGetGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk updates a list of groups.
   */
  async updateGroups(
    request: components.UpdateGroupInfoList,
    options?: RequestOptions,
  ): Promise<components.UpdateGroupInfoList> {
    return unwrapAsync(groupsUpdateGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates an Opal group or [imports a remote group](https://docs.opal.dev/reference/end-system-objects).
   */
  async createGroup(
    request: components.CreateGroupInfo,
    options?: RequestOptions,
  ): Promise<components.Group> {
    return unwrapAsync(groupsCreateGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a `Group` object.
   */
  async getGroup(
    request: operations.GetGroupRequest,
    options?: RequestOptions,
  ): Promise<components.Group> {
    return unwrapAsync(groupsGetGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a group.
   */
  async deleteGroup(
    request: operations.DeleteGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(groupsDeleteGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of audit and reviewer message channels attached to a group.
   */
  async getGroupMessageChannels(
    request: operations.GetGroupMessageChannelsRequest,
    options?: RequestOptions,
  ): Promise<components.MessageChannelList> {
    return unwrapAsync(groupsGetGroupMessageChannels(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of audit message channels attached to a group.
   */
  async setGroupMessageChannels(
    request: operations.SetGroupMessageChannelsRequest,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(groupsSetGroupMessageChannels(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of on call schedules attached to a group.
   */
  async getGroupOnCallSchedules(
    request: operations.GetGroupOnCallSchedulesRequest,
    options?: RequestOptions,
  ): Promise<components.OnCallScheduleList> {
    return unwrapAsync(groupsGetGroupOnCallSchedules(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of on call schedules attached to a group.
   */
  async setGroupOnCallSchedules(
    request: operations.SetGroupOnCallSchedulesRequest,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(groupsSetGroupOnCallSchedules(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of resources that the group gives access to.
   */
  async getGroupResources(
    request: operations.GetGroupResourcesRequest,
    options?: RequestOptions,
  ): Promise<components.GroupResourceList> {
    return unwrapAsync(groupsGetGroupResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of resources that the group gives access to.
   */
  async setGroupResources(
    request: operations.SetGroupResourcesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(groupsSetGroupResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of groups that the group gives access to.
   */
  async getGroupContainingGroups(
    request: operations.GetGroupContainingGroupsRequest,
    options?: RequestOptions,
  ): Promise<components.GroupContainingGroupList> {
    return unwrapAsync(groupsGetGroupContainingGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new containing group.
   */
  async addGroupContainingGroup(
    request: operations.AddGroupContainingGroupRequest,
    options?: RequestOptions,
  ): Promise<components.GroupContainingGroup> {
    return unwrapAsync(groupsAddGroupContainingGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets a specific containing group for a group.
   */
  async getGroupContainingGroup(
    request: operations.GetGroupContainingGroupRequest,
    options?: RequestOptions,
  ): Promise<components.GroupContainingGroup> {
    return unwrapAsync(groupsGetGroupContainingGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a containing group from a group.
   */
  async removeGroupContainingGroup(
    request: operations.RemoveGroupContainingGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(groupsRemoveGroupContainingGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a resource to a group.
   */
  async addGroupResource(
    request: operations.AddGroupResourceRequest,
    options?: RequestOptions,
  ): Promise<components.GroupResource> {
    return unwrapAsync(groupsAddGroupResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the visibility of this group.
   */
  async getGroupVisibility(
    request: operations.GetGroupVisibilityRequest,
    options?: RequestOptions,
  ): Promise<components.VisibilityInfo> {
    return unwrapAsync(groupsGetGroupVisibility(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the visibility of this group.
   */
  async setGroupVisibility(
    request: operations.SetGroupVisibilityRequest,
    options?: RequestOptions,
  ): Promise<components.VisibilityInfo> {
    return unwrapAsync(groupsSetGroupVisibility(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of owner IDs of the reviewers for a group.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getGroupReviewers(
    request: operations.GetGroupReviewersRequest,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(groupsGetGroupReviewers(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of reviewers for a group.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async setGroupReviewers(
    request: operations.SetGroupReviewersRequest,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(groupsSetGroupReviewers(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of reviewer stages for a group.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getGroupReviewerStages(
    request: operations.GetGroupReviewerStagesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ReviewerStage>> {
    return unwrapAsync(groupsGetGroupReviewerStages(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of reviewer stages for a group.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async setGroupReviewerStages(
    request: operations.SetGroupReviewerStagesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ReviewerStage>> {
    return unwrapAsync(groupsSetGroupReviewerStages(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all tags applied to the group.
   */
  async getGroupTags(
    request: operations.GetGroupTagsRequest,
    options?: RequestOptions,
  ): Promise<components.TagsList> {
    return unwrapAsync(groupsGetGroupTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of users for this group.
   */
  async getGroupUsers(
    request: operations.GetGroupUsersRequest,
    options?: RequestOptions,
  ): Promise<components.GroupUserList> {
    return unwrapAsync(groupsGetGroupUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates a user's access level or duration in this group.
   */
  async updateGroupUser(
    request: operations.UpdateGroupUserRequest,
    options?: RequestOptions,
  ): Promise<components.GroupUser> {
    return unwrapAsync(groupsUpdateGroupUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a user to this group.
   */
  async addGroupUser(
    request: operations.AddGroupUserRequest,
    options?: RequestOptions,
  ): Promise<components.GroupUser> {
    return unwrapAsync(groupsAddGroupUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a user's access from this group.
   */
  async deleteGroupUser(
    request: operations.DeleteGroupUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(groupsDeleteGroupUser(
      this,
      request,
      options,
    ));
  }
}
