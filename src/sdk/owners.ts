/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ownersCreateOwner } from "../funcs/ownersCreateOwner.js";
import { ownersDeleteOwner } from "../funcs/ownersDeleteOwner.js";
import { ownersGetOwner } from "../funcs/ownersGetOwner.js";
import { ownersGetOwnerFromName } from "../funcs/ownersGetOwnerFromName.js";
import { ownersGetOwners } from "../funcs/ownersGetOwners.js";
import { ownersGetOwnerUsers } from "../funcs/ownersGetOwnerUsers.js";
import { ownersSetOwnerUsers } from "../funcs/ownersSetOwnerUsers.js";
import { ownersUpdateOwners } from "../funcs/ownersUpdateOwners.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Owners extends ClientSDK {
  /**
   * Returns a list of `Owner` objects.
   */
  async getOwners(
    request: operations.GetOwnersRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.GetOwnersResponse, { cursor: string }>> {
    return unwrapResultIterator(ownersGetOwners(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates an owner.
   */
  async createOwner(
    request: components.CreateOwnerInfo,
    options?: RequestOptions,
  ): Promise<components.Owner> {
    return unwrapAsync(ownersCreateOwner(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk updates a list of owners.
   */
  async updateOwners(
    request: components.UpdateOwnerInfoList,
    options?: RequestOptions,
  ): Promise<components.UpdateOwnerInfoList> {
    return unwrapAsync(ownersUpdateOwners(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns an `Owner` object.
   */
  async getOwner(
    request: operations.GetOwnerRequest,
    options?: RequestOptions,
  ): Promise<components.Owner> {
    return unwrapAsync(ownersGetOwner(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes an owner.
   */
  async deleteOwner(
    request: operations.DeleteOwnerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ownersDeleteOwner(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns an `Owner` object. Does not support owners with `/` in their name, use /owners?name=... instead.
   */
  async getOwnerFromName(
    request: operations.GetOwnerFromNameRequest,
    options?: RequestOptions,
  ): Promise<components.Owner> {
    return unwrapAsync(ownersGetOwnerFromName(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of users for this owner, in escalation priority order if applicable.
   */
  async getOwnerUsers(
    request: operations.GetOwnerUsersRequest,
    options?: RequestOptions,
  ): Promise<components.UserList> {
    return unwrapAsync(ownersGetOwnerUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of users for this owner. If escalation is enabled, the order of this list is the escalation priority order of the users. If the owner has a source group, adding or removing users from this list won't be possible.
   */
  async setOwnerUsers(
    request: operations.SetOwnerUsersRequest,
    options?: RequestOptions,
  ): Promise<components.UserList> {
    return unwrapAsync(ownersSetOwnerUsers(
      this,
      request,
      options,
    ));
  }
}
