/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bundlesAddBundleGroup } from "../funcs/bundlesAddBundleGroup.js";
import { bundlesAddBundleResource } from "../funcs/bundlesAddBundleResource.js";
import { bundlesCreateBundle } from "../funcs/bundlesCreateBundle.js";
import { bundlesDeleteBundle } from "../funcs/bundlesDeleteBundle.js";
import { bundlesGetBundle } from "../funcs/bundlesGetBundle.js";
import { bundlesGetBundleGroups } from "../funcs/bundlesGetBundleGroups.js";
import { bundlesGetBundleResources } from "../funcs/bundlesGetBundleResources.js";
import { bundlesGetBundles } from "../funcs/bundlesGetBundles.js";
import { bundlesGetBundleVisibility } from "../funcs/bundlesGetBundleVisibility.js";
import { bundlesRemoveBundleGroup } from "../funcs/bundlesRemoveBundleGroup.js";
import { bundlesRemoveBundleResource } from "../funcs/bundlesRemoveBundleResource.js";
import { bundlesSetBundleVisibility } from "../funcs/bundlesSetBundleVisibility.js";
import { bundlesUpdateBundle } from "../funcs/bundlesUpdateBundle.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Bundles extends ClientSDK {
  /**
   * Returns a list of `Bundle` objects.
   */
  async getBundles(
    request: operations.GetBundlesRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.GetBundlesResponse, { cursor: string }>> {
    return unwrapResultIterator(bundlesGetBundles(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a bundle.
   */
  async createBundle(
    request: components.CreateBundleInfo,
    options?: RequestOptions,
  ): Promise<components.Bundle> {
    return unwrapAsync(bundlesCreateBundle(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a `Bundle` object.
   */
  async getBundle(
    request: operations.GetBundleRequest,
    options?: RequestOptions,
  ): Promise<components.Bundle> {
    return unwrapAsync(bundlesGetBundle(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a bundle.
   */
  async deleteBundle(
    request: operations.DeleteBundleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(bundlesDeleteBundle(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates a bundle.
   */
  async updateBundle(
    request: operations.UpdateBundleRequest,
    options?: RequestOptions,
  ): Promise<components.Bundle | undefined> {
    return unwrapAsync(bundlesUpdateBundle(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of `Resource` objects in a given bundle.
   */
  async getBundleResources(
    request: operations.GetBundleResourcesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetBundleResourcesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(bundlesGetBundleResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a resource to a bundle.
   */
  async addBundleResource(
    request: operations.AddBundleResourceRequest,
    options?: RequestOptions,
  ): Promise<components.BundleResource> {
    return unwrapAsync(bundlesAddBundleResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a resource from a bundle.
   */
  async removeBundleResource(
    request: operations.RemoveBundleResourceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(bundlesRemoveBundleResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of `Group` objects in a given bundle.
   */
  async getBundleGroups(
    request: operations.GetBundleGroupsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetBundleGroupsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(bundlesGetBundleGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a group to a bundle.
   */
  async addBundleGroup(
    request: operations.AddBundleGroupRequest,
    options?: RequestOptions,
  ): Promise<components.BundleGroup> {
    return unwrapAsync(bundlesAddBundleGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a group from a bundle.
   */
  async removeBundleGroup(
    request: operations.RemoveBundleGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(bundlesRemoveBundleGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the visibility of the bundle.
   */
  async getBundleVisibility(
    request: operations.GetBundleVisibilityRequest,
    options?: RequestOptions,
  ): Promise<components.VisibilityInfo> {
    return unwrapAsync(bundlesGetBundleVisibility(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the visibility of the bundle.
   */
  async setBundleVisibility(
    request: operations.SetBundleVisibilityRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(bundlesSetBundleVisibility(
      this,
      request,
      options,
    ));
  }
}
