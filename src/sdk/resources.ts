/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { resourcesAddResourceNhi } from "../funcs/resourcesAddResourceNhi.js";
import { resourcesAddResourceUser } from "../funcs/resourcesAddResourceUser.js";
import { resourcesCreateResource } from "../funcs/resourcesCreateResource.js";
import { resourcesDeleteResource } from "../funcs/resourcesDeleteResource.js";
import { resourcesDeleteResourceNhi } from "../funcs/resourcesDeleteResourceNhi.js";
import { resourcesDeleteResourceUser } from "../funcs/resourcesDeleteResourceUser.js";
import { resourcesGetResource } from "../funcs/resourcesGetResource.js";
import { resourcesGetResourceMessageChannels } from "../funcs/resourcesGetResourceMessageChannels.js";
import { resourcesGetResourceNhis } from "../funcs/resourcesGetResourceNhis.js";
import { resourcesGetResourceReviewers } from "../funcs/resourcesGetResourceReviewers.js";
import { resourcesGetResourceReviewerStages } from "../funcs/resourcesGetResourceReviewerStages.js";
import { resourcesGetResources } from "../funcs/resourcesGetResources.js";
import { resourcesGetResourceScopedRolePermissions } from "../funcs/resourcesGetResourceScopedRolePermissions.js";
import { resourcesGetResourceTags } from "../funcs/resourcesGetResourceTags.js";
import { resourcesGetResourceUser } from "../funcs/resourcesGetResourceUser.js";
import { resourcesGetResourceUsers } from "../funcs/resourcesGetResourceUsers.js";
import { resourcesGetResourceVisibility } from "../funcs/resourcesGetResourceVisibility.js";
import { resourcesResourceUserAccessStatusRetrieve } from "../funcs/resourcesResourceUserAccessStatusRetrieve.js";
import { resourcesSetResourceMessageChannels } from "../funcs/resourcesSetResourceMessageChannels.js";
import { resourcesSetResourceReviewers } from "../funcs/resourcesSetResourceReviewers.js";
import { resourcesSetResourceReviewerStages } from "../funcs/resourcesSetResourceReviewerStages.js";
import { resourcesSetResourceScopedRolePermissions } from "../funcs/resourcesSetResourceScopedRolePermissions.js";
import { resourcesSetResourceVisibility } from "../funcs/resourcesSetResourceVisibility.js";
import { resourcesUpdateResources } from "../funcs/resourcesUpdateResources.js";
import { resourcesUpdateResourceUser } from "../funcs/resourcesUpdateResourceUser.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Resources extends ClientSDK {
  /**
   * Returns a list of resources for your organization.
   */
  async getResources(
    request: operations.GetResourcesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetResourcesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(resourcesGetResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk updates a list of resources.
   */
  async updateResources(
    request: components.UpdateResourceInfoList,
    options?: RequestOptions,
  ): Promise<components.UpdateResourceInfoList> {
    return unwrapAsync(resourcesUpdateResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a resource. See [here](https://docs.opal.dev/reference/end-system-objects) for details about importing resources.
   */
  async createResource(
    request: components.CreateResourceInfo,
    options?: RequestOptions,
  ): Promise<components.Resource> {
    return unwrapAsync(resourcesCreateResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a resource.
   */
  async getResource(
    request: operations.GetResourceRequest,
    options?: RequestOptions,
  ): Promise<components.Resource> {
    return unwrapAsync(resourcesGetResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a resource.
   */
  async deleteResource(
    request: operations.DeleteResourceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourcesDeleteResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of audit message channels attached to a resource.
   */
  async getResourceMessageChannels(
    request: operations.GetResourceMessageChannelsRequest,
    options?: RequestOptions,
  ): Promise<components.MessageChannelList> {
    return unwrapAsync(resourcesGetResourceMessageChannels(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of audit message channels attached to a resource.
   */
  async setResourceMessageChannels(
    request: operations.SetResourceMessageChannelsRequest,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(resourcesSetResourceMessageChannels(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the visibility of this resource.
   */
  async getResourceVisibility(
    request: operations.GetResourceVisibilityRequest,
    options?: RequestOptions,
  ): Promise<components.VisibilityInfo> {
    return unwrapAsync(resourcesGetResourceVisibility(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the visibility of this resource.
   */
  async setResourceVisibility(
    request: operations.SetResourceVisibilityRequest,
    options?: RequestOptions,
  ): Promise<components.VisibilityInfo> {
    return unwrapAsync(resourcesSetResourceVisibility(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of owner IDs of the reviewers for a resource.
   */
  async getResourceReviewers(
    request: operations.GetResourceReviewersRequest,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(resourcesGetResourceReviewers(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of reviewers for a resource.
   */
  async setResourceReviewers(
    request: operations.SetResourceReviewersRequest,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(resourcesSetResourceReviewers(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list reviewer stages for a resource.
   */
  async getResourceReviewerStages(
    request: operations.GetResourceReviewerStagesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ReviewerStage>> {
    return unwrapAsync(resourcesGetResourceReviewerStages(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets the list of reviewer stages for a resource.
   */
  async setResourceReviewerStages(
    request: operations.SetResourceReviewerStagesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ReviewerStage>> {
    return unwrapAsync(resourcesSetResourceReviewerStages(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of non-human identities with access to this resource.
   */
  async getResourceNhis(
    request: operations.GetResourceNhisRequest,
    options?: RequestOptions,
  ): Promise<components.AccessList> {
    return unwrapAsync(resourcesGetResourceNhis(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the list of users for this resource.
   */
  async getResourceUsers(
    request: operations.GetResourceUsersRequest,
    options?: RequestOptions,
  ): Promise<components.ResourceAccessUserList> {
    return unwrapAsync(resourcesGetResourceUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Gives a non-human identity access to this resource.
   */
  async addResourceNhi(
    request: operations.AddResourceNhiRequest,
    options?: RequestOptions,
  ): Promise<components.ResourceNHI> {
    return unwrapAsync(resourcesAddResourceNhi(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a non-human identity's direct access from this resource.
   */
  async deleteResourceNhi(
    request: operations.DeleteResourceNhiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourcesDeleteResourceNhi(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a user to this resource.
   */
  async addResourceUser(
    request: operations.AddResourceUserRequest,
    options?: RequestOptions,
  ): Promise<components.ResourceUser> {
    return unwrapAsync(resourcesAddResourceUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates a user's access level or duration on this resource.
   */
  async updateResourceUser(
    request: operations.UpdateResourceUserRequest,
    options?: RequestOptions,
  ): Promise<components.ResourceUser> {
    return unwrapAsync(resourcesUpdateResourceUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a user's direct access from this resource.
   */
  async deleteResourceUser(
    request: operations.DeleteResourceUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourcesDeleteResourceUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns information about a specific user's access to a resource.
   */
  async getResourceUser(
    request: operations.GetResourceUserRequest,
    options?: RequestOptions,
  ): Promise<operations.GetResourceUserResponse> {
    return unwrapAsync(resourcesGetResourceUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Get user's access status to a resource.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async resourceUserAccessStatusRetrieve(
    request: operations.ResourceUserAccessStatusRetrieveRequest,
    options?: RequestOptions,
  ): Promise<components.ResourceUserAccessStatus> {
    return unwrapAsync(resourcesResourceUserAccessStatusRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all tags applied to the resource.
   */
  async getResourceTags(
    request: operations.GetResourceTagsRequest,
    options?: RequestOptions,
  ): Promise<components.TagsList> {
    return unwrapAsync(resourcesGetResourceTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all the scoped role permissions that apply to the given resource. Only OPAL_SCOPED_ROLE resource type supports this field.
   */
  async getResourceScopedRolePermissions(
    request: operations.GetResourceScopedRolePermissionsRequest,
    options?: RequestOptions,
  ): Promise<components.ScopedRolePermissionList> {
    return unwrapAsync(resourcesGetResourceScopedRolePermissions(
      this,
      request,
      options,
    ));
  }

  /**
   * Sets all the scoped role permissions on an OPAL_SCOPED_ROLE resource.
   */
  async setResourceScopedRolePermissions(
    request: operations.SetResourceScopedRolePermissionsRequest,
    options?: RequestOptions,
  ): Promise<components.ScopedRolePermissionList> {
    return unwrapAsync(resourcesSetResourceScopedRolePermissions(
      this,
      request,
      options,
    ));
  }
}
