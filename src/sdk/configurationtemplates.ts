/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { configurationTemplatesCreateConfigurationTemplate } from "../funcs/configurationTemplatesCreateConfigurationTemplate.js";
import { configurationTemplatesDeleteConfigurationTemplate } from "../funcs/configurationTemplatesDeleteConfigurationTemplate.js";
import { configurationTemplatesGetConfigurationTemplates } from "../funcs/configurationTemplatesGetConfigurationTemplates.js";
import { configurationTemplatesUpdateConfigurationTemplate } from "../funcs/configurationTemplatesUpdateConfigurationTemplate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ConfigurationTemplates extends ClientSDK {
  /**
   * Returns a list of `ConfigurationTemplate` objects.
   */
  async getConfigurationTemplates(
    options?: RequestOptions,
  ): Promise<components.PaginatedConfigurationTemplateList> {
    return unwrapAsync(configurationTemplatesGetConfigurationTemplates(
      this,
      options,
    ));
  }

  /**
   * Creates a configuration template.
   */
  async createConfigurationTemplate(
    request: components.CreateConfigurationTemplateInfo,
    options?: RequestOptions,
  ): Promise<components.ConfigurationTemplate> {
    return unwrapAsync(configurationTemplatesCreateConfigurationTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a configuration template.
   */
  async updateConfigurationTemplate(
    request: components.UpdateConfigurationTemplateInfo,
    options?: RequestOptions,
  ): Promise<components.ConfigurationTemplate> {
    return unwrapAsync(configurationTemplatesUpdateConfigurationTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a configuration template.
   */
  async deleteConfigurationTemplate(
    request: operations.DeleteConfigurationTemplateRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(configurationTemplatesDeleteConfigurationTemplate(
      this,
      request,
      options,
    ));
  }
}
