/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateGroupUserRequestBody = {
  /**
   * The updated duration for which the group can be accessed (in minutes). Use 0 for indefinite.
   */
  durationMinutes: number;
  /**
   * The updated remote ID of the access level granted to this user.
   */
  accessLevelRemoteId?: string | undefined;
};

export type UpdateGroupUserRequest = {
  /**
   * The ID of the group.
   */
  groupId: string;
  /**
   * The ID of the user whose access is being updated.
   */
  userId: string;
  requestBody: UpdateGroupUserRequestBody;
};

/** @internal */
export const UpdateGroupUserRequestBody$inboundSchema: z.ZodType<
  UpdateGroupUserRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration_minutes: z.number().int(),
  access_level_remote_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "duration_minutes": "durationMinutes",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type UpdateGroupUserRequestBody$Outbound = {
  duration_minutes: number;
  access_level_remote_id?: string | undefined;
};

/** @internal */
export const UpdateGroupUserRequestBody$outboundSchema: z.ZodType<
  UpdateGroupUserRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateGroupUserRequestBody
> = z.object({
  durationMinutes: z.number().int(),
  accessLevelRemoteId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    durationMinutes: "duration_minutes",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupUserRequestBody$ {
  /** @deprecated use `UpdateGroupUserRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupUserRequestBody$inboundSchema;
  /** @deprecated use `UpdateGroupUserRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupUserRequestBody$outboundSchema;
  /** @deprecated use `UpdateGroupUserRequestBody$Outbound` instead. */
  export type Outbound = UpdateGroupUserRequestBody$Outbound;
}

export function updateGroupUserRequestBodyToJSON(
  updateGroupUserRequestBody: UpdateGroupUserRequestBody,
): string {
  return JSON.stringify(
    UpdateGroupUserRequestBody$outboundSchema.parse(updateGroupUserRequestBody),
  );
}

export function updateGroupUserRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupUserRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupUserRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupUserRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateGroupUserRequest$inboundSchema: z.ZodType<
  UpdateGroupUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  user_id: z.string(),
  RequestBody: z.lazy(() => UpdateGroupUserRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "user_id": "userId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateGroupUserRequest$Outbound = {
  group_id: string;
  user_id: string;
  RequestBody: UpdateGroupUserRequestBody$Outbound;
};

/** @internal */
export const UpdateGroupUserRequest$outboundSchema: z.ZodType<
  UpdateGroupUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateGroupUserRequest
> = z.object({
  groupId: z.string(),
  userId: z.string(),
  requestBody: z.lazy(() => UpdateGroupUserRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    userId: "user_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupUserRequest$ {
  /** @deprecated use `UpdateGroupUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupUserRequest$inboundSchema;
  /** @deprecated use `UpdateGroupUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupUserRequest$outboundSchema;
  /** @deprecated use `UpdateGroupUserRequest$Outbound` instead. */
  export type Outbound = UpdateGroupUserRequest$Outbound;
}

export function updateGroupUserRequestToJSON(
  updateGroupUserRequest: UpdateGroupUserRequest,
): string {
  return JSON.stringify(
    UpdateGroupUserRequest$outboundSchema.parse(updateGroupUserRequest),
  );
}

export function updateGroupUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupUserRequest' from JSON`,
  );
}
