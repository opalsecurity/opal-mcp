/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOnCallScheduleRequest = {
  /**
   * The ID of the on_call_schedule.
   */
  onCallScheduleId: string;
};

/** @internal */
export const GetOnCallScheduleRequest$inboundSchema: z.ZodType<
  GetOnCallScheduleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  on_call_schedule_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "on_call_schedule_id": "onCallScheduleId",
  });
});

/** @internal */
export type GetOnCallScheduleRequest$Outbound = {
  on_call_schedule_id: string;
};

/** @internal */
export const GetOnCallScheduleRequest$outboundSchema: z.ZodType<
  GetOnCallScheduleRequest$Outbound,
  z.ZodTypeDef,
  GetOnCallScheduleRequest
> = z.object({
  onCallScheduleId: z.string(),
}).transform((v) => {
  return remap$(v, {
    onCallScheduleId: "on_call_schedule_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOnCallScheduleRequest$ {
  /** @deprecated use `GetOnCallScheduleRequest$inboundSchema` instead. */
  export const inboundSchema = GetOnCallScheduleRequest$inboundSchema;
  /** @deprecated use `GetOnCallScheduleRequest$outboundSchema` instead. */
  export const outboundSchema = GetOnCallScheduleRequest$outboundSchema;
  /** @deprecated use `GetOnCallScheduleRequest$Outbound` instead. */
  export type Outbound = GetOnCallScheduleRequest$Outbound;
}

export function getOnCallScheduleRequestToJSON(
  getOnCallScheduleRequest: GetOnCallScheduleRequest,
): string {
  return JSON.stringify(
    GetOnCallScheduleRequest$outboundSchema.parse(getOnCallScheduleRequest),
  );
}

export function getOnCallScheduleRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOnCallScheduleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOnCallScheduleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOnCallScheduleRequest' from JSON`,
  );
}
