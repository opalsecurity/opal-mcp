/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EventsRequest = {
  /**
   * A start date filter for the events.
   */
  startDateFilter?: string | undefined;
  /**
   * An end date filter for the events.
   */
  endDateFilter?: string | undefined;
  /**
   * An actor filter for the events. Supply the ID of the actor.
   */
  actorFilter?: string | undefined;
  /**
   * An object filter for the events. Supply the ID of the object.
   */
  objectFilter?: string | undefined;
  /**
   * An event type filter for the events.
   */
  eventTypeFilter?: string | undefined;
  /**
   * An API filter for the events. Supply the name and preview of the API token.
   */
  apiTokenFilter?: string | undefined;
  /**
   * The pagination cursor value.
   */
  cursor?: string | undefined;
  /**
   * Number of results to return per page. Default is 200.
   */
  pageSize?: number | undefined;
};

export type EventsResponse = {
  result: components.PaginatedEventList;
};

/** @internal */
export const EventsRequest$inboundSchema: z.ZodType<
  EventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date_filter: z.string().optional(),
  end_date_filter: z.string().optional(),
  actor_filter: z.string().optional(),
  object_filter: z.string().optional(),
  event_type_filter: z.string().optional(),
  api_token_filter: z.string().optional(),
  cursor: z.string().optional(),
  page_size: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date_filter": "startDateFilter",
    "end_date_filter": "endDateFilter",
    "actor_filter": "actorFilter",
    "object_filter": "objectFilter",
    "event_type_filter": "eventTypeFilter",
    "api_token_filter": "apiTokenFilter",
    "page_size": "pageSize",
  });
});

/** @internal */
export type EventsRequest$Outbound = {
  start_date_filter?: string | undefined;
  end_date_filter?: string | undefined;
  actor_filter?: string | undefined;
  object_filter?: string | undefined;
  event_type_filter?: string | undefined;
  api_token_filter?: string | undefined;
  cursor?: string | undefined;
  page_size?: number | undefined;
};

/** @internal */
export const EventsRequest$outboundSchema: z.ZodType<
  EventsRequest$Outbound,
  z.ZodTypeDef,
  EventsRequest
> = z.object({
  startDateFilter: z.string().optional(),
  endDateFilter: z.string().optional(),
  actorFilter: z.string().optional(),
  objectFilter: z.string().optional(),
  eventTypeFilter: z.string().optional(),
  apiTokenFilter: z.string().optional(),
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    startDateFilter: "start_date_filter",
    endDateFilter: "end_date_filter",
    actorFilter: "actor_filter",
    objectFilter: "object_filter",
    eventTypeFilter: "event_type_filter",
    apiTokenFilter: "api_token_filter",
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsRequest$ {
  /** @deprecated use `EventsRequest$inboundSchema` instead. */
  export const inboundSchema = EventsRequest$inboundSchema;
  /** @deprecated use `EventsRequest$outboundSchema` instead. */
  export const outboundSchema = EventsRequest$outboundSchema;
  /** @deprecated use `EventsRequest$Outbound` instead. */
  export type Outbound = EventsRequest$Outbound;
}

export function eventsRequestToJSON(eventsRequest: EventsRequest): string {
  return JSON.stringify(EventsRequest$outboundSchema.parse(eventsRequest));
}

export function eventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<EventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsRequest' from JSON`,
  );
}

/** @internal */
export const EventsResponse$inboundSchema: z.ZodType<
  EventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.PaginatedEventList$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type EventsResponse$Outbound = {
  Result: components.PaginatedEventList$Outbound;
};

/** @internal */
export const EventsResponse$outboundSchema: z.ZodType<
  EventsResponse$Outbound,
  z.ZodTypeDef,
  EventsResponse
> = z.object({
  result: components.PaginatedEventList$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsResponse$ {
  /** @deprecated use `EventsResponse$inboundSchema` instead. */
  export const inboundSchema = EventsResponse$inboundSchema;
  /** @deprecated use `EventsResponse$outboundSchema` instead. */
  export const outboundSchema = EventsResponse$outboundSchema;
  /** @deprecated use `EventsResponse$Outbound` instead. */
  export type Outbound = EventsResponse$Outbound;
}

export function eventsResponseToJSON(eventsResponse: EventsResponse): string {
  return JSON.stringify(EventsResponse$outboundSchema.parse(eventsResponse));
}

export function eventsResponseFromJSON(
  jsonString: string,
): SafeParseResult<EventsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsResponse' from JSON`,
  );
}
