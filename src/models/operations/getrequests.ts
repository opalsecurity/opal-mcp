/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRequestsRequest = {
  /**
   * A start date filter for the events.
   */
  startDateFilter?: string | undefined;
  /**
   * An end date filter for the events.
   */
  endDateFilter?: string | undefined;
  /**
   * The pagination cursor value.
   */
  cursor?: string | undefined;
  /**
   * Number of results to return per page. Default is 200.
   */
  pageSize?: number | undefined;
  /**
   * Boolean toggle for if it should only show pending requests.
   */
  showPendingOnly?: boolean | undefined;
};

/** @internal */
export const GetRequestsRequest$inboundSchema: z.ZodType<
  GetRequestsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date_filter: z.string().optional(),
  end_date_filter: z.string().optional(),
  cursor: z.string().optional(),
  page_size: z.number().int().optional(),
  show_pending_only: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date_filter": "startDateFilter",
    "end_date_filter": "endDateFilter",
    "page_size": "pageSize",
    "show_pending_only": "showPendingOnly",
  });
});

/** @internal */
export type GetRequestsRequest$Outbound = {
  start_date_filter?: string | undefined;
  end_date_filter?: string | undefined;
  cursor?: string | undefined;
  page_size?: number | undefined;
  show_pending_only?: boolean | undefined;
};

/** @internal */
export const GetRequestsRequest$outboundSchema: z.ZodType<
  GetRequestsRequest$Outbound,
  z.ZodTypeDef,
  GetRequestsRequest
> = z.object({
  startDateFilter: z.string().optional(),
  endDateFilter: z.string().optional(),
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  showPendingOnly: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    startDateFilter: "start_date_filter",
    endDateFilter: "end_date_filter",
    pageSize: "page_size",
    showPendingOnly: "show_pending_only",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRequestsRequest$ {
  /** @deprecated use `GetRequestsRequest$inboundSchema` instead. */
  export const inboundSchema = GetRequestsRequest$inboundSchema;
  /** @deprecated use `GetRequestsRequest$outboundSchema` instead. */
  export const outboundSchema = GetRequestsRequest$outboundSchema;
  /** @deprecated use `GetRequestsRequest$Outbound` instead. */
  export type Outbound = GetRequestsRequest$Outbound;
}

export function getRequestsRequestToJSON(
  getRequestsRequest: GetRequestsRequest,
): string {
  return JSON.stringify(
    GetRequestsRequest$outboundSchema.parse(getRequestsRequest),
  );
}

export function getRequestsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRequestsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRequestsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRequestsRequest' from JSON`,
  );
}
