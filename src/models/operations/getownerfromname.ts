/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOwnerFromNameRequest = {
  /**
   * The name of the owner.
   */
  ownerName: string;
};

/** @internal */
export const GetOwnerFromNameRequest$inboundSchema: z.ZodType<
  GetOwnerFromNameRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  owner_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "owner_name": "ownerName",
  });
});

/** @internal */
export type GetOwnerFromNameRequest$Outbound = {
  owner_name: string;
};

/** @internal */
export const GetOwnerFromNameRequest$outboundSchema: z.ZodType<
  GetOwnerFromNameRequest$Outbound,
  z.ZodTypeDef,
  GetOwnerFromNameRequest
> = z.object({
  ownerName: z.string(),
}).transform((v) => {
  return remap$(v, {
    ownerName: "owner_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOwnerFromNameRequest$ {
  /** @deprecated use `GetOwnerFromNameRequest$inboundSchema` instead. */
  export const inboundSchema = GetOwnerFromNameRequest$inboundSchema;
  /** @deprecated use `GetOwnerFromNameRequest$outboundSchema` instead. */
  export const outboundSchema = GetOwnerFromNameRequest$outboundSchema;
  /** @deprecated use `GetOwnerFromNameRequest$Outbound` instead. */
  export type Outbound = GetOwnerFromNameRequest$Outbound;
}

export function getOwnerFromNameRequestToJSON(
  getOwnerFromNameRequest: GetOwnerFromNameRequest,
): string {
  return JSON.stringify(
    GetOwnerFromNameRequest$outboundSchema.parse(getOwnerFromNameRequest),
  );
}

export function getOwnerFromNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOwnerFromNameRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOwnerFromNameRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOwnerFromNameRequest' from JSON`,
  );
}
