/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMessageChannelRequest = {
  /**
   * The ID of the message_channel.
   */
  messageChannelId: string;
};

/** @internal */
export const GetMessageChannelRequest$inboundSchema: z.ZodType<
  GetMessageChannelRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  message_channel_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "message_channel_id": "messageChannelId",
  });
});

/** @internal */
export type GetMessageChannelRequest$Outbound = {
  message_channel_id: string;
};

/** @internal */
export const GetMessageChannelRequest$outboundSchema: z.ZodType<
  GetMessageChannelRequest$Outbound,
  z.ZodTypeDef,
  GetMessageChannelRequest
> = z.object({
  messageChannelId: z.string(),
}).transform((v) => {
  return remap$(v, {
    messageChannelId: "message_channel_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMessageChannelRequest$ {
  /** @deprecated use `GetMessageChannelRequest$inboundSchema` instead. */
  export const inboundSchema = GetMessageChannelRequest$inboundSchema;
  /** @deprecated use `GetMessageChannelRequest$outboundSchema` instead. */
  export const outboundSchema = GetMessageChannelRequest$outboundSchema;
  /** @deprecated use `GetMessageChannelRequest$Outbound` instead. */
  export type Outbound = GetMessageChannelRequest$Outbound;
}

export function getMessageChannelRequestToJSON(
  getMessageChannelRequest: GetMessageChannelRequest,
): string {
  return JSON.stringify(
    GetMessageChannelRequest$outboundSchema.parse(getMessageChannelRequest),
  );
}

export function getMessageChannelRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMessageChannelRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMessageChannelRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMessageChannelRequest' from JSON`,
  );
}
