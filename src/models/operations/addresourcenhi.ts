/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddResourceNhiRequestBody = {
  /**
   * The duration for which the resource can be accessed (in minutes). Use 0 to set to indefinite.
   */
  durationMinutes: number;
  /**
   * The remote ID of the access level to grant. If omitted, the default access level remote ID value (empty string) is used.
   */
  accessLevelRemoteId?: string | undefined;
};

export type AddResourceNhiRequest = {
  /**
   * The ID of the resource.
   */
  resourceId: string;
  /**
   * The resource ID of the non-human identity to add.
   */
  nonHumanIdentityId: string;
  requestBody?: AddResourceNhiRequestBody | undefined;
};

/** @internal */
export const AddResourceNhiRequestBody$inboundSchema: z.ZodType<
  AddResourceNhiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration_minutes: z.number().int(),
  access_level_remote_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "duration_minutes": "durationMinutes",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type AddResourceNhiRequestBody$Outbound = {
  duration_minutes: number;
  access_level_remote_id?: string | undefined;
};

/** @internal */
export const AddResourceNhiRequestBody$outboundSchema: z.ZodType<
  AddResourceNhiRequestBody$Outbound,
  z.ZodTypeDef,
  AddResourceNhiRequestBody
> = z.object({
  durationMinutes: z.number().int(),
  accessLevelRemoteId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    durationMinutes: "duration_minutes",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddResourceNhiRequestBody$ {
  /** @deprecated use `AddResourceNhiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddResourceNhiRequestBody$inboundSchema;
  /** @deprecated use `AddResourceNhiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddResourceNhiRequestBody$outboundSchema;
  /** @deprecated use `AddResourceNhiRequestBody$Outbound` instead. */
  export type Outbound = AddResourceNhiRequestBody$Outbound;
}

export function addResourceNhiRequestBodyToJSON(
  addResourceNhiRequestBody: AddResourceNhiRequestBody,
): string {
  return JSON.stringify(
    AddResourceNhiRequestBody$outboundSchema.parse(addResourceNhiRequestBody),
  );
}

export function addResourceNhiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddResourceNhiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddResourceNhiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddResourceNhiRequestBody' from JSON`,
  );
}

/** @internal */
export const AddResourceNhiRequest$inboundSchema: z.ZodType<
  AddResourceNhiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  non_human_identity_id: z.string(),
  RequestBody: z.lazy(() => AddResourceNhiRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "non_human_identity_id": "nonHumanIdentityId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddResourceNhiRequest$Outbound = {
  resource_id: string;
  non_human_identity_id: string;
  RequestBody?: AddResourceNhiRequestBody$Outbound | undefined;
};

/** @internal */
export const AddResourceNhiRequest$outboundSchema: z.ZodType<
  AddResourceNhiRequest$Outbound,
  z.ZodTypeDef,
  AddResourceNhiRequest
> = z.object({
  resourceId: z.string(),
  nonHumanIdentityId: z.string(),
  requestBody: z.lazy(() => AddResourceNhiRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    nonHumanIdentityId: "non_human_identity_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddResourceNhiRequest$ {
  /** @deprecated use `AddResourceNhiRequest$inboundSchema` instead. */
  export const inboundSchema = AddResourceNhiRequest$inboundSchema;
  /** @deprecated use `AddResourceNhiRequest$outboundSchema` instead. */
  export const outboundSchema = AddResourceNhiRequest$outboundSchema;
  /** @deprecated use `AddResourceNhiRequest$Outbound` instead. */
  export type Outbound = AddResourceNhiRequest$Outbound;
}

export function addResourceNhiRequestToJSON(
  addResourceNhiRequest: AddResourceNhiRequest,
): string {
  return JSON.stringify(
    AddResourceNhiRequest$outboundSchema.parse(addResourceNhiRequest),
  );
}

export function addResourceNhiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddResourceNhiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddResourceNhiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddResourceNhiRequest' from JSON`,
  );
}
