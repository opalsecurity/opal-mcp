/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetGroupsRequest = {
  /**
   * The pagination cursor value.
   */
  cursor?: string | undefined;
  /**
   * Number of results to return per page. Default is 200.
   */
  pageSize?: number | undefined;
  /**
   * The group type to filter by.
   */
  groupTypeFilter?: components.GroupTypeEnum | undefined;
  /**
   * The group ids to filter by.
   */
  groupIds?: Array<string> | undefined;
  /**
   * Group name.
   */
  groupName?: string | undefined;
};

/** @internal */
export const GetGroupsRequest$inboundSchema: z.ZodType<
  GetGroupsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  page_size: z.number().int().optional(),
  group_type_filter: components.GroupTypeEnum$inboundSchema.optional(),
  group_ids: z.array(z.string()).optional(),
  group_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "group_type_filter": "groupTypeFilter",
    "group_ids": "groupIds",
    "group_name": "groupName",
  });
});

/** @internal */
export type GetGroupsRequest$Outbound = {
  cursor?: string | undefined;
  page_size?: number | undefined;
  group_type_filter?: string | undefined;
  group_ids?: Array<string> | undefined;
  group_name?: string | undefined;
};

/** @internal */
export const GetGroupsRequest$outboundSchema: z.ZodType<
  GetGroupsRequest$Outbound,
  z.ZodTypeDef,
  GetGroupsRequest
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  groupTypeFilter: components.GroupTypeEnum$outboundSchema.optional(),
  groupIds: z.array(z.string()).optional(),
  groupName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    groupTypeFilter: "group_type_filter",
    groupIds: "group_ids",
    groupName: "group_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGroupsRequest$ {
  /** @deprecated use `GetGroupsRequest$inboundSchema` instead. */
  export const inboundSchema = GetGroupsRequest$inboundSchema;
  /** @deprecated use `GetGroupsRequest$outboundSchema` instead. */
  export const outboundSchema = GetGroupsRequest$outboundSchema;
  /** @deprecated use `GetGroupsRequest$Outbound` instead. */
  export type Outbound = GetGroupsRequest$Outbound;
}

export function getGroupsRequestToJSON(
  getGroupsRequest: GetGroupsRequest,
): string {
  return JSON.stringify(
    GetGroupsRequest$outboundSchema.parse(getGroupsRequest),
  );
}

export function getGroupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetGroupsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGroupsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGroupsRequest' from JSON`,
  );
}
