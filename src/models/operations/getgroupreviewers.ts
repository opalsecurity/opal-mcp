/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetGroupReviewersRequest = {
  /**
   * The ID of the group.
   */
  groupId: string;
};

/** @internal */
export const GetGroupReviewersRequest$inboundSchema: z.ZodType<
  GetGroupReviewersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type GetGroupReviewersRequest$Outbound = {
  group_id: string;
};

/** @internal */
export const GetGroupReviewersRequest$outboundSchema: z.ZodType<
  GetGroupReviewersRequest$Outbound,
  z.ZodTypeDef,
  GetGroupReviewersRequest
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGroupReviewersRequest$ {
  /** @deprecated use `GetGroupReviewersRequest$inboundSchema` instead. */
  export const inboundSchema = GetGroupReviewersRequest$inboundSchema;
  /** @deprecated use `GetGroupReviewersRequest$outboundSchema` instead. */
  export const outboundSchema = GetGroupReviewersRequest$outboundSchema;
  /** @deprecated use `GetGroupReviewersRequest$Outbound` instead. */
  export type Outbound = GetGroupReviewersRequest$Outbound;
}

export function getGroupReviewersRequestToJSON(
  getGroupReviewersRequest: GetGroupReviewersRequest,
): string {
  return JSON.stringify(
    GetGroupReviewersRequest$outboundSchema.parse(getGroupReviewersRequest),
  );
}

export function getGroupReviewersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetGroupReviewersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGroupReviewersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGroupReviewersRequest' from JSON`,
  );
}
