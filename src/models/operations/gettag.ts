/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTagRequest = {
  /**
   * The key of the tag to get.
   */
  tagKey: string;
  /**
   * The value of the tag to get.
   */
  tagValue?: string | undefined;
};

/** @internal */
export const GetTagRequest$inboundSchema: z.ZodType<
  GetTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag_key: z.string(),
  tag_value: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tag_key": "tagKey",
    "tag_value": "tagValue",
  });
});

/** @internal */
export type GetTagRequest$Outbound = {
  tag_key: string;
  tag_value?: string | undefined;
};

/** @internal */
export const GetTagRequest$outboundSchema: z.ZodType<
  GetTagRequest$Outbound,
  z.ZodTypeDef,
  GetTagRequest
> = z.object({
  tagKey: z.string(),
  tagValue: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tagKey: "tag_key",
    tagValue: "tag_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagRequest$ {
  /** @deprecated use `GetTagRequest$inboundSchema` instead. */
  export const inboundSchema = GetTagRequest$inboundSchema;
  /** @deprecated use `GetTagRequest$outboundSchema` instead. */
  export const outboundSchema = GetTagRequest$outboundSchema;
  /** @deprecated use `GetTagRequest$Outbound` instead. */
  export type Outbound = GetTagRequest$Outbound;
}

export function getTagRequestToJSON(getTagRequest: GetTagRequest): string {
  return JSON.stringify(GetTagRequest$outboundSchema.parse(getTagRequest));
}

export function getTagRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagRequest' from JSON`,
  );
}
