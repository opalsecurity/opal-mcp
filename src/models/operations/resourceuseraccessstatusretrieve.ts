/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResourceUserAccessStatusRetrieveRequest = {
  /**
   * The ID of the resource.
   */
  resourceId: string;
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * The remote ID of the access level that you wish to query for the resource. If omitted, the default access level remote ID value (empty string) is used.
   */
  accessLevelRemoteId?: string | undefined;
  /**
   * The pagination cursor value.
   */
  cursor?: string | undefined;
  /**
   * Number of results to return per page. Default is 200.
   */
  pageSize?: number | undefined;
};

/** @internal */
export const ResourceUserAccessStatusRetrieveRequest$inboundSchema: z.ZodType<
  ResourceUserAccessStatusRetrieveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  user_id: z.string(),
  access_level_remote_id: z.string().optional(),
  cursor: z.string().optional(),
  page_size: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "user_id": "userId",
    "access_level_remote_id": "accessLevelRemoteId",
    "page_size": "pageSize",
  });
});

/** @internal */
export type ResourceUserAccessStatusRetrieveRequest$Outbound = {
  resource_id: string;
  user_id: string;
  access_level_remote_id?: string | undefined;
  cursor?: string | undefined;
  page_size?: number | undefined;
};

/** @internal */
export const ResourceUserAccessStatusRetrieveRequest$outboundSchema: z.ZodType<
  ResourceUserAccessStatusRetrieveRequest$Outbound,
  z.ZodTypeDef,
  ResourceUserAccessStatusRetrieveRequest
> = z.object({
  resourceId: z.string(),
  userId: z.string(),
  accessLevelRemoteId: z.string().optional(),
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    userId: "user_id",
    accessLevelRemoteId: "access_level_remote_id",
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceUserAccessStatusRetrieveRequest$ {
  /** @deprecated use `ResourceUserAccessStatusRetrieveRequest$inboundSchema` instead. */
  export const inboundSchema =
    ResourceUserAccessStatusRetrieveRequest$inboundSchema;
  /** @deprecated use `ResourceUserAccessStatusRetrieveRequest$outboundSchema` instead. */
  export const outboundSchema =
    ResourceUserAccessStatusRetrieveRequest$outboundSchema;
  /** @deprecated use `ResourceUserAccessStatusRetrieveRequest$Outbound` instead. */
  export type Outbound = ResourceUserAccessStatusRetrieveRequest$Outbound;
}

export function resourceUserAccessStatusRetrieveRequestToJSON(
  resourceUserAccessStatusRetrieveRequest:
    ResourceUserAccessStatusRetrieveRequest,
): string {
  return JSON.stringify(
    ResourceUserAccessStatusRetrieveRequest$outboundSchema.parse(
      resourceUserAccessStatusRetrieveRequest,
    ),
  );
}

export function resourceUserAccessStatusRetrieveRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ResourceUserAccessStatusRetrieveRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResourceUserAccessStatusRetrieveRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResourceUserAccessStatusRetrieveRequest' from JSON`,
  );
}
