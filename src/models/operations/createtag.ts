/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTagRequest = {
  /**
   * The key of the tag to create.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  tagKey?: string | undefined;
  /**
   * The value of the tag to create.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  tagValue?: string | undefined;
  /**
   * The ID of the owner that manages the tag.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  adminOwnerId?: string | undefined;
  createTagInfo?: components.CreateTagInfo | undefined;
};

/** @internal */
export const CreateTagRequest$inboundSchema: z.ZodType<
  CreateTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag_key: z.string().optional(),
  tag_value: z.string().optional(),
  admin_owner_id: z.string().optional(),
  CreateTagInfo: components.CreateTagInfo$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "tag_key": "tagKey",
    "tag_value": "tagValue",
    "admin_owner_id": "adminOwnerId",
    "CreateTagInfo": "createTagInfo",
  });
});

/** @internal */
export type CreateTagRequest$Outbound = {
  tag_key?: string | undefined;
  tag_value?: string | undefined;
  admin_owner_id?: string | undefined;
  CreateTagInfo?: components.CreateTagInfo$Outbound | undefined;
};

/** @internal */
export const CreateTagRequest$outboundSchema: z.ZodType<
  CreateTagRequest$Outbound,
  z.ZodTypeDef,
  CreateTagRequest
> = z.object({
  tagKey: z.string().optional(),
  tagValue: z.string().optional(),
  adminOwnerId: z.string().optional(),
  createTagInfo: components.CreateTagInfo$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    tagKey: "tag_key",
    tagValue: "tag_value",
    adminOwnerId: "admin_owner_id",
    createTagInfo: "CreateTagInfo",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTagRequest$ {
  /** @deprecated use `CreateTagRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTagRequest$inboundSchema;
  /** @deprecated use `CreateTagRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTagRequest$outboundSchema;
  /** @deprecated use `CreateTagRequest$Outbound` instead. */
  export type Outbound = CreateTagRequest$Outbound;
}

export function createTagRequestToJSON(
  createTagRequest: CreateTagRequest,
): string {
  return JSON.stringify(
    CreateTagRequest$outboundSchema.parse(createTagRequest),
  );
}

export function createTagRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTagRequest' from JSON`,
  );
}
