/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddBundleGroupRequestBody = {
  /**
   * The ID of the group to add.
   */
  groupId: string;
  /**
   * The remote ID of the access level to grant to this user. Required if the group being added requires an access level. If omitted, the default access level remote ID value (empty string) is used.
   */
  accessLevelRemoteId?: string | undefined;
  /**
   * The name of the access level to grant to this user. If omitted, the default access level name value (empty string) is used.
   */
  accessLevelName?: string | undefined;
};

export type AddBundleGroupRequest = {
  /**
   * The ID of the bundle.
   */
  bundleId: string;
  requestBody: AddBundleGroupRequestBody;
};

/** @internal */
export const AddBundleGroupRequestBody$inboundSchema: z.ZodType<
  AddBundleGroupRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  access_level_remote_id: z.string().optional(),
  access_level_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "access_level_remote_id": "accessLevelRemoteId",
    "access_level_name": "accessLevelName",
  });
});

/** @internal */
export type AddBundleGroupRequestBody$Outbound = {
  group_id: string;
  access_level_remote_id?: string | undefined;
  access_level_name?: string | undefined;
};

/** @internal */
export const AddBundleGroupRequestBody$outboundSchema: z.ZodType<
  AddBundleGroupRequestBody$Outbound,
  z.ZodTypeDef,
  AddBundleGroupRequestBody
> = z.object({
  groupId: z.string(),
  accessLevelRemoteId: z.string().optional(),
  accessLevelName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    accessLevelRemoteId: "access_level_remote_id",
    accessLevelName: "access_level_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddBundleGroupRequestBody$ {
  /** @deprecated use `AddBundleGroupRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddBundleGroupRequestBody$inboundSchema;
  /** @deprecated use `AddBundleGroupRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddBundleGroupRequestBody$outboundSchema;
  /** @deprecated use `AddBundleGroupRequestBody$Outbound` instead. */
  export type Outbound = AddBundleGroupRequestBody$Outbound;
}

export function addBundleGroupRequestBodyToJSON(
  addBundleGroupRequestBody: AddBundleGroupRequestBody,
): string {
  return JSON.stringify(
    AddBundleGroupRequestBody$outboundSchema.parse(addBundleGroupRequestBody),
  );
}

export function addBundleGroupRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddBundleGroupRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddBundleGroupRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddBundleGroupRequestBody' from JSON`,
  );
}

/** @internal */
export const AddBundleGroupRequest$inboundSchema: z.ZodType<
  AddBundleGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bundle_id: z.string(),
  RequestBody: z.lazy(() => AddBundleGroupRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "bundle_id": "bundleId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddBundleGroupRequest$Outbound = {
  bundle_id: string;
  RequestBody: AddBundleGroupRequestBody$Outbound;
};

/** @internal */
export const AddBundleGroupRequest$outboundSchema: z.ZodType<
  AddBundleGroupRequest$Outbound,
  z.ZodTypeDef,
  AddBundleGroupRequest
> = z.object({
  bundleId: z.string(),
  requestBody: z.lazy(() => AddBundleGroupRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddBundleGroupRequest$ {
  /** @deprecated use `AddBundleGroupRequest$inboundSchema` instead. */
  export const inboundSchema = AddBundleGroupRequest$inboundSchema;
  /** @deprecated use `AddBundleGroupRequest$outboundSchema` instead. */
  export const outboundSchema = AddBundleGroupRequest$outboundSchema;
  /** @deprecated use `AddBundleGroupRequest$Outbound` instead. */
  export type Outbound = AddBundleGroupRequest$Outbound;
}

export function addBundleGroupRequestToJSON(
  addBundleGroupRequest: AddBundleGroupRequest,
): string {
  return JSON.stringify(
    AddBundleGroupRequest$outboundSchema.parse(addBundleGroupRequest),
  );
}

export function addBundleGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddBundleGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddBundleGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddBundleGroupRequest' from JSON`,
  );
}
