/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Mapping = {
  groupId?: string | undefined;
  alias?: string | undefined;
  hiddenFromEndUser?: boolean | undefined;
};

export type UpdateIdpGroupMappingsRequestBody = {
  mappings: Array<Mapping>;
};

export type UpdateIdpGroupMappingsRequest = {
  /**
   * The ID of the Okta app.
   */
  appResourceId: string;
  requestBody: UpdateIdpGroupMappingsRequestBody;
};

/** @internal */
export const Mapping$inboundSchema: z.ZodType<Mapping, z.ZodTypeDef, unknown> =
  z.object({
    group_id: z.string().optional(),
    alias: z.string().optional(),
    hidden_from_end_user: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "group_id": "groupId",
      "hidden_from_end_user": "hiddenFromEndUser",
    });
  });

/** @internal */
export type Mapping$Outbound = {
  group_id?: string | undefined;
  alias?: string | undefined;
  hidden_from_end_user?: boolean | undefined;
};

/** @internal */
export const Mapping$outboundSchema: z.ZodType<
  Mapping$Outbound,
  z.ZodTypeDef,
  Mapping
> = z.object({
  groupId: z.string().optional(),
  alias: z.string().optional(),
  hiddenFromEndUser: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    hiddenFromEndUser: "hidden_from_end_user",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mapping$ {
  /** @deprecated use `Mapping$inboundSchema` instead. */
  export const inboundSchema = Mapping$inboundSchema;
  /** @deprecated use `Mapping$outboundSchema` instead. */
  export const outboundSchema = Mapping$outboundSchema;
  /** @deprecated use `Mapping$Outbound` instead. */
  export type Outbound = Mapping$Outbound;
}

export function mappingToJSON(mapping: Mapping): string {
  return JSON.stringify(Mapping$outboundSchema.parse(mapping));
}

export function mappingFromJSON(
  jsonString: string,
): SafeParseResult<Mapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Mapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Mapping' from JSON`,
  );
}

/** @internal */
export const UpdateIdpGroupMappingsRequestBody$inboundSchema: z.ZodType<
  UpdateIdpGroupMappingsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mappings: z.array(z.lazy(() => Mapping$inboundSchema)),
});

/** @internal */
export type UpdateIdpGroupMappingsRequestBody$Outbound = {
  mappings: Array<Mapping$Outbound>;
};

/** @internal */
export const UpdateIdpGroupMappingsRequestBody$outboundSchema: z.ZodType<
  UpdateIdpGroupMappingsRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateIdpGroupMappingsRequestBody
> = z.object({
  mappings: z.array(z.lazy(() => Mapping$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIdpGroupMappingsRequestBody$ {
  /** @deprecated use `UpdateIdpGroupMappingsRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateIdpGroupMappingsRequestBody$inboundSchema;
  /** @deprecated use `UpdateIdpGroupMappingsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateIdpGroupMappingsRequestBody$outboundSchema;
  /** @deprecated use `UpdateIdpGroupMappingsRequestBody$Outbound` instead. */
  export type Outbound = UpdateIdpGroupMappingsRequestBody$Outbound;
}

export function updateIdpGroupMappingsRequestBodyToJSON(
  updateIdpGroupMappingsRequestBody: UpdateIdpGroupMappingsRequestBody,
): string {
  return JSON.stringify(
    UpdateIdpGroupMappingsRequestBody$outboundSchema.parse(
      updateIdpGroupMappingsRequestBody,
    ),
  );
}

export function updateIdpGroupMappingsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIdpGroupMappingsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIdpGroupMappingsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIdpGroupMappingsRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateIdpGroupMappingsRequest$inboundSchema: z.ZodType<
  UpdateIdpGroupMappingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_resource_id: z.string(),
  RequestBody: z.lazy(() => UpdateIdpGroupMappingsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "app_resource_id": "appResourceId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateIdpGroupMappingsRequest$Outbound = {
  app_resource_id: string;
  RequestBody: UpdateIdpGroupMappingsRequestBody$Outbound;
};

/** @internal */
export const UpdateIdpGroupMappingsRequest$outboundSchema: z.ZodType<
  UpdateIdpGroupMappingsRequest$Outbound,
  z.ZodTypeDef,
  UpdateIdpGroupMappingsRequest
> = z.object({
  appResourceId: z.string(),
  requestBody: z.lazy(() => UpdateIdpGroupMappingsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    appResourceId: "app_resource_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIdpGroupMappingsRequest$ {
  /** @deprecated use `UpdateIdpGroupMappingsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateIdpGroupMappingsRequest$inboundSchema;
  /** @deprecated use `UpdateIdpGroupMappingsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateIdpGroupMappingsRequest$outboundSchema;
  /** @deprecated use `UpdateIdpGroupMappingsRequest$Outbound` instead. */
  export type Outbound = UpdateIdpGroupMappingsRequest$Outbound;
}

export function updateIdpGroupMappingsRequestToJSON(
  updateIdpGroupMappingsRequest: UpdateIdpGroupMappingsRequest,
): string {
  return JSON.stringify(
    UpdateIdpGroupMappingsRequest$outboundSchema.parse(
      updateIdpGroupMappingsRequest,
    ),
  );
}

export function updateIdpGroupMappingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIdpGroupMappingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIdpGroupMappingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIdpGroupMappingsRequest' from JSON`,
  );
}
