/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSyncErrorsRequest = {
  /**
   * The ID of the app to list sync errors for.
   */
  appId?: string | undefined;
  /**
   * The ID of the resource to list sync errors for.
   */
  resourceId?: string | undefined;
  /**
   * The ID of the group to list sync errors for.
   */
  groupId?: string | undefined;
};

/** @internal */
export const GetSyncErrorsRequest$inboundSchema: z.ZodType<
  GetSyncErrorsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_id: z.string().optional(),
  resource_id: z.string().optional(),
  group_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "resource_id": "resourceId",
    "group_id": "groupId",
  });
});

/** @internal */
export type GetSyncErrorsRequest$Outbound = {
  app_id?: string | undefined;
  resource_id?: string | undefined;
  group_id?: string | undefined;
};

/** @internal */
export const GetSyncErrorsRequest$outboundSchema: z.ZodType<
  GetSyncErrorsRequest$Outbound,
  z.ZodTypeDef,
  GetSyncErrorsRequest
> = z.object({
  appId: z.string().optional(),
  resourceId: z.string().optional(),
  groupId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    resourceId: "resource_id",
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSyncErrorsRequest$ {
  /** @deprecated use `GetSyncErrorsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSyncErrorsRequest$inboundSchema;
  /** @deprecated use `GetSyncErrorsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSyncErrorsRequest$outboundSchema;
  /** @deprecated use `GetSyncErrorsRequest$Outbound` instead. */
  export type Outbound = GetSyncErrorsRequest$Outbound;
}

export function getSyncErrorsRequestToJSON(
  getSyncErrorsRequest: GetSyncErrorsRequest,
): string {
  return JSON.stringify(
    GetSyncErrorsRequest$outboundSchema.parse(getSyncErrorsRequest),
  );
}

export function getSyncErrorsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSyncErrorsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSyncErrorsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSyncErrorsRequest' from JSON`,
  );
}
