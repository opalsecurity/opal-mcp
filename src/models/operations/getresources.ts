/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetResourcesRequest = {
  /**
   * The pagination cursor value.
   */
  cursor?: string | undefined;
  /**
   * Number of results to return per page. Default is 200.
   */
  pageSize?: number | undefined;
  /**
   * The resource type to filter by.
   */
  resourceTypeFilter?: components.ResourceTypeEnum | undefined;
  /**
   * The resource ids to filter by.
   */
  resourceIds?: Array<string> | undefined;
  /**
   * Resource name.
   */
  resourceName?: string | undefined;
  /**
   * The parent resource id to filter by.
   */
  parentResourceId?: string | undefined;
  /**
   * The ancestor resource id to filter by. Returns all resources that are descendants of the specified resource.
   */
  ancestorResourceId?: string | undefined;
};

export type GetResourcesResponse = {
  result: components.PaginatedResourcesList;
};

/** @internal */
export const GetResourcesRequest$inboundSchema: z.ZodType<
  GetResourcesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  page_size: z.number().int().optional(),
  resource_type_filter: components.ResourceTypeEnum$inboundSchema.optional(),
  resource_ids: z.array(z.string()).optional(),
  resource_name: z.string().optional(),
  parent_resource_id: z.string().optional(),
  ancestor_resource_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "resource_type_filter": "resourceTypeFilter",
    "resource_ids": "resourceIds",
    "resource_name": "resourceName",
    "parent_resource_id": "parentResourceId",
    "ancestor_resource_id": "ancestorResourceId",
  });
});

/** @internal */
export type GetResourcesRequest$Outbound = {
  cursor?: string | undefined;
  page_size?: number | undefined;
  resource_type_filter?: string | undefined;
  resource_ids?: Array<string> | undefined;
  resource_name?: string | undefined;
  parent_resource_id?: string | undefined;
  ancestor_resource_id?: string | undefined;
};

/** @internal */
export const GetResourcesRequest$outboundSchema: z.ZodType<
  GetResourcesRequest$Outbound,
  z.ZodTypeDef,
  GetResourcesRequest
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  resourceTypeFilter: components.ResourceTypeEnum$outboundSchema.optional(),
  resourceIds: z.array(z.string()).optional(),
  resourceName: z.string().optional(),
  parentResourceId: z.string().optional(),
  ancestorResourceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    resourceTypeFilter: "resource_type_filter",
    resourceIds: "resource_ids",
    resourceName: "resource_name",
    parentResourceId: "parent_resource_id",
    ancestorResourceId: "ancestor_resource_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesRequest$ {
  /** @deprecated use `GetResourcesRequest$inboundSchema` instead. */
  export const inboundSchema = GetResourcesRequest$inboundSchema;
  /** @deprecated use `GetResourcesRequest$outboundSchema` instead. */
  export const outboundSchema = GetResourcesRequest$outboundSchema;
  /** @deprecated use `GetResourcesRequest$Outbound` instead. */
  export type Outbound = GetResourcesRequest$Outbound;
}

export function getResourcesRequestToJSON(
  getResourcesRequest: GetResourcesRequest,
): string {
  return JSON.stringify(
    GetResourcesRequest$outboundSchema.parse(getResourcesRequest),
  );
}

export function getResourcesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesRequest' from JSON`,
  );
}

/** @internal */
export const GetResourcesResponse$inboundSchema: z.ZodType<
  GetResourcesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.PaginatedResourcesList$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetResourcesResponse$Outbound = {
  Result: components.PaginatedResourcesList$Outbound;
};

/** @internal */
export const GetResourcesResponse$outboundSchema: z.ZodType<
  GetResourcesResponse$Outbound,
  z.ZodTypeDef,
  GetResourcesResponse
> = z.object({
  result: components.PaginatedResourcesList$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesResponse$ {
  /** @deprecated use `GetResourcesResponse$inboundSchema` instead. */
  export const inboundSchema = GetResourcesResponse$inboundSchema;
  /** @deprecated use `GetResourcesResponse$outboundSchema` instead. */
  export const outboundSchema = GetResourcesResponse$outboundSchema;
  /** @deprecated use `GetResourcesResponse$Outbound` instead. */
  export type Outbound = GetResourcesResponse$Outbound;
}

export function getResourcesResponseToJSON(
  getResourcesResponse: GetResourcesResponse,
): string {
  return JSON.stringify(
    GetResourcesResponse$outboundSchema.parse(getResourcesResponse),
  );
}

export function getResourcesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesResponse' from JSON`,
  );
}
