/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteIdpGroupMappingsRequest = {
  /**
   * The ID of the Okta app.
   */
  appResourceId: string;
  /**
   * The ID of the group.
   */
  groupId: string;
};

/** @internal */
export const DeleteIdpGroupMappingsRequest$inboundSchema: z.ZodType<
  DeleteIdpGroupMappingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_resource_id: z.string(),
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "app_resource_id": "appResourceId",
    "group_id": "groupId",
  });
});

/** @internal */
export type DeleteIdpGroupMappingsRequest$Outbound = {
  app_resource_id: string;
  group_id: string;
};

/** @internal */
export const DeleteIdpGroupMappingsRequest$outboundSchema: z.ZodType<
  DeleteIdpGroupMappingsRequest$Outbound,
  z.ZodTypeDef,
  DeleteIdpGroupMappingsRequest
> = z.object({
  appResourceId: z.string(),
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    appResourceId: "app_resource_id",
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIdpGroupMappingsRequest$ {
  /** @deprecated use `DeleteIdpGroupMappingsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteIdpGroupMappingsRequest$inboundSchema;
  /** @deprecated use `DeleteIdpGroupMappingsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteIdpGroupMappingsRequest$outboundSchema;
  /** @deprecated use `DeleteIdpGroupMappingsRequest$Outbound` instead. */
  export type Outbound = DeleteIdpGroupMappingsRequest$Outbound;
}

export function deleteIdpGroupMappingsRequestToJSON(
  deleteIdpGroupMappingsRequest: DeleteIdpGroupMappingsRequest,
): string {
  return JSON.stringify(
    DeleteIdpGroupMappingsRequest$outboundSchema.parse(
      deleteIdpGroupMappingsRequest,
    ),
  );
}

export function deleteIdpGroupMappingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteIdpGroupMappingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteIdpGroupMappingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteIdpGroupMappingsRequest' from JSON`,
  );
}
