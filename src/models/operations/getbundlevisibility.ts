/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBundleVisibilityRequest = {
  /**
   * The ID of the bundle.
   */
  bundleId: string;
};

/** @internal */
export const GetBundleVisibilityRequest$inboundSchema: z.ZodType<
  GetBundleVisibilityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bundle_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "bundle_id": "bundleId",
  });
});

/** @internal */
export type GetBundleVisibilityRequest$Outbound = {
  bundle_id: string;
};

/** @internal */
export const GetBundleVisibilityRequest$outboundSchema: z.ZodType<
  GetBundleVisibilityRequest$Outbound,
  z.ZodTypeDef,
  GetBundleVisibilityRequest
> = z.object({
  bundleId: z.string(),
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBundleVisibilityRequest$ {
  /** @deprecated use `GetBundleVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema = GetBundleVisibilityRequest$inboundSchema;
  /** @deprecated use `GetBundleVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema = GetBundleVisibilityRequest$outboundSchema;
  /** @deprecated use `GetBundleVisibilityRequest$Outbound` instead. */
  export type Outbound = GetBundleVisibilityRequest$Outbound;
}

export function getBundleVisibilityRequestToJSON(
  getBundleVisibilityRequest: GetBundleVisibilityRequest,
): string {
  return JSON.stringify(
    GetBundleVisibilityRequest$outboundSchema.parse(getBundleVisibilityRequest),
  );
}

export function getBundleVisibilityRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBundleVisibilityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBundleVisibilityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBundleVisibilityRequest' from JSON`,
  );
}
