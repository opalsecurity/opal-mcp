/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateResourceUserRequestBody = {
  /**
   * The updated duration for which the resource can be accessed (in minutes). Use 0 for indefinite.
   */
  durationMinutes: number;
  /**
   * The updated remote ID of the access level granted to this user.
   */
  accessLevelRemoteId?: string | undefined;
};

export type UpdateResourceUserRequest = {
  /**
   * The ID of the resource.
   */
  resourceId: string;
  /**
   * The ID of the user whose access is being updated.
   */
  userId: string;
  requestBody: UpdateResourceUserRequestBody;
};

/** @internal */
export const UpdateResourceUserRequestBody$inboundSchema: z.ZodType<
  UpdateResourceUserRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration_minutes: z.number().int(),
  access_level_remote_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "duration_minutes": "durationMinutes",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type UpdateResourceUserRequestBody$Outbound = {
  duration_minutes: number;
  access_level_remote_id?: string | undefined;
};

/** @internal */
export const UpdateResourceUserRequestBody$outboundSchema: z.ZodType<
  UpdateResourceUserRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateResourceUserRequestBody
> = z.object({
  durationMinutes: z.number().int(),
  accessLevelRemoteId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    durationMinutes: "duration_minutes",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceUserRequestBody$ {
  /** @deprecated use `UpdateResourceUserRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceUserRequestBody$inboundSchema;
  /** @deprecated use `UpdateResourceUserRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceUserRequestBody$outboundSchema;
  /** @deprecated use `UpdateResourceUserRequestBody$Outbound` instead. */
  export type Outbound = UpdateResourceUserRequestBody$Outbound;
}

export function updateResourceUserRequestBodyToJSON(
  updateResourceUserRequestBody: UpdateResourceUserRequestBody,
): string {
  return JSON.stringify(
    UpdateResourceUserRequestBody$outboundSchema.parse(
      updateResourceUserRequestBody,
    ),
  );
}

export function updateResourceUserRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceUserRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceUserRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceUserRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateResourceUserRequest$inboundSchema: z.ZodType<
  UpdateResourceUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  user_id: z.string(),
  RequestBody: z.lazy(() => UpdateResourceUserRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "user_id": "userId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateResourceUserRequest$Outbound = {
  resource_id: string;
  user_id: string;
  RequestBody: UpdateResourceUserRequestBody$Outbound;
};

/** @internal */
export const UpdateResourceUserRequest$outboundSchema: z.ZodType<
  UpdateResourceUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateResourceUserRequest
> = z.object({
  resourceId: z.string(),
  userId: z.string(),
  requestBody: z.lazy(() => UpdateResourceUserRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    userId: "user_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceUserRequest$ {
  /** @deprecated use `UpdateResourceUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceUserRequest$inboundSchema;
  /** @deprecated use `UpdateResourceUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceUserRequest$outboundSchema;
  /** @deprecated use `UpdateResourceUserRequest$Outbound` instead. */
  export type Outbound = UpdateResourceUserRequest$Outbound;
}

export function updateResourceUserRequestToJSON(
  updateResourceUserRequest: UpdateResourceUserRequest,
): string {
  return JSON.stringify(
    UpdateResourceUserRequest$outboundSchema.parse(updateResourceUserRequest),
  );
}

export function updateResourceUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceUserRequest' from JSON`,
  );
}
