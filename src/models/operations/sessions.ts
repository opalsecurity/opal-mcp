/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SessionsRequest = {
  /**
   * The ID of the resource.
   */
  resourceId: string;
  /**
   * The ID of the user you wish to query sessions for.
   */
  userId?: string | undefined;
};

/** @internal */
export const SessionsRequest$inboundSchema: z.ZodType<
  SessionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "user_id": "userId",
  });
});

/** @internal */
export type SessionsRequest$Outbound = {
  resource_id: string;
  user_id?: string | undefined;
};

/** @internal */
export const SessionsRequest$outboundSchema: z.ZodType<
  SessionsRequest$Outbound,
  z.ZodTypeDef,
  SessionsRequest
> = z.object({
  resourceId: z.string(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionsRequest$ {
  /** @deprecated use `SessionsRequest$inboundSchema` instead. */
  export const inboundSchema = SessionsRequest$inboundSchema;
  /** @deprecated use `SessionsRequest$outboundSchema` instead. */
  export const outboundSchema = SessionsRequest$outboundSchema;
  /** @deprecated use `SessionsRequest$Outbound` instead. */
  export type Outbound = SessionsRequest$Outbound;
}

export function sessionsRequestToJSON(
  sessionsRequest: SessionsRequest,
): string {
  return JSON.stringify(SessionsRequest$outboundSchema.parse(sessionsRequest));
}

export function sessionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SessionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionsRequest' from JSON`,
  );
}
