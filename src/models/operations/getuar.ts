/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUarRequest = {
  /**
   * The ID of the UAR.
   */
  uarId: string;
};

/** @internal */
export const GetUarRequest$inboundSchema: z.ZodType<
  GetUarRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uar_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "uar_id": "uarId",
  });
});

/** @internal */
export type GetUarRequest$Outbound = {
  uar_id: string;
};

/** @internal */
export const GetUarRequest$outboundSchema: z.ZodType<
  GetUarRequest$Outbound,
  z.ZodTypeDef,
  GetUarRequest
> = z.object({
  uarId: z.string(),
}).transform((v) => {
  return remap$(v, {
    uarId: "uar_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUarRequest$ {
  /** @deprecated use `GetUarRequest$inboundSchema` instead. */
  export const inboundSchema = GetUarRequest$inboundSchema;
  /** @deprecated use `GetUarRequest$outboundSchema` instead. */
  export const outboundSchema = GetUarRequest$outboundSchema;
  /** @deprecated use `GetUarRequest$Outbound` instead. */
  export type Outbound = GetUarRequest$Outbound;
}

export function getUarRequestToJSON(getUarRequest: GetUarRequest): string {
  return JSON.stringify(GetUarRequest$outboundSchema.parse(getUarRequest));
}

export function getUarRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUarRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUarRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUarRequest' from JSON`,
  );
}
