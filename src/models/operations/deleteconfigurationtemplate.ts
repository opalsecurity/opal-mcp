/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteConfigurationTemplateRequest = {
  /**
   * The ID of the configuration template.
   */
  configurationTemplateId: string;
};

/** @internal */
export const DeleteConfigurationTemplateRequest$inboundSchema: z.ZodType<
  DeleteConfigurationTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  configuration_template_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "configuration_template_id": "configurationTemplateId",
  });
});

/** @internal */
export type DeleteConfigurationTemplateRequest$Outbound = {
  configuration_template_id: string;
};

/** @internal */
export const DeleteConfigurationTemplateRequest$outboundSchema: z.ZodType<
  DeleteConfigurationTemplateRequest$Outbound,
  z.ZodTypeDef,
  DeleteConfigurationTemplateRequest
> = z.object({
  configurationTemplateId: z.string(),
}).transform((v) => {
  return remap$(v, {
    configurationTemplateId: "configuration_template_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConfigurationTemplateRequest$ {
  /** @deprecated use `DeleteConfigurationTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteConfigurationTemplateRequest$inboundSchema;
  /** @deprecated use `DeleteConfigurationTemplateRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteConfigurationTemplateRequest$outboundSchema;
  /** @deprecated use `DeleteConfigurationTemplateRequest$Outbound` instead. */
  export type Outbound = DeleteConfigurationTemplateRequest$Outbound;
}

export function deleteConfigurationTemplateRequestToJSON(
  deleteConfigurationTemplateRequest: DeleteConfigurationTemplateRequest,
): string {
  return JSON.stringify(
    DeleteConfigurationTemplateRequest$outboundSchema.parse(
      deleteConfigurationTemplateRequest,
    ),
  );
}

export function deleteConfigurationTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConfigurationTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteConfigurationTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConfigurationTemplateRequest' from JSON`,
  );
}
