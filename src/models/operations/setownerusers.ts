/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetOwnerUsersRequest = {
  /**
   * The ID of the owner.
   */
  ownerId: string;
  userIDList: components.UserIDList;
};

/** @internal */
export const SetOwnerUsersRequest$inboundSchema: z.ZodType<
  SetOwnerUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  owner_id: z.string(),
  UserIDList: components.UserIDList$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "UserIDList": "userIDList",
  });
});

/** @internal */
export type SetOwnerUsersRequest$Outbound = {
  owner_id: string;
  UserIDList: components.UserIDList$Outbound;
};

/** @internal */
export const SetOwnerUsersRequest$outboundSchema: z.ZodType<
  SetOwnerUsersRequest$Outbound,
  z.ZodTypeDef,
  SetOwnerUsersRequest
> = z.object({
  ownerId: z.string(),
  userIDList: components.UserIDList$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    userIDList: "UserIDList",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetOwnerUsersRequest$ {
  /** @deprecated use `SetOwnerUsersRequest$inboundSchema` instead. */
  export const inboundSchema = SetOwnerUsersRequest$inboundSchema;
  /** @deprecated use `SetOwnerUsersRequest$outboundSchema` instead. */
  export const outboundSchema = SetOwnerUsersRequest$outboundSchema;
  /** @deprecated use `SetOwnerUsersRequest$Outbound` instead. */
  export type Outbound = SetOwnerUsersRequest$Outbound;
}

export function setOwnerUsersRequestToJSON(
  setOwnerUsersRequest: SetOwnerUsersRequest,
): string {
  return JSON.stringify(
    SetOwnerUsersRequest$outboundSchema.parse(setOwnerUsersRequest),
  );
}

export function setOwnerUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetOwnerUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetOwnerUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetOwnerUsersRequest' from JSON`,
  );
}
