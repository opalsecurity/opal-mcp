/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The resulting request.
 */
export type CreateRequestResponse = {
  id?: string | undefined;
};

/** @internal */
export const CreateRequestResponse$inboundSchema: z.ZodType<
  CreateRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type CreateRequestResponse$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const CreateRequestResponse$outboundSchema: z.ZodType<
  CreateRequestResponse$Outbound,
  z.ZodTypeDef,
  CreateRequestResponse
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequestResponse$ {
  /** @deprecated use `CreateRequestResponse$inboundSchema` instead. */
  export const inboundSchema = CreateRequestResponse$inboundSchema;
  /** @deprecated use `CreateRequestResponse$outboundSchema` instead. */
  export const outboundSchema = CreateRequestResponse$outboundSchema;
  /** @deprecated use `CreateRequestResponse$Outbound` instead. */
  export type Outbound = CreateRequestResponse$Outbound;
}

export function createRequestResponseToJSON(
  createRequestResponse: CreateRequestResponse,
): string {
  return JSON.stringify(
    CreateRequestResponse$outboundSchema.parse(createRequestResponse),
  );
}

export function createRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequestResponse' from JSON`,
  );
}
