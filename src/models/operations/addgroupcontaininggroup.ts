/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddGroupContainingGroupRequest = {
  /**
   * The ID of the group.
   */
  groupId: string;
  groupContainingGroup: components.GroupContainingGroup;
};

/** @internal */
export const AddGroupContainingGroupRequest$inboundSchema: z.ZodType<
  AddGroupContainingGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  GroupContainingGroup: components.GroupContainingGroup$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "GroupContainingGroup": "groupContainingGroup",
  });
});

/** @internal */
export type AddGroupContainingGroupRequest$Outbound = {
  group_id: string;
  GroupContainingGroup: components.GroupContainingGroup$Outbound;
};

/** @internal */
export const AddGroupContainingGroupRequest$outboundSchema: z.ZodType<
  AddGroupContainingGroupRequest$Outbound,
  z.ZodTypeDef,
  AddGroupContainingGroupRequest
> = z.object({
  groupId: z.string(),
  groupContainingGroup: components.GroupContainingGroup$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    groupContainingGroup: "GroupContainingGroup",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddGroupContainingGroupRequest$ {
  /** @deprecated use `AddGroupContainingGroupRequest$inboundSchema` instead. */
  export const inboundSchema = AddGroupContainingGroupRequest$inboundSchema;
  /** @deprecated use `AddGroupContainingGroupRequest$outboundSchema` instead. */
  export const outboundSchema = AddGroupContainingGroupRequest$outboundSchema;
  /** @deprecated use `AddGroupContainingGroupRequest$Outbound` instead. */
  export type Outbound = AddGroupContainingGroupRequest$Outbound;
}

export function addGroupContainingGroupRequestToJSON(
  addGroupContainingGroupRequest: AddGroupContainingGroupRequest,
): string {
  return JSON.stringify(
    AddGroupContainingGroupRequest$outboundSchema.parse(
      addGroupContainingGroupRequest,
    ),
  );
}

export function addGroupContainingGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddGroupContainingGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddGroupContainingGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddGroupContainingGroupRequest' from JSON`,
  );
}
