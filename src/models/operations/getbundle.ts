/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBundleRequest = {
  /**
   * The ID of the bundle.
   */
  bundleId: string;
};

/** @internal */
export const GetBundleRequest$inboundSchema: z.ZodType<
  GetBundleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bundle_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "bundle_id": "bundleId",
  });
});

/** @internal */
export type GetBundleRequest$Outbound = {
  bundle_id: string;
};

/** @internal */
export const GetBundleRequest$outboundSchema: z.ZodType<
  GetBundleRequest$Outbound,
  z.ZodTypeDef,
  GetBundleRequest
> = z.object({
  bundleId: z.string(),
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBundleRequest$ {
  /** @deprecated use `GetBundleRequest$inboundSchema` instead. */
  export const inboundSchema = GetBundleRequest$inboundSchema;
  /** @deprecated use `GetBundleRequest$outboundSchema` instead. */
  export const outboundSchema = GetBundleRequest$outboundSchema;
  /** @deprecated use `GetBundleRequest$Outbound` instead. */
  export type Outbound = GetBundleRequest$Outbound;
}

export function getBundleRequestToJSON(
  getBundleRequest: GetBundleRequest,
): string {
  return JSON.stringify(
    GetBundleRequest$outboundSchema.parse(getBundleRequest),
  );
}

export function getBundleRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBundleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBundleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBundleRequest' from JSON`,
  );
}
