/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTagByIDRequest = {
  /**
   * The tag ID
   */
  tagId: string;
};

/** @internal */
export const GetTagByIDRequest$inboundSchema: z.ZodType<
  GetTagByIDRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tag_id": "tagId",
  });
});

/** @internal */
export type GetTagByIDRequest$Outbound = {
  tag_id: string;
};

/** @internal */
export const GetTagByIDRequest$outboundSchema: z.ZodType<
  GetTagByIDRequest$Outbound,
  z.ZodTypeDef,
  GetTagByIDRequest
> = z.object({
  tagId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tagId: "tag_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagByIDRequest$ {
  /** @deprecated use `GetTagByIDRequest$inboundSchema` instead. */
  export const inboundSchema = GetTagByIDRequest$inboundSchema;
  /** @deprecated use `GetTagByIDRequest$outboundSchema` instead. */
  export const outboundSchema = GetTagByIDRequest$outboundSchema;
  /** @deprecated use `GetTagByIDRequest$Outbound` instead. */
  export type Outbound = GetTagByIDRequest$Outbound;
}

export function getTagByIDRequestToJSON(
  getTagByIDRequest: GetTagByIDRequest,
): string {
  return JSON.stringify(
    GetTagByIDRequest$outboundSchema.parse(getTagByIDRequest),
  );
}

export function getTagByIDRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTagByIDRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagByIDRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagByIDRequest' from JSON`,
  );
}
