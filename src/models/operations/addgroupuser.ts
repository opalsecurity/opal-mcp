/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddGroupUserRequestBody = {
  /**
   * The duration for which the group can be accessed (in minutes). Use 0 to set to indefinite.
   */
  durationMinutes: number;
  /**
   * The remote ID of the access level to grant to this user. If omitted, the default access level remote ID value (empty string) is used.
   */
  accessLevelRemoteId?: string | undefined;
};

export type AddGroupUserRequest = {
  /**
   * The ID of the group.
   */
  groupId: string;
  /**
   * The ID of the user to add.
   */
  userId: string;
  /**
   * The duration for which the group can be accessed (in minutes). Use 0 to set to indefinite.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  durationMinutes?: number | undefined;
  /**
   * The remote ID of the access level to grant to this user. If omitted, the default access level remote ID value (empty string) is used.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  accessLevelRemoteId?: string | undefined;
  requestBody?: AddGroupUserRequestBody | undefined;
};

/** @internal */
export const AddGroupUserRequestBody$inboundSchema: z.ZodType<
  AddGroupUserRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration_minutes: z.number().int(),
  access_level_remote_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "duration_minutes": "durationMinutes",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type AddGroupUserRequestBody$Outbound = {
  duration_minutes: number;
  access_level_remote_id?: string | undefined;
};

/** @internal */
export const AddGroupUserRequestBody$outboundSchema: z.ZodType<
  AddGroupUserRequestBody$Outbound,
  z.ZodTypeDef,
  AddGroupUserRequestBody
> = z.object({
  durationMinutes: z.number().int(),
  accessLevelRemoteId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    durationMinutes: "duration_minutes",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddGroupUserRequestBody$ {
  /** @deprecated use `AddGroupUserRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddGroupUserRequestBody$inboundSchema;
  /** @deprecated use `AddGroupUserRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddGroupUserRequestBody$outboundSchema;
  /** @deprecated use `AddGroupUserRequestBody$Outbound` instead. */
  export type Outbound = AddGroupUserRequestBody$Outbound;
}

export function addGroupUserRequestBodyToJSON(
  addGroupUserRequestBody: AddGroupUserRequestBody,
): string {
  return JSON.stringify(
    AddGroupUserRequestBody$outboundSchema.parse(addGroupUserRequestBody),
  );
}

export function addGroupUserRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddGroupUserRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddGroupUserRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddGroupUserRequestBody' from JSON`,
  );
}

/** @internal */
export const AddGroupUserRequest$inboundSchema: z.ZodType<
  AddGroupUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  user_id: z.string(),
  duration_minutes: z.number().int().optional(),
  access_level_remote_id: z.string().optional(),
  RequestBody: z.lazy(() => AddGroupUserRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "user_id": "userId",
    "duration_minutes": "durationMinutes",
    "access_level_remote_id": "accessLevelRemoteId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddGroupUserRequest$Outbound = {
  group_id: string;
  user_id: string;
  duration_minutes?: number | undefined;
  access_level_remote_id?: string | undefined;
  RequestBody?: AddGroupUserRequestBody$Outbound | undefined;
};

/** @internal */
export const AddGroupUserRequest$outboundSchema: z.ZodType<
  AddGroupUserRequest$Outbound,
  z.ZodTypeDef,
  AddGroupUserRequest
> = z.object({
  groupId: z.string(),
  userId: z.string(),
  durationMinutes: z.number().int().optional(),
  accessLevelRemoteId: z.string().optional(),
  requestBody: z.lazy(() => AddGroupUserRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    userId: "user_id",
    durationMinutes: "duration_minutes",
    accessLevelRemoteId: "access_level_remote_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddGroupUserRequest$ {
  /** @deprecated use `AddGroupUserRequest$inboundSchema` instead. */
  export const inboundSchema = AddGroupUserRequest$inboundSchema;
  /** @deprecated use `AddGroupUserRequest$outboundSchema` instead. */
  export const outboundSchema = AddGroupUserRequest$outboundSchema;
  /** @deprecated use `AddGroupUserRequest$Outbound` instead. */
  export type Outbound = AddGroupUserRequest$Outbound;
}

export function addGroupUserRequestToJSON(
  addGroupUserRequest: AddGroupUserRequest,
): string {
  return JSON.stringify(
    AddGroupUserRequest$outboundSchema.parse(addGroupUserRequest),
  );
}

export function addGroupUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddGroupUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddGroupUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddGroupUserRequest' from JSON`,
  );
}
