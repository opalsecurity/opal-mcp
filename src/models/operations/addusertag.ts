/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddUserTagRequest = {
  /**
   * The ID of the tag to apply.
   */
  tagId: string;
  /**
   * The ID of the user to apply the tag to.
   */
  userId: string;
};

/** @internal */
export const AddUserTagRequest$inboundSchema: z.ZodType<
  AddUserTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag_id: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tag_id": "tagId",
    "user_id": "userId",
  });
});

/** @internal */
export type AddUserTagRequest$Outbound = {
  tag_id: string;
  user_id: string;
};

/** @internal */
export const AddUserTagRequest$outboundSchema: z.ZodType<
  AddUserTagRequest$Outbound,
  z.ZodTypeDef,
  AddUserTagRequest
> = z.object({
  tagId: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tagId: "tag_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddUserTagRequest$ {
  /** @deprecated use `AddUserTagRequest$inboundSchema` instead. */
  export const inboundSchema = AddUserTagRequest$inboundSchema;
  /** @deprecated use `AddUserTagRequest$outboundSchema` instead. */
  export const outboundSchema = AddUserTagRequest$outboundSchema;
  /** @deprecated use `AddUserTagRequest$Outbound` instead. */
  export type Outbound = AddUserTagRequest$Outbound;
}

export function addUserTagRequestToJSON(
  addUserTagRequest: AddUserTagRequest,
): string {
  return JSON.stringify(
    AddUserTagRequest$outboundSchema.parse(addUserTagRequest),
  );
}

export function addUserTagRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddUserTagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddUserTagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddUserTagRequest' from JSON`,
  );
}
