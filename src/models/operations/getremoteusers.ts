/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRemoteUsersRequest = {
  /**
   * Filter remote users by their third party provider.
   */
  thirdPartyProvider?: Array<components.ThirdPartyProviderEnum> | undefined;
  /**
   * Filter remote users by their user ID.
   */
  userId?: Array<string> | undefined;
  /**
   * Filter remote users by their remote ID.
   */
  remoteId?: Array<string> | undefined;
  /**
   * The pagination cursor value.
   */
  cursor?: string | undefined;
  /**
   * Number of results to return per page. Default is 200.
   */
  pageSize?: number | undefined;
};

/** @internal */
export const GetRemoteUsersRequest$inboundSchema: z.ZodType<
  GetRemoteUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  third_party_provider: z.array(components.ThirdPartyProviderEnum$inboundSchema)
    .optional(),
  user_id: z.array(z.string()).optional(),
  remote_id: z.array(z.string()).optional(),
  cursor: z.string().optional(),
  page_size: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "third_party_provider": "thirdPartyProvider",
    "user_id": "userId",
    "remote_id": "remoteId",
    "page_size": "pageSize",
  });
});

/** @internal */
export type GetRemoteUsersRequest$Outbound = {
  third_party_provider?: Array<string> | undefined;
  user_id?: Array<string> | undefined;
  remote_id?: Array<string> | undefined;
  cursor?: string | undefined;
  page_size?: number | undefined;
};

/** @internal */
export const GetRemoteUsersRequest$outboundSchema: z.ZodType<
  GetRemoteUsersRequest$Outbound,
  z.ZodTypeDef,
  GetRemoteUsersRequest
> = z.object({
  thirdPartyProvider: z.array(components.ThirdPartyProviderEnum$outboundSchema)
    .optional(),
  userId: z.array(z.string()).optional(),
  remoteId: z.array(z.string()).optional(),
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    thirdPartyProvider: "third_party_provider",
    userId: "user_id",
    remoteId: "remote_id",
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRemoteUsersRequest$ {
  /** @deprecated use `GetRemoteUsersRequest$inboundSchema` instead. */
  export const inboundSchema = GetRemoteUsersRequest$inboundSchema;
  /** @deprecated use `GetRemoteUsersRequest$outboundSchema` instead. */
  export const outboundSchema = GetRemoteUsersRequest$outboundSchema;
  /** @deprecated use `GetRemoteUsersRequest$Outbound` instead. */
  export type Outbound = GetRemoteUsersRequest$Outbound;
}

export function getRemoteUsersRequestToJSON(
  getRemoteUsersRequest: GetRemoteUsersRequest,
): string {
  return JSON.stringify(
    GetRemoteUsersRequest$outboundSchema.parse(getRemoteUsersRequest),
  );
}

export function getRemoteUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRemoteUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRemoteUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRemoteUsersRequest' from JSON`,
  );
}
