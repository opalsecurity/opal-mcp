/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetResourceScopedRolePermissionsRequest = {
  /**
   * The ID of the resource whose scoped role permissions belong to. Must be of OPAL_SCOPED_ROLE resource type.
   */
  resourceId: string;
  scopedRolePermissionList: components.ScopedRolePermissionList;
};

/** @internal */
export const SetResourceScopedRolePermissionsRequest$inboundSchema: z.ZodType<
  SetResourceScopedRolePermissionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  ScopedRolePermissionList: components.ScopedRolePermissionList$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "ScopedRolePermissionList": "scopedRolePermissionList",
  });
});

/** @internal */
export type SetResourceScopedRolePermissionsRequest$Outbound = {
  resource_id: string;
  ScopedRolePermissionList: components.ScopedRolePermissionList$Outbound;
};

/** @internal */
export const SetResourceScopedRolePermissionsRequest$outboundSchema: z.ZodType<
  SetResourceScopedRolePermissionsRequest$Outbound,
  z.ZodTypeDef,
  SetResourceScopedRolePermissionsRequest
> = z.object({
  resourceId: z.string(),
  scopedRolePermissionList: components.ScopedRolePermissionList$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    scopedRolePermissionList: "ScopedRolePermissionList",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetResourceScopedRolePermissionsRequest$ {
  /** @deprecated use `SetResourceScopedRolePermissionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    SetResourceScopedRolePermissionsRequest$inboundSchema;
  /** @deprecated use `SetResourceScopedRolePermissionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    SetResourceScopedRolePermissionsRequest$outboundSchema;
  /** @deprecated use `SetResourceScopedRolePermissionsRequest$Outbound` instead. */
  export type Outbound = SetResourceScopedRolePermissionsRequest$Outbound;
}

export function setResourceScopedRolePermissionsRequestToJSON(
  setResourceScopedRolePermissionsRequest:
    SetResourceScopedRolePermissionsRequest,
): string {
  return JSON.stringify(
    SetResourceScopedRolePermissionsRequest$outboundSchema.parse(
      setResourceScopedRolePermissionsRequest,
    ),
  );
}

export function setResourceScopedRolePermissionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SetResourceScopedRolePermissionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SetResourceScopedRolePermissionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SetResourceScopedRolePermissionsRequest' from JSON`,
  );
}
