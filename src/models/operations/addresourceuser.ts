/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddResourceUserRequestBody = {
  /**
   * The duration for which the resource can be accessed (in minutes). Use 0 to set to indefinite.
   */
  durationMinutes: number;
  /**
   * The remote ID of the access level to grant to this user. If omitted, the default access level remote ID value (empty string) is used.
   */
  accessLevelRemoteId?: string | undefined;
};

export type AddResourceUserRequest = {
  /**
   * The ID of the resource.
   */
  resourceId: string;
  /**
   * The ID of the user to add.
   */
  userId: string;
  /**
   * The duration for which the resource can be accessed (in minutes). Use 0 to set to indefinite.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  durationMinutes?: number | undefined;
  /**
   * The remote ID of the access level to grant to this user. If omitted, the default access level remote ID value (empty string) is used.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  accessLevelRemoteId?: string | undefined;
  requestBody?: AddResourceUserRequestBody | undefined;
};

/** @internal */
export const AddResourceUserRequestBody$inboundSchema: z.ZodType<
  AddResourceUserRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration_minutes: z.number().int(),
  access_level_remote_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "duration_minutes": "durationMinutes",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type AddResourceUserRequestBody$Outbound = {
  duration_minutes: number;
  access_level_remote_id?: string | undefined;
};

/** @internal */
export const AddResourceUserRequestBody$outboundSchema: z.ZodType<
  AddResourceUserRequestBody$Outbound,
  z.ZodTypeDef,
  AddResourceUserRequestBody
> = z.object({
  durationMinutes: z.number().int(),
  accessLevelRemoteId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    durationMinutes: "duration_minutes",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddResourceUserRequestBody$ {
  /** @deprecated use `AddResourceUserRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddResourceUserRequestBody$inboundSchema;
  /** @deprecated use `AddResourceUserRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddResourceUserRequestBody$outboundSchema;
  /** @deprecated use `AddResourceUserRequestBody$Outbound` instead. */
  export type Outbound = AddResourceUserRequestBody$Outbound;
}

export function addResourceUserRequestBodyToJSON(
  addResourceUserRequestBody: AddResourceUserRequestBody,
): string {
  return JSON.stringify(
    AddResourceUserRequestBody$outboundSchema.parse(addResourceUserRequestBody),
  );
}

export function addResourceUserRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddResourceUserRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddResourceUserRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddResourceUserRequestBody' from JSON`,
  );
}

/** @internal */
export const AddResourceUserRequest$inboundSchema: z.ZodType<
  AddResourceUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  user_id: z.string(),
  duration_minutes: z.number().int().optional(),
  access_level_remote_id: z.string().optional(),
  RequestBody: z.lazy(() => AddResourceUserRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "user_id": "userId",
    "duration_minutes": "durationMinutes",
    "access_level_remote_id": "accessLevelRemoteId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddResourceUserRequest$Outbound = {
  resource_id: string;
  user_id: string;
  duration_minutes?: number | undefined;
  access_level_remote_id?: string | undefined;
  RequestBody?: AddResourceUserRequestBody$Outbound | undefined;
};

/** @internal */
export const AddResourceUserRequest$outboundSchema: z.ZodType<
  AddResourceUserRequest$Outbound,
  z.ZodTypeDef,
  AddResourceUserRequest
> = z.object({
  resourceId: z.string(),
  userId: z.string(),
  durationMinutes: z.number().int().optional(),
  accessLevelRemoteId: z.string().optional(),
  requestBody: z.lazy(() => AddResourceUserRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    userId: "user_id",
    durationMinutes: "duration_minutes",
    accessLevelRemoteId: "access_level_remote_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddResourceUserRequest$ {
  /** @deprecated use `AddResourceUserRequest$inboundSchema` instead. */
  export const inboundSchema = AddResourceUserRequest$inboundSchema;
  /** @deprecated use `AddResourceUserRequest$outboundSchema` instead. */
  export const outboundSchema = AddResourceUserRequest$outboundSchema;
  /** @deprecated use `AddResourceUserRequest$Outbound` instead. */
  export type Outbound = AddResourceUserRequest$Outbound;
}

export function addResourceUserRequestToJSON(
  addResourceUserRequest: AddResourceUserRequest,
): string {
  return JSON.stringify(
    AddResourceUserRequest$outboundSchema.parse(addResourceUserRequest),
  );
}

export function addResourceUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddResourceUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddResourceUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddResourceUserRequest' from JSON`,
  );
}
