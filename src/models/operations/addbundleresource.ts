/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddBundleResourceRequestBody = {
  /**
   * The ID of the resource to add.
   */
  resourceId: string;
  /**
   * The remote ID of the access level to grant to this user. Required if the resource being added requires an access level. If omitted, the default access level remote ID value (empty string) is used.
   */
  accessLevelRemoteId?: string | undefined;
  /**
   * The name of the access level to grant to this user. If omitted, the default access level name value (empty string) is used.
   */
  accessLevelName?: string | undefined;
};

export type AddBundleResourceRequest = {
  /**
   * The ID of the bundle.
   */
  bundleId: string;
  requestBody?: AddBundleResourceRequestBody | undefined;
};

/** @internal */
export const AddBundleResourceRequestBody$inboundSchema: z.ZodType<
  AddBundleResourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  access_level_remote_id: z.string().optional(),
  access_level_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "access_level_remote_id": "accessLevelRemoteId",
    "access_level_name": "accessLevelName",
  });
});

/** @internal */
export type AddBundleResourceRequestBody$Outbound = {
  resource_id: string;
  access_level_remote_id?: string | undefined;
  access_level_name?: string | undefined;
};

/** @internal */
export const AddBundleResourceRequestBody$outboundSchema: z.ZodType<
  AddBundleResourceRequestBody$Outbound,
  z.ZodTypeDef,
  AddBundleResourceRequestBody
> = z.object({
  resourceId: z.string(),
  accessLevelRemoteId: z.string().optional(),
  accessLevelName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    accessLevelRemoteId: "access_level_remote_id",
    accessLevelName: "access_level_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddBundleResourceRequestBody$ {
  /** @deprecated use `AddBundleResourceRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddBundleResourceRequestBody$inboundSchema;
  /** @deprecated use `AddBundleResourceRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddBundleResourceRequestBody$outboundSchema;
  /** @deprecated use `AddBundleResourceRequestBody$Outbound` instead. */
  export type Outbound = AddBundleResourceRequestBody$Outbound;
}

export function addBundleResourceRequestBodyToJSON(
  addBundleResourceRequestBody: AddBundleResourceRequestBody,
): string {
  return JSON.stringify(
    AddBundleResourceRequestBody$outboundSchema.parse(
      addBundleResourceRequestBody,
    ),
  );
}

export function addBundleResourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddBundleResourceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddBundleResourceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddBundleResourceRequestBody' from JSON`,
  );
}

/** @internal */
export const AddBundleResourceRequest$inboundSchema: z.ZodType<
  AddBundleResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bundle_id: z.string(),
  RequestBody: z.lazy(() => AddBundleResourceRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "bundle_id": "bundleId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddBundleResourceRequest$Outbound = {
  bundle_id: string;
  RequestBody?: AddBundleResourceRequestBody$Outbound | undefined;
};

/** @internal */
export const AddBundleResourceRequest$outboundSchema: z.ZodType<
  AddBundleResourceRequest$Outbound,
  z.ZodTypeDef,
  AddBundleResourceRequest
> = z.object({
  bundleId: z.string(),
  requestBody: z.lazy(() => AddBundleResourceRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddBundleResourceRequest$ {
  /** @deprecated use `AddBundleResourceRequest$inboundSchema` instead. */
  export const inboundSchema = AddBundleResourceRequest$inboundSchema;
  /** @deprecated use `AddBundleResourceRequest$outboundSchema` instead. */
  export const outboundSchema = AddBundleResourceRequest$outboundSchema;
  /** @deprecated use `AddBundleResourceRequest$Outbound` instead. */
  export type Outbound = AddBundleResourceRequest$Outbound;
}

export function addBundleResourceRequestToJSON(
  addBundleResourceRequest: AddBundleResourceRequest,
): string {
  return JSON.stringify(
    AddBundleResourceRequest$outboundSchema.parse(addBundleResourceRequest),
  );
}

export function addBundleResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddBundleResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddBundleResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddBundleResourceRequest' from JSON`,
  );
}
