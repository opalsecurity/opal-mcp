/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBundleGroupsRequest = {
  /**
   * The ID of the bundle.
   */
  bundleId: string;
  /**
   * The maximum number of groups to return from the beginning of the list. Default is 200, max is 1000.
   */
  pageSize?: number | undefined;
  /**
   * A cursor indicating where to start fetching items after a specific point.
   */
  cursor?: string | undefined;
};

/** @internal */
export const GetBundleGroupsRequest$inboundSchema: z.ZodType<
  GetBundleGroupsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bundle_id: z.string(),
  page_size: z.number().int().optional(),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "bundle_id": "bundleId",
    "page_size": "pageSize",
  });
});

/** @internal */
export type GetBundleGroupsRequest$Outbound = {
  bundle_id: string;
  page_size?: number | undefined;
  cursor?: string | undefined;
};

/** @internal */
export const GetBundleGroupsRequest$outboundSchema: z.ZodType<
  GetBundleGroupsRequest$Outbound,
  z.ZodTypeDef,
  GetBundleGroupsRequest
> = z.object({
  bundleId: z.string(),
  pageSize: z.number().int().optional(),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBundleGroupsRequest$ {
  /** @deprecated use `GetBundleGroupsRequest$inboundSchema` instead. */
  export const inboundSchema = GetBundleGroupsRequest$inboundSchema;
  /** @deprecated use `GetBundleGroupsRequest$outboundSchema` instead. */
  export const outboundSchema = GetBundleGroupsRequest$outboundSchema;
  /** @deprecated use `GetBundleGroupsRequest$Outbound` instead. */
  export type Outbound = GetBundleGroupsRequest$Outbound;
}

export function getBundleGroupsRequestToJSON(
  getBundleGroupsRequest: GetBundleGroupsRequest,
): string {
  return JSON.stringify(
    GetBundleGroupsRequest$outboundSchema.parse(getBundleGroupsRequest),
  );
}

export function getBundleGroupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBundleGroupsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBundleGroupsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBundleGroupsRequest' from JSON`,
  );
}
