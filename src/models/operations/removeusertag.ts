/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveUserTagRequest = {
  /**
   * The ID of the tag to remove.
   */
  tagId: string;
  /**
   * The ID of the user to remove the tag from.
   */
  userId: string;
};

/** @internal */
export const RemoveUserTagRequest$inboundSchema: z.ZodType<
  RemoveUserTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag_id: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tag_id": "tagId",
    "user_id": "userId",
  });
});

/** @internal */
export type RemoveUserTagRequest$Outbound = {
  tag_id: string;
  user_id: string;
};

/** @internal */
export const RemoveUserTagRequest$outboundSchema: z.ZodType<
  RemoveUserTagRequest$Outbound,
  z.ZodTypeDef,
  RemoveUserTagRequest
> = z.object({
  tagId: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tagId: "tag_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveUserTagRequest$ {
  /** @deprecated use `RemoveUserTagRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveUserTagRequest$inboundSchema;
  /** @deprecated use `RemoveUserTagRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveUserTagRequest$outboundSchema;
  /** @deprecated use `RemoveUserTagRequest$Outbound` instead. */
  export type Outbound = RemoveUserTagRequest$Outbound;
}

export function removeUserTagRequestToJSON(
  removeUserTagRequest: RemoveUserTagRequest,
): string {
  return JSON.stringify(
    RemoveUserTagRequest$outboundSchema.parse(removeUserTagRequest),
  );
}

export function removeUserTagRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveUserTagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveUserTagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveUserTagRequest' from JSON`,
  );
}
