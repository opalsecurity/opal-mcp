/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetGroupVisibilityRequest = {
  /**
   * The ID of the group.
   */
  groupId: string;
  visibilityInfo: components.VisibilityInfo;
};

/** @internal */
export const SetGroupVisibilityRequest$inboundSchema: z.ZodType<
  SetGroupVisibilityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  VisibilityInfo: components.VisibilityInfo$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "VisibilityInfo": "visibilityInfo",
  });
});

/** @internal */
export type SetGroupVisibilityRequest$Outbound = {
  group_id: string;
  VisibilityInfo: components.VisibilityInfo$Outbound;
};

/** @internal */
export const SetGroupVisibilityRequest$outboundSchema: z.ZodType<
  SetGroupVisibilityRequest$Outbound,
  z.ZodTypeDef,
  SetGroupVisibilityRequest
> = z.object({
  groupId: z.string(),
  visibilityInfo: components.VisibilityInfo$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    visibilityInfo: "VisibilityInfo",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetGroupVisibilityRequest$ {
  /** @deprecated use `SetGroupVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema = SetGroupVisibilityRequest$inboundSchema;
  /** @deprecated use `SetGroupVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema = SetGroupVisibilityRequest$outboundSchema;
  /** @deprecated use `SetGroupVisibilityRequest$Outbound` instead. */
  export type Outbound = SetGroupVisibilityRequest$Outbound;
}

export function setGroupVisibilityRequestToJSON(
  setGroupVisibilityRequest: SetGroupVisibilityRequest,
): string {
  return JSON.stringify(
    SetGroupVisibilityRequest$outboundSchema.parse(setGroupVisibilityRequest),
  );
}

export function setGroupVisibilityRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetGroupVisibilityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetGroupVisibilityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetGroupVisibilityRequest' from JSON`,
  );
}
