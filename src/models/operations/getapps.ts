/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAppsRequest = {
  /**
   * A list of app types to filter by.
   */
  appTypeFilter?: Array<components.AppTypeEnum> | undefined;
  /**
   * An owner ID to filter by.
   */
  ownerFilter?: string | undefined;
};

/** @internal */
export const GetAppsRequest$inboundSchema: z.ZodType<
  GetAppsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_type_filter: z.array(components.AppTypeEnum$inboundSchema).optional(),
  owner_filter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "app_type_filter": "appTypeFilter",
    "owner_filter": "ownerFilter",
  });
});

/** @internal */
export type GetAppsRequest$Outbound = {
  app_type_filter?: Array<string> | undefined;
  owner_filter?: string | undefined;
};

/** @internal */
export const GetAppsRequest$outboundSchema: z.ZodType<
  GetAppsRequest$Outbound,
  z.ZodTypeDef,
  GetAppsRequest
> = z.object({
  appTypeFilter: z.array(components.AppTypeEnum$outboundSchema).optional(),
  ownerFilter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    appTypeFilter: "app_type_filter",
    ownerFilter: "owner_filter",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAppsRequest$ {
  /** @deprecated use `GetAppsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAppsRequest$inboundSchema;
  /** @deprecated use `GetAppsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAppsRequest$outboundSchema;
  /** @deprecated use `GetAppsRequest$Outbound` instead. */
  export type Outbound = GetAppsRequest$Outbound;
}

export function getAppsRequestToJSON(getAppsRequest: GetAppsRequest): string {
  return JSON.stringify(GetAppsRequest$outboundSchema.parse(getAppsRequest));
}

export function getAppsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAppsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAppsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAppsRequest' from JSON`,
  );
}
