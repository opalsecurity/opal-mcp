/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The decision level for the approval
 */
export const Level = {
  Regular: "REGULAR",
  Admin: "ADMIN",
} as const;
/**
 * The decision level for the approval
 */
export type Level = ClosedEnum<typeof Level>;

/**
 * Approval parameters
 */
export type ApproveRequestRequestBody = {
  /**
   * The decision level for the approval
   */
  level: Level;
  /**
   * Optional comment for the approval
   */
  comment?: string | undefined;
};

export type ApproveRequestRequest = {
  /**
   * The ID of the request to approve
   */
  id: string;
  /**
   * Approval parameters
   */
  requestBody: ApproveRequestRequestBody;
};

/**
 * Request successfully approved
 */
export type ApproveRequestResponse = {
  /**
   * # Request Object
   *
   * @remarks
   * ### Description
   * The `Request` object is used to represent a request.
   *
   * ### Usage Example
   * Returned from the `GET Requests` endpoint.
   */
  request?: components.RequestT | undefined;
  /**
   * ID of the task created for propagating access
   */
  taskId?: string | undefined;
};

/** @internal */
export const Level$inboundSchema: z.ZodNativeEnum<typeof Level> = z.nativeEnum(
  Level,
);

/** @internal */
export const Level$outboundSchema: z.ZodNativeEnum<typeof Level> =
  Level$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Level$ {
  /** @deprecated use `Level$inboundSchema` instead. */
  export const inboundSchema = Level$inboundSchema;
  /** @deprecated use `Level$outboundSchema` instead. */
  export const outboundSchema = Level$outboundSchema;
}

/** @internal */
export const ApproveRequestRequestBody$inboundSchema: z.ZodType<
  ApproveRequestRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: Level$inboundSchema,
  comment: z.string().optional(),
});

/** @internal */
export type ApproveRequestRequestBody$Outbound = {
  level: string;
  comment?: string | undefined;
};

/** @internal */
export const ApproveRequestRequestBody$outboundSchema: z.ZodType<
  ApproveRequestRequestBody$Outbound,
  z.ZodTypeDef,
  ApproveRequestRequestBody
> = z.object({
  level: Level$outboundSchema,
  comment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRequestRequestBody$ {
  /** @deprecated use `ApproveRequestRequestBody$inboundSchema` instead. */
  export const inboundSchema = ApproveRequestRequestBody$inboundSchema;
  /** @deprecated use `ApproveRequestRequestBody$outboundSchema` instead. */
  export const outboundSchema = ApproveRequestRequestBody$outboundSchema;
  /** @deprecated use `ApproveRequestRequestBody$Outbound` instead. */
  export type Outbound = ApproveRequestRequestBody$Outbound;
}

export function approveRequestRequestBodyToJSON(
  approveRequestRequestBody: ApproveRequestRequestBody,
): string {
  return JSON.stringify(
    ApproveRequestRequestBody$outboundSchema.parse(approveRequestRequestBody),
  );
}

export function approveRequestRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRequestRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApproveRequestRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRequestRequestBody' from JSON`,
  );
}

/** @internal */
export const ApproveRequestRequest$inboundSchema: z.ZodType<
  ApproveRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => ApproveRequestRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ApproveRequestRequest$Outbound = {
  id: string;
  RequestBody: ApproveRequestRequestBody$Outbound;
};

/** @internal */
export const ApproveRequestRequest$outboundSchema: z.ZodType<
  ApproveRequestRequest$Outbound,
  z.ZodTypeDef,
  ApproveRequestRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => ApproveRequestRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRequestRequest$ {
  /** @deprecated use `ApproveRequestRequest$inboundSchema` instead. */
  export const inboundSchema = ApproveRequestRequest$inboundSchema;
  /** @deprecated use `ApproveRequestRequest$outboundSchema` instead. */
  export const outboundSchema = ApproveRequestRequest$outboundSchema;
  /** @deprecated use `ApproveRequestRequest$Outbound` instead. */
  export type Outbound = ApproveRequestRequest$Outbound;
}

export function approveRequestRequestToJSON(
  approveRequestRequest: ApproveRequestRequest,
): string {
  return JSON.stringify(
    ApproveRequestRequest$outboundSchema.parse(approveRequestRequest),
  );
}

export function approveRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApproveRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRequestRequest' from JSON`,
  );
}

/** @internal */
export const ApproveRequestResponse$inboundSchema: z.ZodType<
  ApproveRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  request: components.RequestT$inboundSchema.optional(),
  taskId: z.string().optional(),
});

/** @internal */
export type ApproveRequestResponse$Outbound = {
  request?: components.RequestT$Outbound | undefined;
  taskId?: string | undefined;
};

/** @internal */
export const ApproveRequestResponse$outboundSchema: z.ZodType<
  ApproveRequestResponse$Outbound,
  z.ZodTypeDef,
  ApproveRequestResponse
> = z.object({
  request: components.RequestT$outboundSchema.optional(),
  taskId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRequestResponse$ {
  /** @deprecated use `ApproveRequestResponse$inboundSchema` instead. */
  export const inboundSchema = ApproveRequestResponse$inboundSchema;
  /** @deprecated use `ApproveRequestResponse$outboundSchema` instead. */
  export const outboundSchema = ApproveRequestResponse$outboundSchema;
  /** @deprecated use `ApproveRequestResponse$Outbound` instead. */
  export type Outbound = ApproveRequestResponse$Outbound;
}

export function approveRequestResponseToJSON(
  approveRequestResponse: ApproveRequestResponse,
): string {
  return JSON.stringify(
    ApproveRequestResponse$outboundSchema.parse(approveRequestResponse),
  );
}

export function approveRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApproveRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRequestResponse' from JSON`,
  );
}
