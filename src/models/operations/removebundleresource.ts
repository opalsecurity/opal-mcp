/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveBundleResourceRequest = {
  /**
   * The ID of the bundle.
   */
  bundleId: string;
  /**
   * The ID of the resource to remove.
   */
  resourceId: string;
  /**
   * The remote ID of the access level to grant. If omitted, the default access level remote ID value (empty string) is used.
   */
  accessLevelRemoteId?: string | undefined;
};

/** @internal */
export const RemoveBundleResourceRequest$inboundSchema: z.ZodType<
  RemoveBundleResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bundle_id: z.string(),
  resource_id: z.string(),
  access_level_remote_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "bundle_id": "bundleId",
    "resource_id": "resourceId",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type RemoveBundleResourceRequest$Outbound = {
  bundle_id: string;
  resource_id: string;
  access_level_remote_id?: string | undefined;
};

/** @internal */
export const RemoveBundleResourceRequest$outboundSchema: z.ZodType<
  RemoveBundleResourceRequest$Outbound,
  z.ZodTypeDef,
  RemoveBundleResourceRequest
> = z.object({
  bundleId: z.string(),
  resourceId: z.string(),
  accessLevelRemoteId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
    resourceId: "resource_id",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveBundleResourceRequest$ {
  /** @deprecated use `RemoveBundleResourceRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveBundleResourceRequest$inboundSchema;
  /** @deprecated use `RemoveBundleResourceRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveBundleResourceRequest$outboundSchema;
  /** @deprecated use `RemoveBundleResourceRequest$Outbound` instead. */
  export type Outbound = RemoveBundleResourceRequest$Outbound;
}

export function removeBundleResourceRequestToJSON(
  removeBundleResourceRequest: RemoveBundleResourceRequest,
): string {
  return JSON.stringify(
    RemoveBundleResourceRequest$outboundSchema.parse(
      removeBundleResourceRequest,
    ),
  );
}

export function removeBundleResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveBundleResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveBundleResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveBundleResourceRequest' from JSON`,
  );
}
