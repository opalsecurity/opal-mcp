/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateBundleRequest = {
  /**
   * The ID of the bundle to be updated.
   */
  bundleId: string;
  bundle: components.BundleInput;
};

/** @internal */
export const UpdateBundleRequest$inboundSchema: z.ZodType<
  UpdateBundleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bundle_id: z.string(),
  Bundle: components.BundleInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "bundle_id": "bundleId",
    "Bundle": "bundle",
  });
});

/** @internal */
export type UpdateBundleRequest$Outbound = {
  bundle_id: string;
  Bundle: components.BundleInput$Outbound;
};

/** @internal */
export const UpdateBundleRequest$outboundSchema: z.ZodType<
  UpdateBundleRequest$Outbound,
  z.ZodTypeDef,
  UpdateBundleRequest
> = z.object({
  bundleId: z.string(),
  bundle: components.BundleInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
    bundle: "Bundle",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBundleRequest$ {
  /** @deprecated use `UpdateBundleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBundleRequest$inboundSchema;
  /** @deprecated use `UpdateBundleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBundleRequest$outboundSchema;
  /** @deprecated use `UpdateBundleRequest$Outbound` instead. */
  export type Outbound = UpdateBundleRequest$Outbound;
}

export function updateBundleRequestToJSON(
  updateBundleRequest: UpdateBundleRequest,
): string {
  return JSON.stringify(
    UpdateBundleRequest$outboundSchema.parse(updateBundleRequest),
  );
}

export function updateBundleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBundleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBundleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBundleRequest' from JSON`,
  );
}
