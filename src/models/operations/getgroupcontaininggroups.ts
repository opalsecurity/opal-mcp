/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetGroupContainingGroupsRequest = {
  /**
   * The ID of the group.
   */
  groupId: string;
};

/** @internal */
export const GetGroupContainingGroupsRequest$inboundSchema: z.ZodType<
  GetGroupContainingGroupsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type GetGroupContainingGroupsRequest$Outbound = {
  group_id: string;
};

/** @internal */
export const GetGroupContainingGroupsRequest$outboundSchema: z.ZodType<
  GetGroupContainingGroupsRequest$Outbound,
  z.ZodTypeDef,
  GetGroupContainingGroupsRequest
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGroupContainingGroupsRequest$ {
  /** @deprecated use `GetGroupContainingGroupsRequest$inboundSchema` instead. */
  export const inboundSchema = GetGroupContainingGroupsRequest$inboundSchema;
  /** @deprecated use `GetGroupContainingGroupsRequest$outboundSchema` instead. */
  export const outboundSchema = GetGroupContainingGroupsRequest$outboundSchema;
  /** @deprecated use `GetGroupContainingGroupsRequest$Outbound` instead. */
  export type Outbound = GetGroupContainingGroupsRequest$Outbound;
}

export function getGroupContainingGroupsRequestToJSON(
  getGroupContainingGroupsRequest: GetGroupContainingGroupsRequest,
): string {
  return JSON.stringify(
    GetGroupContainingGroupsRequest$outboundSchema.parse(
      getGroupContainingGroupsRequest,
    ),
  );
}

export function getGroupContainingGroupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetGroupContainingGroupsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGroupContainingGroupsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGroupContainingGroupsRequest' from JSON`,
  );
}
