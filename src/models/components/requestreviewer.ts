/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of this reviewer's review
 */
export const RequestReviewerStatus = {
  Pending: "PENDING",
  Approved: "APPROVED",
  Rejected: "REJECTED",
} as const;
/**
 * The status of this reviewer's review
 */
export type RequestReviewerStatus = ClosedEnum<typeof RequestReviewerStatus>;

/**
 * A reviewer in a request stage
 */
export type RequestReviewer = {
  /**
   * The unique identifier of the reviewer
   */
  id: string;
  /**
   * The status of this reviewer's review
   */
  status: RequestReviewerStatus;
};

/** @internal */
export const RequestReviewerStatus$inboundSchema: z.ZodNativeEnum<
  typeof RequestReviewerStatus
> = z.nativeEnum(RequestReviewerStatus);

/** @internal */
export const RequestReviewerStatus$outboundSchema: z.ZodNativeEnum<
  typeof RequestReviewerStatus
> = RequestReviewerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestReviewerStatus$ {
  /** @deprecated use `RequestReviewerStatus$inboundSchema` instead. */
  export const inboundSchema = RequestReviewerStatus$inboundSchema;
  /** @deprecated use `RequestReviewerStatus$outboundSchema` instead. */
  export const outboundSchema = RequestReviewerStatus$outboundSchema;
}

/** @internal */
export const RequestReviewer$inboundSchema: z.ZodType<
  RequestReviewer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: RequestReviewerStatus$inboundSchema,
});

/** @internal */
export type RequestReviewer$Outbound = {
  id: string;
  status: string;
};

/** @internal */
export const RequestReviewer$outboundSchema: z.ZodType<
  RequestReviewer$Outbound,
  z.ZodTypeDef,
  RequestReviewer
> = z.object({
  id: z.string(),
  status: RequestReviewerStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestReviewer$ {
  /** @deprecated use `RequestReviewer$inboundSchema` instead. */
  export const inboundSchema = RequestReviewer$inboundSchema;
  /** @deprecated use `RequestReviewer$outboundSchema` instead. */
  export const outboundSchema = RequestReviewer$outboundSchema;
  /** @deprecated use `RequestReviewer$Outbound` instead. */
  export type Outbound = RequestReviewer$Outbound;
}

export function requestReviewerToJSON(
  requestReviewer: RequestReviewer,
): string {
  return JSON.stringify(RequestReviewer$outboundSchema.parse(requestReviewer));
}

export function requestReviewerFromJSON(
  jsonString: string,
): SafeParseResult<RequestReviewer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestReviewer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestReviewer' from JSON`,
  );
}
