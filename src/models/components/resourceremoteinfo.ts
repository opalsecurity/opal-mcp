/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Remote info for AWS account.
 */
export type AwsAccount = {
  /**
   * The id of the AWS account.
   */
  accountId: string;
};

/**
 * Remote info for AWS Identity Center permission set.
 */
export type AwsPermissionSet = {
  /**
   * The ARN of the permission set.
   */
  arn: string;
  /**
   * The ID of an AWS account to which this permission set is provisioned.
   */
  accountId: string;
};

/**
 * Remote info for AWS IAM role.
 */
export type AwsIamRole = {
  /**
   * The ARN of the IAM role.
   */
  arn: string;
  /**
   * The id of the AWS account. Required for AWS Organizations.
   */
  accountId?: string | undefined;
};

/**
 * Remote info for AWS EC2 instance.
 */
export type AwsEc2Instance = {
  /**
   * The instanceId of the EC2 instance.
   */
  instanceId: string;
  /**
   * The region of the EC2 instance.
   */
  region: string;
  /**
   * The id of the AWS account. Required for AWS Organizations.
   */
  accountId?: string | undefined;
};

/**
 * Remote info for AWS RDS instance.
 */
export type AwsRdsInstance = {
  /**
   * The instanceId of the RDS instance.
   */
  instanceId: string;
  /**
   * The region of the RDS instance.
   */
  region: string;
  /**
   * The resourceId of the RDS instance.
   */
  resourceId: string;
  /**
   * The id of the AWS account. Required for AWS Organizations.
   */
  accountId?: string | undefined;
};

/**
 * Remote info for AWS EKS cluster.
 */
export type AwsEksCluster = {
  /**
   * The ARN of the EKS cluster.
   */
  arn: string;
  /**
   * The id of the AWS account. Required for AWS Organizations.
   */
  accountId?: string | undefined;
};

/**
 * Remote info for GCP organization.
 */
export type GcpOrganization = {
  /**
   * The id of the organization.
   */
  organizationId: string;
};

/**
 * Remote info for GCP bucket.
 */
export type GcpBucket = {
  /**
   * The id of the bucket.
   */
  bucketId: string;
};

/**
 * Remote info for GCP compute instance.
 */
export type GcpComputeInstance = {
  /**
   * The id of the instance.
   */
  instanceId: string;
  /**
   * The id of the project the instance is in.
   */
  projectId: string;
  /**
   * The zone the instance is in.
   */
  zone: string;
};

/**
 * Remote info for GCP BigQuery Dataset.
 */
export type GcpBigQueryDataset = {
  /**
   * The id of the project the dataset is in.
   */
  projectId: string;
  /**
   * The id of the dataset.
   */
  datasetId: string;
};

/**
 * Remote info for GCP BigQuery Table.
 */
export type GcpBigQueryTable = {
  /**
   * The id of the project the table is in.
   */
  projectId: string;
  /**
   * The id of the dataset the table is in.
   */
  datasetId: string;
  /**
   * The id of the table.
   */
  tableId: string;
};

/**
 * Remote info for GCP folder.
 */
export type GcpFolder = {
  /**
   * The id of the folder.
   */
  folderId: string;
};

/**
 * Remote info for GCP GKE cluster.
 */
export type GcpGkeCluster = {
  /**
   * The name of the GKE cluster.
   */
  clusterName: string;
};

/**
 * Remote info for GCP project.
 */
export type GcpProject = {
  /**
   * The id of the project.
   */
  projectId: string;
};

/**
 * Remote info for GCP SQL instance.
 */
export type GcpSqlInstance = {
  /**
   * The id of the SQL instance.
   */
  instanceId: string;
  /**
   * The id of the project the instance is in.
   */
  projectId: string;
};

/**
 * Remote info for a GCP service account.
 */
export type GcpServiceAccount = {
  /**
   * The email of the service account.
   */
  email: string;
  /**
   * The id of the service account.
   */
  serviceAccountId: string;
  /**
   * The id of the project the service account is in.
   */
  projectId: string;
};

/**
 * Remote info for GitHub repository.
 */
export type GithubRepo = {
  /**
   * The id of the repository.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  repoId?: string | undefined;
  /**
   * The name of the repository.
   */
  repoName: string;
};

/**
 * Remote info for Gitlab project.
 */
export type GitlabProject = {
  /**
   * The id of the project.
   */
  projectId: string;
};

/**
 * Remote info for Okta directory app.
 */
export type OktaApp = {
  /**
   * The id of the app.
   */
  appId: string;
};

/**
 * Remote info for Okta directory standard role.
 */
export type OktaStandardRole = {
  /**
   * The type of the standard role.
   */
  roleType: string;
};

/**
 * Remote info for Okta directory custom role.
 */
export type OktaCustomRole = {
  /**
   * The id of the custom role.
   */
  roleId: string;
};

/**
 * Remote info for Pagerduty role.
 */
export type PagerdutyRole = {
  /**
   * The name of the role.
   */
  roleName: string;
};

/**
 * Remote info for Salesforce permission set.
 */
export type SalesforcePermissionSet = {
  /**
   * The id of the permission set.
   */
  permissionSetId: string;
};

/**
 * Remote info for Salesforce profile.
 */
export type SalesforceProfile = {
  /**
   * The id of the permission set.
   */
  profileId: string;
  /**
   * The id of the user license.
   */
  userLicenseId: string;
};

/**
 * Remote info for Salesforce role.
 */
export type SalesforceRole = {
  /**
   * The id of the role.
   */
  roleId: string;
};

/**
 * Remote info for Teleport role.
 */
export type TeleportRole = {
  /**
   * The name role.
   */
  roleName: string;
};

/**
 * Information that defines the remote resource. This replaces the deprecated remote_id and metadata fields.
 */
export type ResourceRemoteInfo = {
  /**
   * Remote info for AWS account.
   */
  awsAccount?: AwsAccount | undefined;
  /**
   * Remote info for AWS Identity Center permission set.
   */
  awsPermissionSet?: AwsPermissionSet | undefined;
  /**
   * Remote info for AWS IAM role.
   */
  awsIamRole?: AwsIamRole | undefined;
  /**
   * Remote info for AWS EC2 instance.
   */
  awsEc2Instance?: AwsEc2Instance | undefined;
  /**
   * Remote info for AWS RDS instance.
   */
  awsRdsInstance?: AwsRdsInstance | undefined;
  /**
   * Remote info for AWS EKS cluster.
   */
  awsEksCluster?: AwsEksCluster | undefined;
  /**
   * Remote info for GCP organization.
   */
  gcpOrganization?: GcpOrganization | undefined;
  /**
   * Remote info for GCP bucket.
   */
  gcpBucket?: GcpBucket | undefined;
  /**
   * Remote info for GCP compute instance.
   */
  gcpComputeInstance?: GcpComputeInstance | undefined;
  /**
   * Remote info for GCP BigQuery Dataset.
   */
  gcpBigQueryDataset?: GcpBigQueryDataset | undefined;
  /**
   * Remote info for GCP BigQuery Table.
   */
  gcpBigQueryTable?: GcpBigQueryTable | undefined;
  /**
   * Remote info for GCP folder.
   */
  gcpFolder?: GcpFolder | undefined;
  /**
   * Remote info for GCP GKE cluster.
   */
  gcpGkeCluster?: GcpGkeCluster | undefined;
  /**
   * Remote info for GCP project.
   */
  gcpProject?: GcpProject | undefined;
  /**
   * Remote info for GCP SQL instance.
   */
  gcpSqlInstance?: GcpSqlInstance | undefined;
  /**
   * Remote info for a GCP service account.
   */
  gcpServiceAccount?: GcpServiceAccount | undefined;
  /**
   * Remote info for GitHub repository.
   */
  githubRepo?: GithubRepo | undefined;
  /**
   * Remote info for Gitlab project.
   */
  gitlabProject?: GitlabProject | undefined;
  /**
   * Remote info for Okta directory app.
   */
  oktaApp?: OktaApp | undefined;
  /**
   * Remote info for Okta directory standard role.
   */
  oktaStandardRole?: OktaStandardRole | undefined;
  /**
   * Remote info for Okta directory custom role.
   */
  oktaCustomRole?: OktaCustomRole | undefined;
  /**
   * Remote info for Pagerduty role.
   */
  pagerdutyRole?: PagerdutyRole | undefined;
  /**
   * Remote info for Salesforce permission set.
   */
  salesforcePermissionSet?: SalesforcePermissionSet | undefined;
  /**
   * Remote info for Salesforce profile.
   */
  salesforceProfile?: SalesforceProfile | undefined;
  /**
   * Remote info for Salesforce role.
   */
  salesforceRole?: SalesforceRole | undefined;
  /**
   * Remote info for Teleport role.
   */
  teleportRole?: TeleportRole | undefined;
};

/** @internal */
export const AwsAccount$inboundSchema: z.ZodType<
  AwsAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
  });
});

/** @internal */
export type AwsAccount$Outbound = {
  account_id: string;
};

/** @internal */
export const AwsAccount$outboundSchema: z.ZodType<
  AwsAccount$Outbound,
  z.ZodTypeDef,
  AwsAccount
> = z.object({
  accountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AwsAccount$ {
  /** @deprecated use `AwsAccount$inboundSchema` instead. */
  export const inboundSchema = AwsAccount$inboundSchema;
  /** @deprecated use `AwsAccount$outboundSchema` instead. */
  export const outboundSchema = AwsAccount$outboundSchema;
  /** @deprecated use `AwsAccount$Outbound` instead. */
  export type Outbound = AwsAccount$Outbound;
}

export function awsAccountToJSON(awsAccount: AwsAccount): string {
  return JSON.stringify(AwsAccount$outboundSchema.parse(awsAccount));
}

export function awsAccountFromJSON(
  jsonString: string,
): SafeParseResult<AwsAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AwsAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AwsAccount' from JSON`,
  );
}

/** @internal */
export const AwsPermissionSet$inboundSchema: z.ZodType<
  AwsPermissionSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  arn: z.string(),
  account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
  });
});

/** @internal */
export type AwsPermissionSet$Outbound = {
  arn: string;
  account_id: string;
};

/** @internal */
export const AwsPermissionSet$outboundSchema: z.ZodType<
  AwsPermissionSet$Outbound,
  z.ZodTypeDef,
  AwsPermissionSet
> = z.object({
  arn: z.string(),
  accountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AwsPermissionSet$ {
  /** @deprecated use `AwsPermissionSet$inboundSchema` instead. */
  export const inboundSchema = AwsPermissionSet$inboundSchema;
  /** @deprecated use `AwsPermissionSet$outboundSchema` instead. */
  export const outboundSchema = AwsPermissionSet$outboundSchema;
  /** @deprecated use `AwsPermissionSet$Outbound` instead. */
  export type Outbound = AwsPermissionSet$Outbound;
}

export function awsPermissionSetToJSON(
  awsPermissionSet: AwsPermissionSet,
): string {
  return JSON.stringify(
    AwsPermissionSet$outboundSchema.parse(awsPermissionSet),
  );
}

export function awsPermissionSetFromJSON(
  jsonString: string,
): SafeParseResult<AwsPermissionSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AwsPermissionSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AwsPermissionSet' from JSON`,
  );
}

/** @internal */
export const AwsIamRole$inboundSchema: z.ZodType<
  AwsIamRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  arn: z.string(),
  account_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
  });
});

/** @internal */
export type AwsIamRole$Outbound = {
  arn: string;
  account_id?: string | undefined;
};

/** @internal */
export const AwsIamRole$outboundSchema: z.ZodType<
  AwsIamRole$Outbound,
  z.ZodTypeDef,
  AwsIamRole
> = z.object({
  arn: z.string(),
  accountId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AwsIamRole$ {
  /** @deprecated use `AwsIamRole$inboundSchema` instead. */
  export const inboundSchema = AwsIamRole$inboundSchema;
  /** @deprecated use `AwsIamRole$outboundSchema` instead. */
  export const outboundSchema = AwsIamRole$outboundSchema;
  /** @deprecated use `AwsIamRole$Outbound` instead. */
  export type Outbound = AwsIamRole$Outbound;
}

export function awsIamRoleToJSON(awsIamRole: AwsIamRole): string {
  return JSON.stringify(AwsIamRole$outboundSchema.parse(awsIamRole));
}

export function awsIamRoleFromJSON(
  jsonString: string,
): SafeParseResult<AwsIamRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AwsIamRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AwsIamRole' from JSON`,
  );
}

/** @internal */
export const AwsEc2Instance$inboundSchema: z.ZodType<
  AwsEc2Instance,
  z.ZodTypeDef,
  unknown
> = z.object({
  instance_id: z.string(),
  region: z.string(),
  account_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "instance_id": "instanceId",
    "account_id": "accountId",
  });
});

/** @internal */
export type AwsEc2Instance$Outbound = {
  instance_id: string;
  region: string;
  account_id?: string | undefined;
};

/** @internal */
export const AwsEc2Instance$outboundSchema: z.ZodType<
  AwsEc2Instance$Outbound,
  z.ZodTypeDef,
  AwsEc2Instance
> = z.object({
  instanceId: z.string(),
  region: z.string(),
  accountId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    instanceId: "instance_id",
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AwsEc2Instance$ {
  /** @deprecated use `AwsEc2Instance$inboundSchema` instead. */
  export const inboundSchema = AwsEc2Instance$inboundSchema;
  /** @deprecated use `AwsEc2Instance$outboundSchema` instead. */
  export const outboundSchema = AwsEc2Instance$outboundSchema;
  /** @deprecated use `AwsEc2Instance$Outbound` instead. */
  export type Outbound = AwsEc2Instance$Outbound;
}

export function awsEc2InstanceToJSON(awsEc2Instance: AwsEc2Instance): string {
  return JSON.stringify(AwsEc2Instance$outboundSchema.parse(awsEc2Instance));
}

export function awsEc2InstanceFromJSON(
  jsonString: string,
): SafeParseResult<AwsEc2Instance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AwsEc2Instance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AwsEc2Instance' from JSON`,
  );
}

/** @internal */
export const AwsRdsInstance$inboundSchema: z.ZodType<
  AwsRdsInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  instance_id: z.string(),
  region: z.string(),
  resource_id: z.string(),
  account_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "instance_id": "instanceId",
    "resource_id": "resourceId",
    "account_id": "accountId",
  });
});

/** @internal */
export type AwsRdsInstance$Outbound = {
  instance_id: string;
  region: string;
  resource_id: string;
  account_id?: string | undefined;
};

/** @internal */
export const AwsRdsInstance$outboundSchema: z.ZodType<
  AwsRdsInstance$Outbound,
  z.ZodTypeDef,
  AwsRdsInstance
> = z.object({
  instanceId: z.string(),
  region: z.string(),
  resourceId: z.string(),
  accountId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    instanceId: "instance_id",
    resourceId: "resource_id",
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AwsRdsInstance$ {
  /** @deprecated use `AwsRdsInstance$inboundSchema` instead. */
  export const inboundSchema = AwsRdsInstance$inboundSchema;
  /** @deprecated use `AwsRdsInstance$outboundSchema` instead. */
  export const outboundSchema = AwsRdsInstance$outboundSchema;
  /** @deprecated use `AwsRdsInstance$Outbound` instead. */
  export type Outbound = AwsRdsInstance$Outbound;
}

export function awsRdsInstanceToJSON(awsRdsInstance: AwsRdsInstance): string {
  return JSON.stringify(AwsRdsInstance$outboundSchema.parse(awsRdsInstance));
}

export function awsRdsInstanceFromJSON(
  jsonString: string,
): SafeParseResult<AwsRdsInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AwsRdsInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AwsRdsInstance' from JSON`,
  );
}

/** @internal */
export const AwsEksCluster$inboundSchema: z.ZodType<
  AwsEksCluster,
  z.ZodTypeDef,
  unknown
> = z.object({
  arn: z.string(),
  account_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
  });
});

/** @internal */
export type AwsEksCluster$Outbound = {
  arn: string;
  account_id?: string | undefined;
};

/** @internal */
export const AwsEksCluster$outboundSchema: z.ZodType<
  AwsEksCluster$Outbound,
  z.ZodTypeDef,
  AwsEksCluster
> = z.object({
  arn: z.string(),
  accountId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AwsEksCluster$ {
  /** @deprecated use `AwsEksCluster$inboundSchema` instead. */
  export const inboundSchema = AwsEksCluster$inboundSchema;
  /** @deprecated use `AwsEksCluster$outboundSchema` instead. */
  export const outboundSchema = AwsEksCluster$outboundSchema;
  /** @deprecated use `AwsEksCluster$Outbound` instead. */
  export type Outbound = AwsEksCluster$Outbound;
}

export function awsEksClusterToJSON(awsEksCluster: AwsEksCluster): string {
  return JSON.stringify(AwsEksCluster$outboundSchema.parse(awsEksCluster));
}

export function awsEksClusterFromJSON(
  jsonString: string,
): SafeParseResult<AwsEksCluster, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AwsEksCluster$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AwsEksCluster' from JSON`,
  );
}

/** @internal */
export const GcpOrganization$inboundSchema: z.ZodType<
  GcpOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type GcpOrganization$Outbound = {
  organization_id: string;
};

/** @internal */
export const GcpOrganization$outboundSchema: z.ZodType<
  GcpOrganization$Outbound,
  z.ZodTypeDef,
  GcpOrganization
> = z.object({
  organizationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpOrganization$ {
  /** @deprecated use `GcpOrganization$inboundSchema` instead. */
  export const inboundSchema = GcpOrganization$inboundSchema;
  /** @deprecated use `GcpOrganization$outboundSchema` instead. */
  export const outboundSchema = GcpOrganization$outboundSchema;
  /** @deprecated use `GcpOrganization$Outbound` instead. */
  export type Outbound = GcpOrganization$Outbound;
}

export function gcpOrganizationToJSON(
  gcpOrganization: GcpOrganization,
): string {
  return JSON.stringify(GcpOrganization$outboundSchema.parse(gcpOrganization));
}

export function gcpOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<GcpOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpOrganization' from JSON`,
  );
}

/** @internal */
export const GcpBucket$inboundSchema: z.ZodType<
  GcpBucket,
  z.ZodTypeDef,
  unknown
> = z.object({
  bucket_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "bucket_id": "bucketId",
  });
});

/** @internal */
export type GcpBucket$Outbound = {
  bucket_id: string;
};

/** @internal */
export const GcpBucket$outboundSchema: z.ZodType<
  GcpBucket$Outbound,
  z.ZodTypeDef,
  GcpBucket
> = z.object({
  bucketId: z.string(),
}).transform((v) => {
  return remap$(v, {
    bucketId: "bucket_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpBucket$ {
  /** @deprecated use `GcpBucket$inboundSchema` instead. */
  export const inboundSchema = GcpBucket$inboundSchema;
  /** @deprecated use `GcpBucket$outboundSchema` instead. */
  export const outboundSchema = GcpBucket$outboundSchema;
  /** @deprecated use `GcpBucket$Outbound` instead. */
  export type Outbound = GcpBucket$Outbound;
}

export function gcpBucketToJSON(gcpBucket: GcpBucket): string {
  return JSON.stringify(GcpBucket$outboundSchema.parse(gcpBucket));
}

export function gcpBucketFromJSON(
  jsonString: string,
): SafeParseResult<GcpBucket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpBucket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpBucket' from JSON`,
  );
}

/** @internal */
export const GcpComputeInstance$inboundSchema: z.ZodType<
  GcpComputeInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  instance_id: z.string(),
  project_id: z.string(),
  zone: z.string(),
}).transform((v) => {
  return remap$(v, {
    "instance_id": "instanceId",
    "project_id": "projectId",
  });
});

/** @internal */
export type GcpComputeInstance$Outbound = {
  instance_id: string;
  project_id: string;
  zone: string;
};

/** @internal */
export const GcpComputeInstance$outboundSchema: z.ZodType<
  GcpComputeInstance$Outbound,
  z.ZodTypeDef,
  GcpComputeInstance
> = z.object({
  instanceId: z.string(),
  projectId: z.string(),
  zone: z.string(),
}).transform((v) => {
  return remap$(v, {
    instanceId: "instance_id",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpComputeInstance$ {
  /** @deprecated use `GcpComputeInstance$inboundSchema` instead. */
  export const inboundSchema = GcpComputeInstance$inboundSchema;
  /** @deprecated use `GcpComputeInstance$outboundSchema` instead. */
  export const outboundSchema = GcpComputeInstance$outboundSchema;
  /** @deprecated use `GcpComputeInstance$Outbound` instead. */
  export type Outbound = GcpComputeInstance$Outbound;
}

export function gcpComputeInstanceToJSON(
  gcpComputeInstance: GcpComputeInstance,
): string {
  return JSON.stringify(
    GcpComputeInstance$outboundSchema.parse(gcpComputeInstance),
  );
}

export function gcpComputeInstanceFromJSON(
  jsonString: string,
): SafeParseResult<GcpComputeInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpComputeInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpComputeInstance' from JSON`,
  );
}

/** @internal */
export const GcpBigQueryDataset$inboundSchema: z.ZodType<
  GcpBigQueryDataset,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  dataset_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "dataset_id": "datasetId",
  });
});

/** @internal */
export type GcpBigQueryDataset$Outbound = {
  project_id: string;
  dataset_id: string;
};

/** @internal */
export const GcpBigQueryDataset$outboundSchema: z.ZodType<
  GcpBigQueryDataset$Outbound,
  z.ZodTypeDef,
  GcpBigQueryDataset
> = z.object({
  projectId: z.string(),
  datasetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    datasetId: "dataset_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpBigQueryDataset$ {
  /** @deprecated use `GcpBigQueryDataset$inboundSchema` instead. */
  export const inboundSchema = GcpBigQueryDataset$inboundSchema;
  /** @deprecated use `GcpBigQueryDataset$outboundSchema` instead. */
  export const outboundSchema = GcpBigQueryDataset$outboundSchema;
  /** @deprecated use `GcpBigQueryDataset$Outbound` instead. */
  export type Outbound = GcpBigQueryDataset$Outbound;
}

export function gcpBigQueryDatasetToJSON(
  gcpBigQueryDataset: GcpBigQueryDataset,
): string {
  return JSON.stringify(
    GcpBigQueryDataset$outboundSchema.parse(gcpBigQueryDataset),
  );
}

export function gcpBigQueryDatasetFromJSON(
  jsonString: string,
): SafeParseResult<GcpBigQueryDataset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpBigQueryDataset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpBigQueryDataset' from JSON`,
  );
}

/** @internal */
export const GcpBigQueryTable$inboundSchema: z.ZodType<
  GcpBigQueryTable,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  dataset_id: z.string(),
  table_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "dataset_id": "datasetId",
    "table_id": "tableId",
  });
});

/** @internal */
export type GcpBigQueryTable$Outbound = {
  project_id: string;
  dataset_id: string;
  table_id: string;
};

/** @internal */
export const GcpBigQueryTable$outboundSchema: z.ZodType<
  GcpBigQueryTable$Outbound,
  z.ZodTypeDef,
  GcpBigQueryTable
> = z.object({
  projectId: z.string(),
  datasetId: z.string(),
  tableId: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    datasetId: "dataset_id",
    tableId: "table_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpBigQueryTable$ {
  /** @deprecated use `GcpBigQueryTable$inboundSchema` instead. */
  export const inboundSchema = GcpBigQueryTable$inboundSchema;
  /** @deprecated use `GcpBigQueryTable$outboundSchema` instead. */
  export const outboundSchema = GcpBigQueryTable$outboundSchema;
  /** @deprecated use `GcpBigQueryTable$Outbound` instead. */
  export type Outbound = GcpBigQueryTable$Outbound;
}

export function gcpBigQueryTableToJSON(
  gcpBigQueryTable: GcpBigQueryTable,
): string {
  return JSON.stringify(
    GcpBigQueryTable$outboundSchema.parse(gcpBigQueryTable),
  );
}

export function gcpBigQueryTableFromJSON(
  jsonString: string,
): SafeParseResult<GcpBigQueryTable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpBigQueryTable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpBigQueryTable' from JSON`,
  );
}

/** @internal */
export const GcpFolder$inboundSchema: z.ZodType<
  GcpFolder,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "folder_id": "folderId",
  });
});

/** @internal */
export type GcpFolder$Outbound = {
  folder_id: string;
};

/** @internal */
export const GcpFolder$outboundSchema: z.ZodType<
  GcpFolder$Outbound,
  z.ZodTypeDef,
  GcpFolder
> = z.object({
  folderId: z.string(),
}).transform((v) => {
  return remap$(v, {
    folderId: "folder_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpFolder$ {
  /** @deprecated use `GcpFolder$inboundSchema` instead. */
  export const inboundSchema = GcpFolder$inboundSchema;
  /** @deprecated use `GcpFolder$outboundSchema` instead. */
  export const outboundSchema = GcpFolder$outboundSchema;
  /** @deprecated use `GcpFolder$Outbound` instead. */
  export type Outbound = GcpFolder$Outbound;
}

export function gcpFolderToJSON(gcpFolder: GcpFolder): string {
  return JSON.stringify(GcpFolder$outboundSchema.parse(gcpFolder));
}

export function gcpFolderFromJSON(
  jsonString: string,
): SafeParseResult<GcpFolder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpFolder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpFolder' from JSON`,
  );
}

/** @internal */
export const GcpGkeCluster$inboundSchema: z.ZodType<
  GcpGkeCluster,
  z.ZodTypeDef,
  unknown
> = z.object({
  cluster_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "cluster_name": "clusterName",
  });
});

/** @internal */
export type GcpGkeCluster$Outbound = {
  cluster_name: string;
};

/** @internal */
export const GcpGkeCluster$outboundSchema: z.ZodType<
  GcpGkeCluster$Outbound,
  z.ZodTypeDef,
  GcpGkeCluster
> = z.object({
  clusterName: z.string(),
}).transform((v) => {
  return remap$(v, {
    clusterName: "cluster_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpGkeCluster$ {
  /** @deprecated use `GcpGkeCluster$inboundSchema` instead. */
  export const inboundSchema = GcpGkeCluster$inboundSchema;
  /** @deprecated use `GcpGkeCluster$outboundSchema` instead. */
  export const outboundSchema = GcpGkeCluster$outboundSchema;
  /** @deprecated use `GcpGkeCluster$Outbound` instead. */
  export type Outbound = GcpGkeCluster$Outbound;
}

export function gcpGkeClusterToJSON(gcpGkeCluster: GcpGkeCluster): string {
  return JSON.stringify(GcpGkeCluster$outboundSchema.parse(gcpGkeCluster));
}

export function gcpGkeClusterFromJSON(
  jsonString: string,
): SafeParseResult<GcpGkeCluster, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpGkeCluster$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpGkeCluster' from JSON`,
  );
}

/** @internal */
export const GcpProject$inboundSchema: z.ZodType<
  GcpProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type GcpProject$Outbound = {
  project_id: string;
};

/** @internal */
export const GcpProject$outboundSchema: z.ZodType<
  GcpProject$Outbound,
  z.ZodTypeDef,
  GcpProject
> = z.object({
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpProject$ {
  /** @deprecated use `GcpProject$inboundSchema` instead. */
  export const inboundSchema = GcpProject$inboundSchema;
  /** @deprecated use `GcpProject$outboundSchema` instead. */
  export const outboundSchema = GcpProject$outboundSchema;
  /** @deprecated use `GcpProject$Outbound` instead. */
  export type Outbound = GcpProject$Outbound;
}

export function gcpProjectToJSON(gcpProject: GcpProject): string {
  return JSON.stringify(GcpProject$outboundSchema.parse(gcpProject));
}

export function gcpProjectFromJSON(
  jsonString: string,
): SafeParseResult<GcpProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpProject' from JSON`,
  );
}

/** @internal */
export const GcpSqlInstance$inboundSchema: z.ZodType<
  GcpSqlInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  instance_id: z.string(),
  project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "instance_id": "instanceId",
    "project_id": "projectId",
  });
});

/** @internal */
export type GcpSqlInstance$Outbound = {
  instance_id: string;
  project_id: string;
};

/** @internal */
export const GcpSqlInstance$outboundSchema: z.ZodType<
  GcpSqlInstance$Outbound,
  z.ZodTypeDef,
  GcpSqlInstance
> = z.object({
  instanceId: z.string(),
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    instanceId: "instance_id",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpSqlInstance$ {
  /** @deprecated use `GcpSqlInstance$inboundSchema` instead. */
  export const inboundSchema = GcpSqlInstance$inboundSchema;
  /** @deprecated use `GcpSqlInstance$outboundSchema` instead. */
  export const outboundSchema = GcpSqlInstance$outboundSchema;
  /** @deprecated use `GcpSqlInstance$Outbound` instead. */
  export type Outbound = GcpSqlInstance$Outbound;
}

export function gcpSqlInstanceToJSON(gcpSqlInstance: GcpSqlInstance): string {
  return JSON.stringify(GcpSqlInstance$outboundSchema.parse(gcpSqlInstance));
}

export function gcpSqlInstanceFromJSON(
  jsonString: string,
): SafeParseResult<GcpSqlInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpSqlInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpSqlInstance' from JSON`,
  );
}

/** @internal */
export const GcpServiceAccount$inboundSchema: z.ZodType<
  GcpServiceAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  service_account_id: z.string(),
  project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "service_account_id": "serviceAccountId",
    "project_id": "projectId",
  });
});

/** @internal */
export type GcpServiceAccount$Outbound = {
  email: string;
  service_account_id: string;
  project_id: string;
};

/** @internal */
export const GcpServiceAccount$outboundSchema: z.ZodType<
  GcpServiceAccount$Outbound,
  z.ZodTypeDef,
  GcpServiceAccount
> = z.object({
  email: z.string(),
  serviceAccountId: z.string(),
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    serviceAccountId: "service_account_id",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GcpServiceAccount$ {
  /** @deprecated use `GcpServiceAccount$inboundSchema` instead. */
  export const inboundSchema = GcpServiceAccount$inboundSchema;
  /** @deprecated use `GcpServiceAccount$outboundSchema` instead. */
  export const outboundSchema = GcpServiceAccount$outboundSchema;
  /** @deprecated use `GcpServiceAccount$Outbound` instead. */
  export type Outbound = GcpServiceAccount$Outbound;
}

export function gcpServiceAccountToJSON(
  gcpServiceAccount: GcpServiceAccount,
): string {
  return JSON.stringify(
    GcpServiceAccount$outboundSchema.parse(gcpServiceAccount),
  );
}

export function gcpServiceAccountFromJSON(
  jsonString: string,
): SafeParseResult<GcpServiceAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GcpServiceAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GcpServiceAccount' from JSON`,
  );
}

/** @internal */
export const GithubRepo$inboundSchema: z.ZodType<
  GithubRepo,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo_id: z.string().optional(),
  repo_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "repo_id": "repoId",
    "repo_name": "repoName",
  });
});

/** @internal */
export type GithubRepo$Outbound = {
  repo_id?: string | undefined;
  repo_name: string;
};

/** @internal */
export const GithubRepo$outboundSchema: z.ZodType<
  GithubRepo$Outbound,
  z.ZodTypeDef,
  GithubRepo
> = z.object({
  repoId: z.string().optional(),
  repoName: z.string(),
}).transform((v) => {
  return remap$(v, {
    repoId: "repo_id",
    repoName: "repo_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubRepo$ {
  /** @deprecated use `GithubRepo$inboundSchema` instead. */
  export const inboundSchema = GithubRepo$inboundSchema;
  /** @deprecated use `GithubRepo$outboundSchema` instead. */
  export const outboundSchema = GithubRepo$outboundSchema;
  /** @deprecated use `GithubRepo$Outbound` instead. */
  export type Outbound = GithubRepo$Outbound;
}

export function githubRepoToJSON(githubRepo: GithubRepo): string {
  return JSON.stringify(GithubRepo$outboundSchema.parse(githubRepo));
}

export function githubRepoFromJSON(
  jsonString: string,
): SafeParseResult<GithubRepo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubRepo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubRepo' from JSON`,
  );
}

/** @internal */
export const GitlabProject$inboundSchema: z.ZodType<
  GitlabProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type GitlabProject$Outbound = {
  project_id: string;
};

/** @internal */
export const GitlabProject$outboundSchema: z.ZodType<
  GitlabProject$Outbound,
  z.ZodTypeDef,
  GitlabProject
> = z.object({
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabProject$ {
  /** @deprecated use `GitlabProject$inboundSchema` instead. */
  export const inboundSchema = GitlabProject$inboundSchema;
  /** @deprecated use `GitlabProject$outboundSchema` instead. */
  export const outboundSchema = GitlabProject$outboundSchema;
  /** @deprecated use `GitlabProject$Outbound` instead. */
  export type Outbound = GitlabProject$Outbound;
}

export function gitlabProjectToJSON(gitlabProject: GitlabProject): string {
  return JSON.stringify(GitlabProject$outboundSchema.parse(gitlabProject));
}

export function gitlabProjectFromJSON(
  jsonString: string,
): SafeParseResult<GitlabProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabProject' from JSON`,
  );
}

/** @internal */
export const OktaApp$inboundSchema: z.ZodType<OktaApp, z.ZodTypeDef, unknown> =
  z.object({
    app_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "app_id": "appId",
    });
  });

/** @internal */
export type OktaApp$Outbound = {
  app_id: string;
};

/** @internal */
export const OktaApp$outboundSchema: z.ZodType<
  OktaApp$Outbound,
  z.ZodTypeDef,
  OktaApp
> = z.object({
  appId: z.string(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OktaApp$ {
  /** @deprecated use `OktaApp$inboundSchema` instead. */
  export const inboundSchema = OktaApp$inboundSchema;
  /** @deprecated use `OktaApp$outboundSchema` instead. */
  export const outboundSchema = OktaApp$outboundSchema;
  /** @deprecated use `OktaApp$Outbound` instead. */
  export type Outbound = OktaApp$Outbound;
}

export function oktaAppToJSON(oktaApp: OktaApp): string {
  return JSON.stringify(OktaApp$outboundSchema.parse(oktaApp));
}

export function oktaAppFromJSON(
  jsonString: string,
): SafeParseResult<OktaApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OktaApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OktaApp' from JSON`,
  );
}

/** @internal */
export const OktaStandardRole$inboundSchema: z.ZodType<
  OktaStandardRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "role_type": "roleType",
  });
});

/** @internal */
export type OktaStandardRole$Outbound = {
  role_type: string;
};

/** @internal */
export const OktaStandardRole$outboundSchema: z.ZodType<
  OktaStandardRole$Outbound,
  z.ZodTypeDef,
  OktaStandardRole
> = z.object({
  roleType: z.string(),
}).transform((v) => {
  return remap$(v, {
    roleType: "role_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OktaStandardRole$ {
  /** @deprecated use `OktaStandardRole$inboundSchema` instead. */
  export const inboundSchema = OktaStandardRole$inboundSchema;
  /** @deprecated use `OktaStandardRole$outboundSchema` instead. */
  export const outboundSchema = OktaStandardRole$outboundSchema;
  /** @deprecated use `OktaStandardRole$Outbound` instead. */
  export type Outbound = OktaStandardRole$Outbound;
}

export function oktaStandardRoleToJSON(
  oktaStandardRole: OktaStandardRole,
): string {
  return JSON.stringify(
    OktaStandardRole$outboundSchema.parse(oktaStandardRole),
  );
}

export function oktaStandardRoleFromJSON(
  jsonString: string,
): SafeParseResult<OktaStandardRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OktaStandardRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OktaStandardRole' from JSON`,
  );
}

/** @internal */
export const OktaCustomRole$inboundSchema: z.ZodType<
  OktaCustomRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "role_id": "roleId",
  });
});

/** @internal */
export type OktaCustomRole$Outbound = {
  role_id: string;
};

/** @internal */
export const OktaCustomRole$outboundSchema: z.ZodType<
  OktaCustomRole$Outbound,
  z.ZodTypeDef,
  OktaCustomRole
> = z.object({
  roleId: z.string(),
}).transform((v) => {
  return remap$(v, {
    roleId: "role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OktaCustomRole$ {
  /** @deprecated use `OktaCustomRole$inboundSchema` instead. */
  export const inboundSchema = OktaCustomRole$inboundSchema;
  /** @deprecated use `OktaCustomRole$outboundSchema` instead. */
  export const outboundSchema = OktaCustomRole$outboundSchema;
  /** @deprecated use `OktaCustomRole$Outbound` instead. */
  export type Outbound = OktaCustomRole$Outbound;
}

export function oktaCustomRoleToJSON(oktaCustomRole: OktaCustomRole): string {
  return JSON.stringify(OktaCustomRole$outboundSchema.parse(oktaCustomRole));
}

export function oktaCustomRoleFromJSON(
  jsonString: string,
): SafeParseResult<OktaCustomRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OktaCustomRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OktaCustomRole' from JSON`,
  );
}

/** @internal */
export const PagerdutyRole$inboundSchema: z.ZodType<
  PagerdutyRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "role_name": "roleName",
  });
});

/** @internal */
export type PagerdutyRole$Outbound = {
  role_name: string;
};

/** @internal */
export const PagerdutyRole$outboundSchema: z.ZodType<
  PagerdutyRole$Outbound,
  z.ZodTypeDef,
  PagerdutyRole
> = z.object({
  roleName: z.string(),
}).transform((v) => {
  return remap$(v, {
    roleName: "role_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagerdutyRole$ {
  /** @deprecated use `PagerdutyRole$inboundSchema` instead. */
  export const inboundSchema = PagerdutyRole$inboundSchema;
  /** @deprecated use `PagerdutyRole$outboundSchema` instead. */
  export const outboundSchema = PagerdutyRole$outboundSchema;
  /** @deprecated use `PagerdutyRole$Outbound` instead. */
  export type Outbound = PagerdutyRole$Outbound;
}

export function pagerdutyRoleToJSON(pagerdutyRole: PagerdutyRole): string {
  return JSON.stringify(PagerdutyRole$outboundSchema.parse(pagerdutyRole));
}

export function pagerdutyRoleFromJSON(
  jsonString: string,
): SafeParseResult<PagerdutyRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagerdutyRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagerdutyRole' from JSON`,
  );
}

/** @internal */
export const SalesforcePermissionSet$inboundSchema: z.ZodType<
  SalesforcePermissionSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  permission_set_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "permission_set_id": "permissionSetId",
  });
});

/** @internal */
export type SalesforcePermissionSet$Outbound = {
  permission_set_id: string;
};

/** @internal */
export const SalesforcePermissionSet$outboundSchema: z.ZodType<
  SalesforcePermissionSet$Outbound,
  z.ZodTypeDef,
  SalesforcePermissionSet
> = z.object({
  permissionSetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    permissionSetId: "permission_set_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesforcePermissionSet$ {
  /** @deprecated use `SalesforcePermissionSet$inboundSchema` instead. */
  export const inboundSchema = SalesforcePermissionSet$inboundSchema;
  /** @deprecated use `SalesforcePermissionSet$outboundSchema` instead. */
  export const outboundSchema = SalesforcePermissionSet$outboundSchema;
  /** @deprecated use `SalesforcePermissionSet$Outbound` instead. */
  export type Outbound = SalesforcePermissionSet$Outbound;
}

export function salesforcePermissionSetToJSON(
  salesforcePermissionSet: SalesforcePermissionSet,
): string {
  return JSON.stringify(
    SalesforcePermissionSet$outboundSchema.parse(salesforcePermissionSet),
  );
}

export function salesforcePermissionSetFromJSON(
  jsonString: string,
): SafeParseResult<SalesforcePermissionSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesforcePermissionSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesforcePermissionSet' from JSON`,
  );
}

/** @internal */
export const SalesforceProfile$inboundSchema: z.ZodType<
  SalesforceProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  profile_id: z.string(),
  user_license_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "profile_id": "profileId",
    "user_license_id": "userLicenseId",
  });
});

/** @internal */
export type SalesforceProfile$Outbound = {
  profile_id: string;
  user_license_id: string;
};

/** @internal */
export const SalesforceProfile$outboundSchema: z.ZodType<
  SalesforceProfile$Outbound,
  z.ZodTypeDef,
  SalesforceProfile
> = z.object({
  profileId: z.string(),
  userLicenseId: z.string(),
}).transform((v) => {
  return remap$(v, {
    profileId: "profile_id",
    userLicenseId: "user_license_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesforceProfile$ {
  /** @deprecated use `SalesforceProfile$inboundSchema` instead. */
  export const inboundSchema = SalesforceProfile$inboundSchema;
  /** @deprecated use `SalesforceProfile$outboundSchema` instead. */
  export const outboundSchema = SalesforceProfile$outboundSchema;
  /** @deprecated use `SalesforceProfile$Outbound` instead. */
  export type Outbound = SalesforceProfile$Outbound;
}

export function salesforceProfileToJSON(
  salesforceProfile: SalesforceProfile,
): string {
  return JSON.stringify(
    SalesforceProfile$outboundSchema.parse(salesforceProfile),
  );
}

export function salesforceProfileFromJSON(
  jsonString: string,
): SafeParseResult<SalesforceProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesforceProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesforceProfile' from JSON`,
  );
}

/** @internal */
export const SalesforceRole$inboundSchema: z.ZodType<
  SalesforceRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "role_id": "roleId",
  });
});

/** @internal */
export type SalesforceRole$Outbound = {
  role_id: string;
};

/** @internal */
export const SalesforceRole$outboundSchema: z.ZodType<
  SalesforceRole$Outbound,
  z.ZodTypeDef,
  SalesforceRole
> = z.object({
  roleId: z.string(),
}).transform((v) => {
  return remap$(v, {
    roleId: "role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesforceRole$ {
  /** @deprecated use `SalesforceRole$inboundSchema` instead. */
  export const inboundSchema = SalesforceRole$inboundSchema;
  /** @deprecated use `SalesforceRole$outboundSchema` instead. */
  export const outboundSchema = SalesforceRole$outboundSchema;
  /** @deprecated use `SalesforceRole$Outbound` instead. */
  export type Outbound = SalesforceRole$Outbound;
}

export function salesforceRoleToJSON(salesforceRole: SalesforceRole): string {
  return JSON.stringify(SalesforceRole$outboundSchema.parse(salesforceRole));
}

export function salesforceRoleFromJSON(
  jsonString: string,
): SafeParseResult<SalesforceRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesforceRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesforceRole' from JSON`,
  );
}

/** @internal */
export const TeleportRole$inboundSchema: z.ZodType<
  TeleportRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "role_name": "roleName",
  });
});

/** @internal */
export type TeleportRole$Outbound = {
  role_name: string;
};

/** @internal */
export const TeleportRole$outboundSchema: z.ZodType<
  TeleportRole$Outbound,
  z.ZodTypeDef,
  TeleportRole
> = z.object({
  roleName: z.string(),
}).transform((v) => {
  return remap$(v, {
    roleName: "role_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeleportRole$ {
  /** @deprecated use `TeleportRole$inboundSchema` instead. */
  export const inboundSchema = TeleportRole$inboundSchema;
  /** @deprecated use `TeleportRole$outboundSchema` instead. */
  export const outboundSchema = TeleportRole$outboundSchema;
  /** @deprecated use `TeleportRole$Outbound` instead. */
  export type Outbound = TeleportRole$Outbound;
}

export function teleportRoleToJSON(teleportRole: TeleportRole): string {
  return JSON.stringify(TeleportRole$outboundSchema.parse(teleportRole));
}

export function teleportRoleFromJSON(
  jsonString: string,
): SafeParseResult<TeleportRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeleportRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeleportRole' from JSON`,
  );
}

/** @internal */
export const ResourceRemoteInfo$inboundSchema: z.ZodType<
  ResourceRemoteInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  aws_account: z.lazy(() => AwsAccount$inboundSchema).optional(),
  aws_permission_set: z.lazy(() => AwsPermissionSet$inboundSchema).optional(),
  aws_iam_role: z.lazy(() => AwsIamRole$inboundSchema).optional(),
  aws_ec2_instance: z.lazy(() => AwsEc2Instance$inboundSchema).optional(),
  aws_rds_instance: z.lazy(() => AwsRdsInstance$inboundSchema).optional(),
  aws_eks_cluster: z.lazy(() => AwsEksCluster$inboundSchema).optional(),
  gcp_organization: z.lazy(() => GcpOrganization$inboundSchema).optional(),
  gcp_bucket: z.lazy(() => GcpBucket$inboundSchema).optional(),
  gcp_compute_instance: z.lazy(() => GcpComputeInstance$inboundSchema)
    .optional(),
  gcp_big_query_dataset: z.lazy(() => GcpBigQueryDataset$inboundSchema)
    .optional(),
  gcp_big_query_table: z.lazy(() => GcpBigQueryTable$inboundSchema).optional(),
  gcp_folder: z.lazy(() => GcpFolder$inboundSchema).optional(),
  gcp_gke_cluster: z.lazy(() => GcpGkeCluster$inboundSchema).optional(),
  gcp_project: z.lazy(() => GcpProject$inboundSchema).optional(),
  gcp_sql_instance: z.lazy(() => GcpSqlInstance$inboundSchema).optional(),
  gcp_service_account: z.lazy(() => GcpServiceAccount$inboundSchema).optional(),
  github_repo: z.lazy(() => GithubRepo$inboundSchema).optional(),
  gitlab_project: z.lazy(() => GitlabProject$inboundSchema).optional(),
  okta_app: z.lazy(() => OktaApp$inboundSchema).optional(),
  okta_standard_role: z.lazy(() => OktaStandardRole$inboundSchema).optional(),
  okta_custom_role: z.lazy(() => OktaCustomRole$inboundSchema).optional(),
  pagerduty_role: z.lazy(() => PagerdutyRole$inboundSchema).optional(),
  salesforce_permission_set: z.lazy(() => SalesforcePermissionSet$inboundSchema)
    .optional(),
  salesforce_profile: z.lazy(() => SalesforceProfile$inboundSchema).optional(),
  salesforce_role: z.lazy(() => SalesforceRole$inboundSchema).optional(),
  teleport_role: z.lazy(() => TeleportRole$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "aws_account": "awsAccount",
    "aws_permission_set": "awsPermissionSet",
    "aws_iam_role": "awsIamRole",
    "aws_ec2_instance": "awsEc2Instance",
    "aws_rds_instance": "awsRdsInstance",
    "aws_eks_cluster": "awsEksCluster",
    "gcp_organization": "gcpOrganization",
    "gcp_bucket": "gcpBucket",
    "gcp_compute_instance": "gcpComputeInstance",
    "gcp_big_query_dataset": "gcpBigQueryDataset",
    "gcp_big_query_table": "gcpBigQueryTable",
    "gcp_folder": "gcpFolder",
    "gcp_gke_cluster": "gcpGkeCluster",
    "gcp_project": "gcpProject",
    "gcp_sql_instance": "gcpSqlInstance",
    "gcp_service_account": "gcpServiceAccount",
    "github_repo": "githubRepo",
    "gitlab_project": "gitlabProject",
    "okta_app": "oktaApp",
    "okta_standard_role": "oktaStandardRole",
    "okta_custom_role": "oktaCustomRole",
    "pagerduty_role": "pagerdutyRole",
    "salesforce_permission_set": "salesforcePermissionSet",
    "salesforce_profile": "salesforceProfile",
    "salesforce_role": "salesforceRole",
    "teleport_role": "teleportRole",
  });
});

/** @internal */
export type ResourceRemoteInfo$Outbound = {
  aws_account?: AwsAccount$Outbound | undefined;
  aws_permission_set?: AwsPermissionSet$Outbound | undefined;
  aws_iam_role?: AwsIamRole$Outbound | undefined;
  aws_ec2_instance?: AwsEc2Instance$Outbound | undefined;
  aws_rds_instance?: AwsRdsInstance$Outbound | undefined;
  aws_eks_cluster?: AwsEksCluster$Outbound | undefined;
  gcp_organization?: GcpOrganization$Outbound | undefined;
  gcp_bucket?: GcpBucket$Outbound | undefined;
  gcp_compute_instance?: GcpComputeInstance$Outbound | undefined;
  gcp_big_query_dataset?: GcpBigQueryDataset$Outbound | undefined;
  gcp_big_query_table?: GcpBigQueryTable$Outbound | undefined;
  gcp_folder?: GcpFolder$Outbound | undefined;
  gcp_gke_cluster?: GcpGkeCluster$Outbound | undefined;
  gcp_project?: GcpProject$Outbound | undefined;
  gcp_sql_instance?: GcpSqlInstance$Outbound | undefined;
  gcp_service_account?: GcpServiceAccount$Outbound | undefined;
  github_repo?: GithubRepo$Outbound | undefined;
  gitlab_project?: GitlabProject$Outbound | undefined;
  okta_app?: OktaApp$Outbound | undefined;
  okta_standard_role?: OktaStandardRole$Outbound | undefined;
  okta_custom_role?: OktaCustomRole$Outbound | undefined;
  pagerduty_role?: PagerdutyRole$Outbound | undefined;
  salesforce_permission_set?: SalesforcePermissionSet$Outbound | undefined;
  salesforce_profile?: SalesforceProfile$Outbound | undefined;
  salesforce_role?: SalesforceRole$Outbound | undefined;
  teleport_role?: TeleportRole$Outbound | undefined;
};

/** @internal */
export const ResourceRemoteInfo$outboundSchema: z.ZodType<
  ResourceRemoteInfo$Outbound,
  z.ZodTypeDef,
  ResourceRemoteInfo
> = z.object({
  awsAccount: z.lazy(() => AwsAccount$outboundSchema).optional(),
  awsPermissionSet: z.lazy(() => AwsPermissionSet$outboundSchema).optional(),
  awsIamRole: z.lazy(() => AwsIamRole$outboundSchema).optional(),
  awsEc2Instance: z.lazy(() => AwsEc2Instance$outboundSchema).optional(),
  awsRdsInstance: z.lazy(() => AwsRdsInstance$outboundSchema).optional(),
  awsEksCluster: z.lazy(() => AwsEksCluster$outboundSchema).optional(),
  gcpOrganization: z.lazy(() => GcpOrganization$outboundSchema).optional(),
  gcpBucket: z.lazy(() => GcpBucket$outboundSchema).optional(),
  gcpComputeInstance: z.lazy(() => GcpComputeInstance$outboundSchema)
    .optional(),
  gcpBigQueryDataset: z.lazy(() => GcpBigQueryDataset$outboundSchema)
    .optional(),
  gcpBigQueryTable: z.lazy(() => GcpBigQueryTable$outboundSchema).optional(),
  gcpFolder: z.lazy(() => GcpFolder$outboundSchema).optional(),
  gcpGkeCluster: z.lazy(() => GcpGkeCluster$outboundSchema).optional(),
  gcpProject: z.lazy(() => GcpProject$outboundSchema).optional(),
  gcpSqlInstance: z.lazy(() => GcpSqlInstance$outboundSchema).optional(),
  gcpServiceAccount: z.lazy(() => GcpServiceAccount$outboundSchema).optional(),
  githubRepo: z.lazy(() => GithubRepo$outboundSchema).optional(),
  gitlabProject: z.lazy(() => GitlabProject$outboundSchema).optional(),
  oktaApp: z.lazy(() => OktaApp$outboundSchema).optional(),
  oktaStandardRole: z.lazy(() => OktaStandardRole$outboundSchema).optional(),
  oktaCustomRole: z.lazy(() => OktaCustomRole$outboundSchema).optional(),
  pagerdutyRole: z.lazy(() => PagerdutyRole$outboundSchema).optional(),
  salesforcePermissionSet: z.lazy(() => SalesforcePermissionSet$outboundSchema)
    .optional(),
  salesforceProfile: z.lazy(() => SalesforceProfile$outboundSchema).optional(),
  salesforceRole: z.lazy(() => SalesforceRole$outboundSchema).optional(),
  teleportRole: z.lazy(() => TeleportRole$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    awsAccount: "aws_account",
    awsPermissionSet: "aws_permission_set",
    awsIamRole: "aws_iam_role",
    awsEc2Instance: "aws_ec2_instance",
    awsRdsInstance: "aws_rds_instance",
    awsEksCluster: "aws_eks_cluster",
    gcpOrganization: "gcp_organization",
    gcpBucket: "gcp_bucket",
    gcpComputeInstance: "gcp_compute_instance",
    gcpBigQueryDataset: "gcp_big_query_dataset",
    gcpBigQueryTable: "gcp_big_query_table",
    gcpFolder: "gcp_folder",
    gcpGkeCluster: "gcp_gke_cluster",
    gcpProject: "gcp_project",
    gcpSqlInstance: "gcp_sql_instance",
    gcpServiceAccount: "gcp_service_account",
    githubRepo: "github_repo",
    gitlabProject: "gitlab_project",
    oktaApp: "okta_app",
    oktaStandardRole: "okta_standard_role",
    oktaCustomRole: "okta_custom_role",
    pagerdutyRole: "pagerduty_role",
    salesforcePermissionSet: "salesforce_permission_set",
    salesforceProfile: "salesforce_profile",
    salesforceRole: "salesforce_role",
    teleportRole: "teleport_role",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceRemoteInfo$ {
  /** @deprecated use `ResourceRemoteInfo$inboundSchema` instead. */
  export const inboundSchema = ResourceRemoteInfo$inboundSchema;
  /** @deprecated use `ResourceRemoteInfo$outboundSchema` instead. */
  export const outboundSchema = ResourceRemoteInfo$outboundSchema;
  /** @deprecated use `ResourceRemoteInfo$Outbound` instead. */
  export type Outbound = ResourceRemoteInfo$Outbound;
}

export function resourceRemoteInfoToJSON(
  resourceRemoteInfo: ResourceRemoteInfo,
): string {
  return JSON.stringify(
    ResourceRemoteInfo$outboundSchema.parse(resourceRemoteInfo),
  );
}

export function resourceRemoteInfoFromJSON(
  jsonString: string,
): SafeParseResult<ResourceRemoteInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceRemoteInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceRemoteInfo' from JSON`,
  );
}
