/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # Owner Object
 *
 * @remarks
 * ### Description
 * The `Owner` object is used to represent an owner.
 */
export type Owner = {
  /**
   * The ID of the owner.
   */
  ownerId: string;
  /**
   * The name of the owner.
   */
  name?: string | undefined;
  /**
   * A description of the owner.
   */
  description?: string | undefined;
  /**
   * The amount of time (in minutes) before the next reviewer is notified. Use 0 to remove escalation policy.
   */
  accessRequestEscalationPeriod?: number | undefined;
  reviewerMessageChannelId?: string | null | undefined;
  sourceGroupId?: string | null | undefined;
};

/** @internal */
export const Owner$inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown> = z
  .object({
    owner_id: z.string(),
    name: z.string().optional(),
    description: z.string().optional(),
    access_request_escalation_period: z.number().int().optional(),
    reviewer_message_channel_id: z.nullable(z.string()).optional(),
    source_group_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "owner_id": "ownerId",
      "access_request_escalation_period": "accessRequestEscalationPeriod",
      "reviewer_message_channel_id": "reviewerMessageChannelId",
      "source_group_id": "sourceGroupId",
    });
  });

/** @internal */
export type Owner$Outbound = {
  owner_id: string;
  name?: string | undefined;
  description?: string | undefined;
  access_request_escalation_period?: number | undefined;
  reviewer_message_channel_id?: string | null | undefined;
  source_group_id?: string | null | undefined;
};

/** @internal */
export const Owner$outboundSchema: z.ZodType<
  Owner$Outbound,
  z.ZodTypeDef,
  Owner
> = z.object({
  ownerId: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  accessRequestEscalationPeriod: z.number().int().optional(),
  reviewerMessageChannelId: z.nullable(z.string()).optional(),
  sourceGroupId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    accessRequestEscalationPeriod: "access_request_escalation_period",
    reviewerMessageChannelId: "reviewer_message_channel_id",
    sourceGroupId: "source_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner$ {
  /** @deprecated use `Owner$inboundSchema` instead. */
  export const inboundSchema = Owner$inboundSchema;
  /** @deprecated use `Owner$outboundSchema` instead. */
  export const outboundSchema = Owner$outboundSchema;
  /** @deprecated use `Owner$Outbound` instead. */
  export type Outbound = Owner$Outbound;
}

export function ownerToJSON(owner: Owner): string {
  return JSON.stringify(Owner$outboundSchema.parse(owner));
}

export function ownerFromJSON(
  jsonString: string,
): SafeParseResult<Owner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Owner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Owner' from JSON`,
  );
}
