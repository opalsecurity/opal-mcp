/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A list of message channel IDs.
 */
export type MessageChannelIDList = {
  messageChannelIds: Array<string>;
};

/** @internal */
export const MessageChannelIDList$inboundSchema: z.ZodType<
  MessageChannelIDList,
  z.ZodTypeDef,
  unknown
> = z.object({
  message_channel_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "message_channel_ids": "messageChannelIds",
  });
});

/** @internal */
export type MessageChannelIDList$Outbound = {
  message_channel_ids: Array<string>;
};

/** @internal */
export const MessageChannelIDList$outboundSchema: z.ZodType<
  MessageChannelIDList$Outbound,
  z.ZodTypeDef,
  MessageChannelIDList
> = z.object({
  messageChannelIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    messageChannelIds: "message_channel_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageChannelIDList$ {
  /** @deprecated use `MessageChannelIDList$inboundSchema` instead. */
  export const inboundSchema = MessageChannelIDList$inboundSchema;
  /** @deprecated use `MessageChannelIDList$outboundSchema` instead. */
  export const outboundSchema = MessageChannelIDList$outboundSchema;
  /** @deprecated use `MessageChannelIDList$Outbound` instead. */
  export type Outbound = MessageChannelIDList$Outbound;
}

export function messageChannelIDListToJSON(
  messageChannelIDList: MessageChannelIDList,
): string {
  return JSON.stringify(
    MessageChannelIDList$outboundSchema.parse(messageChannelIDList),
  );
}

export function messageChannelIDListFromJSON(
  jsonString: string,
): SafeParseResult<MessageChannelIDList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageChannelIDList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageChannelIDList' from JSON`,
  );
}
