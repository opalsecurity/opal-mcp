/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GroupTypeEnum,
  GroupTypeEnum$inboundSchema,
  GroupTypeEnum$outboundSchema,
} from "./grouptypeenum.js";

/**
 * # Group Binding Group Object
 *
 * @remarks
 * ### Description
 * The `GroupBindingGroup` object is used to represent a group binding group.
 *
 * ### Usage Example
 * Get group binding groups from the `GET Group Bindings` endpoint.
 */
export type GroupBindingGroup = {
  /**
   * The ID of the group.
   */
  groupId: string;
  /**
   * The type of the group.
   */
  groupType: GroupTypeEnum;
};

/** @internal */
export const GroupBindingGroup$inboundSchema: z.ZodType<
  GroupBindingGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  group_type: GroupTypeEnum$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "group_type": "groupType",
  });
});

/** @internal */
export type GroupBindingGroup$Outbound = {
  group_id: string;
  group_type: string;
};

/** @internal */
export const GroupBindingGroup$outboundSchema: z.ZodType<
  GroupBindingGroup$Outbound,
  z.ZodTypeDef,
  GroupBindingGroup
> = z.object({
  groupId: z.string(),
  groupType: GroupTypeEnum$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    groupType: "group_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupBindingGroup$ {
  /** @deprecated use `GroupBindingGroup$inboundSchema` instead. */
  export const inboundSchema = GroupBindingGroup$inboundSchema;
  /** @deprecated use `GroupBindingGroup$outboundSchema` instead. */
  export const outboundSchema = GroupBindingGroup$outboundSchema;
  /** @deprecated use `GroupBindingGroup$Outbound` instead. */
  export type Outbound = GroupBindingGroup$Outbound;
}

export function groupBindingGroupToJSON(
  groupBindingGroup: GroupBindingGroup,
): string {
  return JSON.stringify(
    GroupBindingGroup$outboundSchema.parse(groupBindingGroup),
  );
}

export function groupBindingGroupFromJSON(
  jsonString: string,
): SafeParseResult<GroupBindingGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupBindingGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupBindingGroup' from JSON`,
  );
}
