/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RolePermissionNameEnum,
  RolePermissionNameEnum$inboundSchema,
  RolePermissionNameEnum$outboundSchema,
} from "./rolepermissionnameenum.js";
import {
  RolePermissionTargetTypeEnum,
  RolePermissionTargetTypeEnum$inboundSchema,
  RolePermissionTargetTypeEnum$outboundSchema,
} from "./rolepermissiontargettypeenum.js";

export type ScopedRolePermission = {
  /**
   * The IDs of the entities that this permission applies to. If empty of missing, the permission will have untargeted scope.
   */
  targetIds?: Array<string> | undefined;
  /**
   * The type of the target for the role permission.
   */
  targetType: RolePermissionTargetTypeEnum;
  /**
   * The name of the role permission.
   */
  permissionName: RolePermissionNameEnum;
  allowAll: boolean;
};

/** @internal */
export const ScopedRolePermission$inboundSchema: z.ZodType<
  ScopedRolePermission,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_ids: z.array(z.string()).optional(),
  target_type: RolePermissionTargetTypeEnum$inboundSchema,
  permission_name: RolePermissionNameEnum$inboundSchema,
  allow_all: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "target_ids": "targetIds",
    "target_type": "targetType",
    "permission_name": "permissionName",
    "allow_all": "allowAll",
  });
});

/** @internal */
export type ScopedRolePermission$Outbound = {
  target_ids?: Array<string> | undefined;
  target_type: string;
  permission_name: string;
  allow_all: boolean;
};

/** @internal */
export const ScopedRolePermission$outboundSchema: z.ZodType<
  ScopedRolePermission$Outbound,
  z.ZodTypeDef,
  ScopedRolePermission
> = z.object({
  targetIds: z.array(z.string()).optional(),
  targetType: RolePermissionTargetTypeEnum$outboundSchema,
  permissionName: RolePermissionNameEnum$outboundSchema,
  allowAll: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    targetIds: "target_ids",
    targetType: "target_type",
    permissionName: "permission_name",
    allowAll: "allow_all",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScopedRolePermission$ {
  /** @deprecated use `ScopedRolePermission$inboundSchema` instead. */
  export const inboundSchema = ScopedRolePermission$inboundSchema;
  /** @deprecated use `ScopedRolePermission$outboundSchema` instead. */
  export const outboundSchema = ScopedRolePermission$outboundSchema;
  /** @deprecated use `ScopedRolePermission$Outbound` instead. */
  export type Outbound = ScopedRolePermission$Outbound;
}

export function scopedRolePermissionToJSON(
  scopedRolePermission: ScopedRolePermission,
): string {
  return JSON.stringify(
    ScopedRolePermission$outboundSchema.parse(scopedRolePermission),
  );
}

export function scopedRolePermissionFromJSON(
  jsonString: string,
): SafeParseResult<ScopedRolePermission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScopedRolePermission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScopedRolePermission' from JSON`,
  );
}
