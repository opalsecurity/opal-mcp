/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # CreateTagInfo Object
 *
 * @remarks
 * ### Description
 * The `CreateTagInfo` object is used to represent configuration for a new tag.
 *
 * ### Usage Example
 * Use in the `POST Tag` endpoint.
 */
export type CreateTagInfo = {
  /**
   * The key of the tag to create.
   */
  tagKey: string;
  /**
   * The value of the tag to create.
   */
  tagValue?: string | undefined;
};

/** @internal */
export const CreateTagInfo$inboundSchema: z.ZodType<
  CreateTagInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag_key: z.string(),
  tag_value: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tag_key": "tagKey",
    "tag_value": "tagValue",
  });
});

/** @internal */
export type CreateTagInfo$Outbound = {
  tag_key: string;
  tag_value?: string | undefined;
};

/** @internal */
export const CreateTagInfo$outboundSchema: z.ZodType<
  CreateTagInfo$Outbound,
  z.ZodTypeDef,
  CreateTagInfo
> = z.object({
  tagKey: z.string(),
  tagValue: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tagKey: "tag_key",
    tagValue: "tag_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTagInfo$ {
  /** @deprecated use `CreateTagInfo$inboundSchema` instead. */
  export const inboundSchema = CreateTagInfo$inboundSchema;
  /** @deprecated use `CreateTagInfo$outboundSchema` instead. */
  export const outboundSchema = CreateTagInfo$outboundSchema;
  /** @deprecated use `CreateTagInfo$Outbound` instead. */
  export type Outbound = CreateTagInfo$Outbound;
}

export function createTagInfoToJSON(createTagInfo: CreateTagInfo): string {
  return JSON.stringify(CreateTagInfo$outboundSchema.parse(createTagInfo));
}

export function createTagInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateTagInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTagInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTagInfo' from JSON`,
  );
}
