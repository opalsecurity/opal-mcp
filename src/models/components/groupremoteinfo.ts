/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Remote info for Active Directory group.
 */
export type ActiveDirectoryGroup = {
  /**
   * The id of the Google group.
   */
  groupId: string;
};

/**
 * Remote info for GitHub team.
 */
export type GithubTeam = {
  /**
   * The id of the GitHub team.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  teamId?: string | undefined;
  /**
   * The slug of the GitHub team.
   */
  teamSlug: string;
};

/**
 * Remote info for Gitlab group.
 */
export type GitlabGroup = {
  /**
   * The id of the Gitlab group.
   */
  groupId: string;
};

/**
 * Remote info for Google group.
 */
export type GoogleGroup = {
  /**
   * The id of the Google group.
   */
  groupId: string;
};

/**
 * Remote info for LDAP group.
 */
export type LdapGroup = {
  /**
   * The id of the LDAP group.
   */
  groupId: string;
};

/**
 * Remote info for Okta Directory group.
 */
export type OktaGroup = {
  /**
   * The id of the Okta Directory group.
   */
  groupId: string;
};

/**
 * Remote info for Duo Security group.
 */
export type DuoGroup = {
  /**
   * The id of the Duo Security group.
   */
  groupId: string;
};

/**
 * Remote info for Microsoft Entra ID Security group.
 */
export type AzureAdSecurityGroup = {
  /**
   * The id of the Microsoft Entra ID Security group.
   */
  groupId: string;
};

/**
 * Remote info for Microsoft Entra ID Microsoft 365 group.
 */
export type AzureAdMicrosoft365Group = {
  /**
   * The id of the Microsoft Entra ID Microsoft 365 group.
   */
  groupId: string;
};

/**
 * Remote info for Snowflake role.
 */
export type SnowflakeRole = {
  /**
   * The id of the Snowflake role.
   */
  roleId: string;
};

/**
 * Information that defines the remote group. This replaces the deprecated remote_id and metadata fields.
 */
export type GroupRemoteInfo = {
  /**
   * Remote info for Active Directory group.
   */
  activeDirectoryGroup?: ActiveDirectoryGroup | undefined;
  /**
   * Remote info for GitHub team.
   */
  githubTeam?: GithubTeam | undefined;
  /**
   * Remote info for Gitlab group.
   */
  gitlabGroup?: GitlabGroup | undefined;
  /**
   * Remote info for Google group.
   */
  googleGroup?: GoogleGroup | undefined;
  /**
   * Remote info for LDAP group.
   */
  ldapGroup?: LdapGroup | undefined;
  /**
   * Remote info for Okta Directory group.
   */
  oktaGroup?: OktaGroup | undefined;
  /**
   * Remote info for Duo Security group.
   */
  duoGroup?: DuoGroup | undefined;
  /**
   * Remote info for Microsoft Entra ID Security group.
   */
  azureAdSecurityGroup?: AzureAdSecurityGroup | undefined;
  /**
   * Remote info for Microsoft Entra ID Microsoft 365 group.
   */
  azureAdMicrosoft365Group?: AzureAdMicrosoft365Group | undefined;
  /**
   * Remote info for Snowflake role.
   */
  snowflakeRole?: SnowflakeRole | undefined;
};

/** @internal */
export const ActiveDirectoryGroup$inboundSchema: z.ZodType<
  ActiveDirectoryGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type ActiveDirectoryGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const ActiveDirectoryGroup$outboundSchema: z.ZodType<
  ActiveDirectoryGroup$Outbound,
  z.ZodTypeDef,
  ActiveDirectoryGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActiveDirectoryGroup$ {
  /** @deprecated use `ActiveDirectoryGroup$inboundSchema` instead. */
  export const inboundSchema = ActiveDirectoryGroup$inboundSchema;
  /** @deprecated use `ActiveDirectoryGroup$outboundSchema` instead. */
  export const outboundSchema = ActiveDirectoryGroup$outboundSchema;
  /** @deprecated use `ActiveDirectoryGroup$Outbound` instead. */
  export type Outbound = ActiveDirectoryGroup$Outbound;
}

export function activeDirectoryGroupToJSON(
  activeDirectoryGroup: ActiveDirectoryGroup,
): string {
  return JSON.stringify(
    ActiveDirectoryGroup$outboundSchema.parse(activeDirectoryGroup),
  );
}

export function activeDirectoryGroupFromJSON(
  jsonString: string,
): SafeParseResult<ActiveDirectoryGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActiveDirectoryGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActiveDirectoryGroup' from JSON`,
  );
}

/** @internal */
export const GithubTeam$inboundSchema: z.ZodType<
  GithubTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  team_id: z.string().optional(),
  team_slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "team_slug": "teamSlug",
  });
});

/** @internal */
export type GithubTeam$Outbound = {
  team_id?: string | undefined;
  team_slug: string;
};

/** @internal */
export const GithubTeam$outboundSchema: z.ZodType<
  GithubTeam$Outbound,
  z.ZodTypeDef,
  GithubTeam
> = z.object({
  teamId: z.string().optional(),
  teamSlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    teamSlug: "team_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubTeam$ {
  /** @deprecated use `GithubTeam$inboundSchema` instead. */
  export const inboundSchema = GithubTeam$inboundSchema;
  /** @deprecated use `GithubTeam$outboundSchema` instead. */
  export const outboundSchema = GithubTeam$outboundSchema;
  /** @deprecated use `GithubTeam$Outbound` instead. */
  export type Outbound = GithubTeam$Outbound;
}

export function githubTeamToJSON(githubTeam: GithubTeam): string {
  return JSON.stringify(GithubTeam$outboundSchema.parse(githubTeam));
}

export function githubTeamFromJSON(
  jsonString: string,
): SafeParseResult<GithubTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubTeam' from JSON`,
  );
}

/** @internal */
export const GitlabGroup$inboundSchema: z.ZodType<
  GitlabGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type GitlabGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const GitlabGroup$outboundSchema: z.ZodType<
  GitlabGroup$Outbound,
  z.ZodTypeDef,
  GitlabGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabGroup$ {
  /** @deprecated use `GitlabGroup$inboundSchema` instead. */
  export const inboundSchema = GitlabGroup$inboundSchema;
  /** @deprecated use `GitlabGroup$outboundSchema` instead. */
  export const outboundSchema = GitlabGroup$outboundSchema;
  /** @deprecated use `GitlabGroup$Outbound` instead. */
  export type Outbound = GitlabGroup$Outbound;
}

export function gitlabGroupToJSON(gitlabGroup: GitlabGroup): string {
  return JSON.stringify(GitlabGroup$outboundSchema.parse(gitlabGroup));
}

export function gitlabGroupFromJSON(
  jsonString: string,
): SafeParseResult<GitlabGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabGroup' from JSON`,
  );
}

/** @internal */
export const GoogleGroup$inboundSchema: z.ZodType<
  GoogleGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type GoogleGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const GoogleGroup$outboundSchema: z.ZodType<
  GoogleGroup$Outbound,
  z.ZodTypeDef,
  GoogleGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleGroup$ {
  /** @deprecated use `GoogleGroup$inboundSchema` instead. */
  export const inboundSchema = GoogleGroup$inboundSchema;
  /** @deprecated use `GoogleGroup$outboundSchema` instead. */
  export const outboundSchema = GoogleGroup$outboundSchema;
  /** @deprecated use `GoogleGroup$Outbound` instead. */
  export type Outbound = GoogleGroup$Outbound;
}

export function googleGroupToJSON(googleGroup: GoogleGroup): string {
  return JSON.stringify(GoogleGroup$outboundSchema.parse(googleGroup));
}

export function googleGroupFromJSON(
  jsonString: string,
): SafeParseResult<GoogleGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleGroup' from JSON`,
  );
}

/** @internal */
export const LdapGroup$inboundSchema: z.ZodType<
  LdapGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type LdapGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const LdapGroup$outboundSchema: z.ZodType<
  LdapGroup$Outbound,
  z.ZodTypeDef,
  LdapGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LdapGroup$ {
  /** @deprecated use `LdapGroup$inboundSchema` instead. */
  export const inboundSchema = LdapGroup$inboundSchema;
  /** @deprecated use `LdapGroup$outboundSchema` instead. */
  export const outboundSchema = LdapGroup$outboundSchema;
  /** @deprecated use `LdapGroup$Outbound` instead. */
  export type Outbound = LdapGroup$Outbound;
}

export function ldapGroupToJSON(ldapGroup: LdapGroup): string {
  return JSON.stringify(LdapGroup$outboundSchema.parse(ldapGroup));
}

export function ldapGroupFromJSON(
  jsonString: string,
): SafeParseResult<LdapGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LdapGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LdapGroup' from JSON`,
  );
}

/** @internal */
export const OktaGroup$inboundSchema: z.ZodType<
  OktaGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type OktaGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const OktaGroup$outboundSchema: z.ZodType<
  OktaGroup$Outbound,
  z.ZodTypeDef,
  OktaGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OktaGroup$ {
  /** @deprecated use `OktaGroup$inboundSchema` instead. */
  export const inboundSchema = OktaGroup$inboundSchema;
  /** @deprecated use `OktaGroup$outboundSchema` instead. */
  export const outboundSchema = OktaGroup$outboundSchema;
  /** @deprecated use `OktaGroup$Outbound` instead. */
  export type Outbound = OktaGroup$Outbound;
}

export function oktaGroupToJSON(oktaGroup: OktaGroup): string {
  return JSON.stringify(OktaGroup$outboundSchema.parse(oktaGroup));
}

export function oktaGroupFromJSON(
  jsonString: string,
): SafeParseResult<OktaGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OktaGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OktaGroup' from JSON`,
  );
}

/** @internal */
export const DuoGroup$inboundSchema: z.ZodType<
  DuoGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type DuoGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const DuoGroup$outboundSchema: z.ZodType<
  DuoGroup$Outbound,
  z.ZodTypeDef,
  DuoGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DuoGroup$ {
  /** @deprecated use `DuoGroup$inboundSchema` instead. */
  export const inboundSchema = DuoGroup$inboundSchema;
  /** @deprecated use `DuoGroup$outboundSchema` instead. */
  export const outboundSchema = DuoGroup$outboundSchema;
  /** @deprecated use `DuoGroup$Outbound` instead. */
  export type Outbound = DuoGroup$Outbound;
}

export function duoGroupToJSON(duoGroup: DuoGroup): string {
  return JSON.stringify(DuoGroup$outboundSchema.parse(duoGroup));
}

export function duoGroupFromJSON(
  jsonString: string,
): SafeParseResult<DuoGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DuoGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DuoGroup' from JSON`,
  );
}

/** @internal */
export const AzureAdSecurityGroup$inboundSchema: z.ZodType<
  AzureAdSecurityGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type AzureAdSecurityGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const AzureAdSecurityGroup$outboundSchema: z.ZodType<
  AzureAdSecurityGroup$Outbound,
  z.ZodTypeDef,
  AzureAdSecurityGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AzureAdSecurityGroup$ {
  /** @deprecated use `AzureAdSecurityGroup$inboundSchema` instead. */
  export const inboundSchema = AzureAdSecurityGroup$inboundSchema;
  /** @deprecated use `AzureAdSecurityGroup$outboundSchema` instead. */
  export const outboundSchema = AzureAdSecurityGroup$outboundSchema;
  /** @deprecated use `AzureAdSecurityGroup$Outbound` instead. */
  export type Outbound = AzureAdSecurityGroup$Outbound;
}

export function azureAdSecurityGroupToJSON(
  azureAdSecurityGroup: AzureAdSecurityGroup,
): string {
  return JSON.stringify(
    AzureAdSecurityGroup$outboundSchema.parse(azureAdSecurityGroup),
  );
}

export function azureAdSecurityGroupFromJSON(
  jsonString: string,
): SafeParseResult<AzureAdSecurityGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AzureAdSecurityGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AzureAdSecurityGroup' from JSON`,
  );
}

/** @internal */
export const AzureAdMicrosoft365Group$inboundSchema: z.ZodType<
  AzureAdMicrosoft365Group,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type AzureAdMicrosoft365Group$Outbound = {
  group_id: string;
};

/** @internal */
export const AzureAdMicrosoft365Group$outboundSchema: z.ZodType<
  AzureAdMicrosoft365Group$Outbound,
  z.ZodTypeDef,
  AzureAdMicrosoft365Group
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AzureAdMicrosoft365Group$ {
  /** @deprecated use `AzureAdMicrosoft365Group$inboundSchema` instead. */
  export const inboundSchema = AzureAdMicrosoft365Group$inboundSchema;
  /** @deprecated use `AzureAdMicrosoft365Group$outboundSchema` instead. */
  export const outboundSchema = AzureAdMicrosoft365Group$outboundSchema;
  /** @deprecated use `AzureAdMicrosoft365Group$Outbound` instead. */
  export type Outbound = AzureAdMicrosoft365Group$Outbound;
}

export function azureAdMicrosoft365GroupToJSON(
  azureAdMicrosoft365Group: AzureAdMicrosoft365Group,
): string {
  return JSON.stringify(
    AzureAdMicrosoft365Group$outboundSchema.parse(azureAdMicrosoft365Group),
  );
}

export function azureAdMicrosoft365GroupFromJSON(
  jsonString: string,
): SafeParseResult<AzureAdMicrosoft365Group, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AzureAdMicrosoft365Group$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AzureAdMicrosoft365Group' from JSON`,
  );
}

/** @internal */
export const SnowflakeRole$inboundSchema: z.ZodType<
  SnowflakeRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "role_id": "roleId",
  });
});

/** @internal */
export type SnowflakeRole$Outbound = {
  role_id: string;
};

/** @internal */
export const SnowflakeRole$outboundSchema: z.ZodType<
  SnowflakeRole$Outbound,
  z.ZodTypeDef,
  SnowflakeRole
> = z.object({
  roleId: z.string(),
}).transform((v) => {
  return remap$(v, {
    roleId: "role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnowflakeRole$ {
  /** @deprecated use `SnowflakeRole$inboundSchema` instead. */
  export const inboundSchema = SnowflakeRole$inboundSchema;
  /** @deprecated use `SnowflakeRole$outboundSchema` instead. */
  export const outboundSchema = SnowflakeRole$outboundSchema;
  /** @deprecated use `SnowflakeRole$Outbound` instead. */
  export type Outbound = SnowflakeRole$Outbound;
}

export function snowflakeRoleToJSON(snowflakeRole: SnowflakeRole): string {
  return JSON.stringify(SnowflakeRole$outboundSchema.parse(snowflakeRole));
}

export function snowflakeRoleFromJSON(
  jsonString: string,
): SafeParseResult<SnowflakeRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnowflakeRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnowflakeRole' from JSON`,
  );
}

/** @internal */
export const GroupRemoteInfo$inboundSchema: z.ZodType<
  GroupRemoteInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  active_directory_group: z.lazy(() => ActiveDirectoryGroup$inboundSchema)
    .optional(),
  github_team: z.lazy(() => GithubTeam$inboundSchema).optional(),
  gitlab_group: z.lazy(() => GitlabGroup$inboundSchema).optional(),
  google_group: z.lazy(() => GoogleGroup$inboundSchema).optional(),
  ldap_group: z.lazy(() => LdapGroup$inboundSchema).optional(),
  okta_group: z.lazy(() => OktaGroup$inboundSchema).optional(),
  duo_group: z.lazy(() => DuoGroup$inboundSchema).optional(),
  azure_ad_security_group: z.lazy(() => AzureAdSecurityGroup$inboundSchema)
    .optional(),
  azure_ad_microsoft_365_group: z.lazy(() =>
    AzureAdMicrosoft365Group$inboundSchema
  ).optional(),
  snowflake_role: z.lazy(() => SnowflakeRole$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "active_directory_group": "activeDirectoryGroup",
    "github_team": "githubTeam",
    "gitlab_group": "gitlabGroup",
    "google_group": "googleGroup",
    "ldap_group": "ldapGroup",
    "okta_group": "oktaGroup",
    "duo_group": "duoGroup",
    "azure_ad_security_group": "azureAdSecurityGroup",
    "azure_ad_microsoft_365_group": "azureAdMicrosoft365Group",
    "snowflake_role": "snowflakeRole",
  });
});

/** @internal */
export type GroupRemoteInfo$Outbound = {
  active_directory_group?: ActiveDirectoryGroup$Outbound | undefined;
  github_team?: GithubTeam$Outbound | undefined;
  gitlab_group?: GitlabGroup$Outbound | undefined;
  google_group?: GoogleGroup$Outbound | undefined;
  ldap_group?: LdapGroup$Outbound | undefined;
  okta_group?: OktaGroup$Outbound | undefined;
  duo_group?: DuoGroup$Outbound | undefined;
  azure_ad_security_group?: AzureAdSecurityGroup$Outbound | undefined;
  azure_ad_microsoft_365_group?: AzureAdMicrosoft365Group$Outbound | undefined;
  snowflake_role?: SnowflakeRole$Outbound | undefined;
};

/** @internal */
export const GroupRemoteInfo$outboundSchema: z.ZodType<
  GroupRemoteInfo$Outbound,
  z.ZodTypeDef,
  GroupRemoteInfo
> = z.object({
  activeDirectoryGroup: z.lazy(() => ActiveDirectoryGroup$outboundSchema)
    .optional(),
  githubTeam: z.lazy(() => GithubTeam$outboundSchema).optional(),
  gitlabGroup: z.lazy(() => GitlabGroup$outboundSchema).optional(),
  googleGroup: z.lazy(() => GoogleGroup$outboundSchema).optional(),
  ldapGroup: z.lazy(() => LdapGroup$outboundSchema).optional(),
  oktaGroup: z.lazy(() => OktaGroup$outboundSchema).optional(),
  duoGroup: z.lazy(() => DuoGroup$outboundSchema).optional(),
  azureAdSecurityGroup: z.lazy(() => AzureAdSecurityGroup$outboundSchema)
    .optional(),
  azureAdMicrosoft365Group: z.lazy(() =>
    AzureAdMicrosoft365Group$outboundSchema
  ).optional(),
  snowflakeRole: z.lazy(() => SnowflakeRole$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    activeDirectoryGroup: "active_directory_group",
    githubTeam: "github_team",
    gitlabGroup: "gitlab_group",
    googleGroup: "google_group",
    ldapGroup: "ldap_group",
    oktaGroup: "okta_group",
    duoGroup: "duo_group",
    azureAdSecurityGroup: "azure_ad_security_group",
    azureAdMicrosoft365Group: "azure_ad_microsoft_365_group",
    snowflakeRole: "snowflake_role",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupRemoteInfo$ {
  /** @deprecated use `GroupRemoteInfo$inboundSchema` instead. */
  export const inboundSchema = GroupRemoteInfo$inboundSchema;
  /** @deprecated use `GroupRemoteInfo$outboundSchema` instead. */
  export const outboundSchema = GroupRemoteInfo$outboundSchema;
  /** @deprecated use `GroupRemoteInfo$Outbound` instead. */
  export type Outbound = GroupRemoteInfo$Outbound;
}

export function groupRemoteInfoToJSON(
  groupRemoteInfo: GroupRemoteInfo,
): string {
  return JSON.stringify(GroupRemoteInfo$outboundSchema.parse(groupRemoteInfo));
}

export function groupRemoteInfoFromJSON(
  jsonString: string,
): SafeParseResult<GroupRemoteInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupRemoteInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupRemoteInfo' from JSON`,
  );
}
