/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateGroupBindingInfoGroup = {
  /**
   * The ID of the group.
   */
  groupId: string;
};

/**
 * # UpdateGroupBindingInfo Object
 *
 * @remarks
 * ### Description
 * The `UpdateGroupBindingInfo` object is used as an input to the UpdateGroupBinding API.
 */
export type UpdateGroupBindingInfo = {
  /**
   * The ID of the group binding.
   */
  groupBindingId: string;
  /**
   * The ID of the source group.
   */
  sourceGroupId: string;
  /**
   * The list of groups.
   */
  groups: Array<UpdateGroupBindingInfoGroup>;
};

/** @internal */
export const UpdateGroupBindingInfoGroup$inboundSchema: z.ZodType<
  UpdateGroupBindingInfoGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type UpdateGroupBindingInfoGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const UpdateGroupBindingInfoGroup$outboundSchema: z.ZodType<
  UpdateGroupBindingInfoGroup$Outbound,
  z.ZodTypeDef,
  UpdateGroupBindingInfoGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupBindingInfoGroup$ {
  /** @deprecated use `UpdateGroupBindingInfoGroup$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupBindingInfoGroup$inboundSchema;
  /** @deprecated use `UpdateGroupBindingInfoGroup$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupBindingInfoGroup$outboundSchema;
  /** @deprecated use `UpdateGroupBindingInfoGroup$Outbound` instead. */
  export type Outbound = UpdateGroupBindingInfoGroup$Outbound;
}

export function updateGroupBindingInfoGroupToJSON(
  updateGroupBindingInfoGroup: UpdateGroupBindingInfoGroup,
): string {
  return JSON.stringify(
    UpdateGroupBindingInfoGroup$outboundSchema.parse(
      updateGroupBindingInfoGroup,
    ),
  );
}

export function updateGroupBindingInfoGroupFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupBindingInfoGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupBindingInfoGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupBindingInfoGroup' from JSON`,
  );
}

/** @internal */
export const UpdateGroupBindingInfo$inboundSchema: z.ZodType<
  UpdateGroupBindingInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_binding_id: z.string(),
  source_group_id: z.string(),
  groups: z.array(z.lazy(() => UpdateGroupBindingInfoGroup$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "group_binding_id": "groupBindingId",
    "source_group_id": "sourceGroupId",
  });
});

/** @internal */
export type UpdateGroupBindingInfo$Outbound = {
  group_binding_id: string;
  source_group_id: string;
  groups: Array<UpdateGroupBindingInfoGroup$Outbound>;
};

/** @internal */
export const UpdateGroupBindingInfo$outboundSchema: z.ZodType<
  UpdateGroupBindingInfo$Outbound,
  z.ZodTypeDef,
  UpdateGroupBindingInfo
> = z.object({
  groupBindingId: z.string(),
  sourceGroupId: z.string(),
  groups: z.array(z.lazy(() => UpdateGroupBindingInfoGroup$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    groupBindingId: "group_binding_id",
    sourceGroupId: "source_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupBindingInfo$ {
  /** @deprecated use `UpdateGroupBindingInfo$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupBindingInfo$inboundSchema;
  /** @deprecated use `UpdateGroupBindingInfo$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupBindingInfo$outboundSchema;
  /** @deprecated use `UpdateGroupBindingInfo$Outbound` instead. */
  export type Outbound = UpdateGroupBindingInfo$Outbound;
}

export function updateGroupBindingInfoToJSON(
  updateGroupBindingInfo: UpdateGroupBindingInfo,
): string {
  return JSON.stringify(
    UpdateGroupBindingInfo$outboundSchema.parse(updateGroupBindingInfo),
  );
}

export function updateGroupBindingInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupBindingInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupBindingInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupBindingInfo' from JSON`,
  );
}
