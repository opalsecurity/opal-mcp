/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestConfiguration,
  RequestConfiguration$inboundSchema,
  RequestConfiguration$Outbound,
  RequestConfiguration$outboundSchema,
} from "./requestconfiguration.js";

/**
 * # CreateRequestConfigurationInfoList Object
 *
 * @remarks
 * ### Description
 * The `CreateRequestConfigurationInfoList` object is used as an input to the CreateRequestConfigurations API.
 *
 * ### Formatting Requirements
 * The `CreateRequestConfigurationInfoList` object must contain a list of `RequestConfiguration` objects.
 * Exactly one default `RequestConfiguration` must be provided.  A default `RequestConfiguration` is one with a `condition` of `null`
 * and a `priority` of `0`.  The default `RequestConfiguration` will be used when no other `RequestConfiguration` matches the request.
 *
 * Only one `RequestConfiguration` may be provided for each priority, and the priorities must be contiguous.  For example, if there are
 * two `RequestConfigurations` with priorities 0 and 2, there must be a `RequestConfiguration` with priority 1.
 *
 * To use the `condition` field, the `condition` must be a valid JSON object.
 *
 * The `condition` must be a JSON object with the key `group_ids` (more options may be added in the future), whose value is a list of
 * group IDs.
 * The `condition` will match if the user requesting access is a member of any of the groups in the list. Currently, we only support
 * using a single group as a condition.
 */
export type CreateRequestConfigurationInfoList = {
  /**
   * A list of request configurations to create.
   */
  requestConfigurations: Array<RequestConfiguration>;
};

/** @internal */
export const CreateRequestConfigurationInfoList$inboundSchema: z.ZodType<
  CreateRequestConfigurationInfoList,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_configurations: z.array(RequestConfiguration$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "request_configurations": "requestConfigurations",
  });
});

/** @internal */
export type CreateRequestConfigurationInfoList$Outbound = {
  request_configurations: Array<RequestConfiguration$Outbound>;
};

/** @internal */
export const CreateRequestConfigurationInfoList$outboundSchema: z.ZodType<
  CreateRequestConfigurationInfoList$Outbound,
  z.ZodTypeDef,
  CreateRequestConfigurationInfoList
> = z.object({
  requestConfigurations: z.array(RequestConfiguration$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestConfigurations: "request_configurations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequestConfigurationInfoList$ {
  /** @deprecated use `CreateRequestConfigurationInfoList$inboundSchema` instead. */
  export const inboundSchema = CreateRequestConfigurationInfoList$inboundSchema;
  /** @deprecated use `CreateRequestConfigurationInfoList$outboundSchema` instead. */
  export const outboundSchema =
    CreateRequestConfigurationInfoList$outboundSchema;
  /** @deprecated use `CreateRequestConfigurationInfoList$Outbound` instead. */
  export type Outbound = CreateRequestConfigurationInfoList$Outbound;
}

export function createRequestConfigurationInfoListToJSON(
  createRequestConfigurationInfoList: CreateRequestConfigurationInfoList,
): string {
  return JSON.stringify(
    CreateRequestConfigurationInfoList$outboundSchema.parse(
      createRequestConfigurationInfoList,
    ),
  );
}

export function createRequestConfigurationInfoListFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequestConfigurationInfoList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateRequestConfigurationInfoList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequestConfigurationInfoList' from JSON`,
  );
}
