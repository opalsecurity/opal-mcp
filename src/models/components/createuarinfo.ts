/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UARReviewerAssignmentPolicyEnum,
  UARReviewerAssignmentPolicyEnum$inboundSchema,
  UARReviewerAssignmentPolicyEnum$outboundSchema,
} from "./uarreviewerassignmentpolicyenum.js";
import {
  UARScope,
  UARScope$inboundSchema,
  UARScope$Outbound,
  UARScope$outboundSchema,
} from "./uarscope.js";

/**
 * Information needed to start a user access review.
 */
export type CreateUARInfo = {
  /**
   * The name of the UAR.
   */
  name: string;
  /**
   * A policy for auto-assigning reviewers. If auto-assignment is on, specific assignments can still be manually adjusted after the access review is started. Default is Manually.
   */
  reviewerAssignmentPolicy: UARReviewerAssignmentPolicyEnum;
  /**
   * A bool representing whether to send a notification to reviewers when they're assigned a new review. Default is False.
   */
  sendReviewerAssignmentNotification: boolean;
  /**
   * The last day for reviewers to complete their access reviews.
   */
  deadline: Date;
  /**
   * The time zone name (as defined by the IANA Time Zone database) used in the access review deadline and exported audit report. Default is America/Los_Angeles.
   */
  timeZone: string;
  /**
   * A bool representing whether to present a warning when a user is the only reviewer for themself. Default is False.
   */
  selfReviewAllowed: boolean;
  reminderSchedule?: Array<number> | undefined;
  reminderIncludeManager?: boolean | undefined;
  /**
   * If set, the access review will only contain resources and groups that match at least one of the filters in scope.
   */
  uarScope?: UARScope | undefined;
};

/** @internal */
export const CreateUARInfo$inboundSchema: z.ZodType<
  CreateUARInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  reviewer_assignment_policy: UARReviewerAssignmentPolicyEnum$inboundSchema,
  send_reviewer_assignment_notification: z.boolean(),
  deadline: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  time_zone: z.string(),
  self_review_allowed: z.boolean(),
  reminder_schedule: z.array(z.number().int()).optional(),
  reminder_include_manager: z.boolean().optional(),
  uar_scope: UARScope$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "reviewer_assignment_policy": "reviewerAssignmentPolicy",
    "send_reviewer_assignment_notification":
      "sendReviewerAssignmentNotification",
    "time_zone": "timeZone",
    "self_review_allowed": "selfReviewAllowed",
    "reminder_schedule": "reminderSchedule",
    "reminder_include_manager": "reminderIncludeManager",
    "uar_scope": "uarScope",
  });
});

/** @internal */
export type CreateUARInfo$Outbound = {
  name: string;
  reviewer_assignment_policy: string;
  send_reviewer_assignment_notification: boolean;
  deadline: string;
  time_zone: string;
  self_review_allowed: boolean;
  reminder_schedule?: Array<number> | undefined;
  reminder_include_manager?: boolean | undefined;
  uar_scope?: UARScope$Outbound | undefined;
};

/** @internal */
export const CreateUARInfo$outboundSchema: z.ZodType<
  CreateUARInfo$Outbound,
  z.ZodTypeDef,
  CreateUARInfo
> = z.object({
  name: z.string(),
  reviewerAssignmentPolicy: UARReviewerAssignmentPolicyEnum$outboundSchema,
  sendReviewerAssignmentNotification: z.boolean(),
  deadline: z.date().transform(v => v.toISOString()),
  timeZone: z.string(),
  selfReviewAllowed: z.boolean(),
  reminderSchedule: z.array(z.number().int()).optional(),
  reminderIncludeManager: z.boolean().optional(),
  uarScope: UARScope$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    reviewerAssignmentPolicy: "reviewer_assignment_policy",
    sendReviewerAssignmentNotification: "send_reviewer_assignment_notification",
    timeZone: "time_zone",
    selfReviewAllowed: "self_review_allowed",
    reminderSchedule: "reminder_schedule",
    reminderIncludeManager: "reminder_include_manager",
    uarScope: "uar_scope",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUARInfo$ {
  /** @deprecated use `CreateUARInfo$inboundSchema` instead. */
  export const inboundSchema = CreateUARInfo$inboundSchema;
  /** @deprecated use `CreateUARInfo$outboundSchema` instead. */
  export const outboundSchema = CreateUARInfo$outboundSchema;
  /** @deprecated use `CreateUARInfo$Outbound` instead. */
  export type Outbound = CreateUARInfo$Outbound;
}

export function createUARInfoToJSON(createUARInfo: CreateUARInfo): string {
  return JSON.stringify(CreateUARInfo$outboundSchema.parse(createUARInfo));
}

export function createUARInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateUARInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUARInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUARInfo' from JSON`,
  );
}
