/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OnCallScheduleProviderEnum,
  OnCallScheduleProviderEnum$inboundSchema,
  OnCallScheduleProviderEnum$outboundSchema,
} from "./oncallscheduleproviderenum.js";

/**
 * # OnCallSchedule Object
 *
 * @remarks
 * ### Description
 * The `OnCallSchedule` object is used to represent an on call schedule.
 *
 * ### Usage Example
 * Update a groups on call schedule from the `UPDATE Groups` endpoint.
 */
export type OnCallSchedule = {
  /**
   * The ID of the on-call schedule.
   */
  onCallScheduleId?: string | undefined;
  /**
   * The third party provider of the on call schedule.
   */
  thirdPartyProvider?: OnCallScheduleProviderEnum | undefined;
  /**
   * The remote ID of the on call schedule
   */
  remoteId?: string | undefined;
  /**
   * The name of the on call schedule.
   */
  name?: string | undefined;
};

/** @internal */
export const OnCallSchedule$inboundSchema: z.ZodType<
  OnCallSchedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  on_call_schedule_id: z.string().optional(),
  third_party_provider: OnCallScheduleProviderEnum$inboundSchema.optional(),
  remote_id: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "on_call_schedule_id": "onCallScheduleId",
    "third_party_provider": "thirdPartyProvider",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type OnCallSchedule$Outbound = {
  on_call_schedule_id?: string | undefined;
  third_party_provider?: string | undefined;
  remote_id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const OnCallSchedule$outboundSchema: z.ZodType<
  OnCallSchedule$Outbound,
  z.ZodTypeDef,
  OnCallSchedule
> = z.object({
  onCallScheduleId: z.string().optional(),
  thirdPartyProvider: OnCallScheduleProviderEnum$outboundSchema.optional(),
  remoteId: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    onCallScheduleId: "on_call_schedule_id",
    thirdPartyProvider: "third_party_provider",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnCallSchedule$ {
  /** @deprecated use `OnCallSchedule$inboundSchema` instead. */
  export const inboundSchema = OnCallSchedule$inboundSchema;
  /** @deprecated use `OnCallSchedule$outboundSchema` instead. */
  export const outboundSchema = OnCallSchedule$outboundSchema;
  /** @deprecated use `OnCallSchedule$Outbound` instead. */
  export type Outbound = OnCallSchedule$Outbound;
}

export function onCallScheduleToJSON(onCallSchedule: OnCallSchedule): string {
  return JSON.stringify(OnCallSchedule$outboundSchema.parse(onCallSchedule));
}

export function onCallScheduleFromJSON(
  jsonString: string,
): SafeParseResult<OnCallSchedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnCallSchedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnCallSchedule' from JSON`,
  );
}
