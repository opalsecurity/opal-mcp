/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Resource,
  Resource$inboundSchema,
  Resource$Outbound,
  Resource$outboundSchema,
} from "./resource.js";

export type PaginatedResourcesList = {
  /**
   * The cursor with which to continue pagination if additional result pages exist.
   */
  next?: string | null | undefined;
  /**
   * The cursor used to obtain the current result page.
   */
  previous?: string | null | undefined;
  results: Array<Resource>;
};

/** @internal */
export const PaginatedResourcesList$inboundSchema: z.ZodType<
  PaginatedResourcesList,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.nullable(z.string()).optional(),
  previous: z.nullable(z.string()).optional(),
  results: z.array(Resource$inboundSchema),
});

/** @internal */
export type PaginatedResourcesList$Outbound = {
  next?: string | null | undefined;
  previous?: string | null | undefined;
  results: Array<Resource$Outbound>;
};

/** @internal */
export const PaginatedResourcesList$outboundSchema: z.ZodType<
  PaginatedResourcesList$Outbound,
  z.ZodTypeDef,
  PaginatedResourcesList
> = z.object({
  next: z.nullable(z.string()).optional(),
  previous: z.nullable(z.string()).optional(),
  results: z.array(Resource$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResourcesList$ {
  /** @deprecated use `PaginatedResourcesList$inboundSchema` instead. */
  export const inboundSchema = PaginatedResourcesList$inboundSchema;
  /** @deprecated use `PaginatedResourcesList$outboundSchema` instead. */
  export const outboundSchema = PaginatedResourcesList$outboundSchema;
  /** @deprecated use `PaginatedResourcesList$Outbound` instead. */
  export type Outbound = PaginatedResourcesList$Outbound;
}

export function paginatedResourcesListToJSON(
  paginatedResourcesList: PaginatedResourcesList,
): string {
  return JSON.stringify(
    PaginatedResourcesList$outboundSchema.parse(paginatedResourcesList),
  );
}

export function paginatedResourcesListFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResourcesList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedResourcesList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResourcesList' from JSON`,
  );
}
