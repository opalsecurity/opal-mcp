/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceAccessLevel,
  ResourceAccessLevel$inboundSchema,
  ResourceAccessLevel$Outbound,
  ResourceAccessLevel$outboundSchema,
} from "./resourceaccesslevel.js";
import {
  ResourceUserAccessStatusEnum,
  ResourceUserAccessStatusEnum$inboundSchema,
  ResourceUserAccessStatusEnum$outboundSchema,
} from "./resourceuseraccessstatusenum.js";

/**
 * # AccessStatus Object
 *
 * @remarks
 * ### Description
 * The `AccessStatus` object is used to represent the user's access to the resource.
 *
 * ### Usage Example
 * View the `AccessStatus` for a resource/user pair to determine if the user has access to the resource.
 */
export type ResourceUserAccessStatus = {
  /**
   * The ID of the resource.
   */
  resourceId: string;
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * # Access Level Object
   *
   * @remarks
   * ### Description
   * The `AccessLevel` object is used to represent the level of access that a principal has. The "default" access
   * level is a `AccessLevel` object whose fields are all empty strings.
   *
   * ### Usage Example
   * View the `AccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
   */
  accessLevel?: ResourceAccessLevel | undefined;
  /**
   * The status of the user's access to the resource.
   */
  status: ResourceUserAccessStatusEnum;
  /**
   * The day and time the user's access will expire.
   */
  expirationDate?: Date | null | undefined;
};

/** @internal */
export const ResourceUserAccessStatus$inboundSchema: z.ZodType<
  ResourceUserAccessStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  user_id: z.string(),
  access_level: ResourceAccessLevel$inboundSchema.optional(),
  status: ResourceUserAccessStatusEnum$inboundSchema,
  expiration_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "user_id": "userId",
    "access_level": "accessLevel",
    "expiration_date": "expirationDate",
  });
});

/** @internal */
export type ResourceUserAccessStatus$Outbound = {
  resource_id: string;
  user_id: string;
  access_level?: ResourceAccessLevel$Outbound | undefined;
  status: string;
  expiration_date?: string | null | undefined;
};

/** @internal */
export const ResourceUserAccessStatus$outboundSchema: z.ZodType<
  ResourceUserAccessStatus$Outbound,
  z.ZodTypeDef,
  ResourceUserAccessStatus
> = z.object({
  resourceId: z.string(),
  userId: z.string(),
  accessLevel: ResourceAccessLevel$outboundSchema.optional(),
  status: ResourceUserAccessStatusEnum$outboundSchema,
  expirationDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    userId: "user_id",
    accessLevel: "access_level",
    expirationDate: "expiration_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceUserAccessStatus$ {
  /** @deprecated use `ResourceUserAccessStatus$inboundSchema` instead. */
  export const inboundSchema = ResourceUserAccessStatus$inboundSchema;
  /** @deprecated use `ResourceUserAccessStatus$outboundSchema` instead. */
  export const outboundSchema = ResourceUserAccessStatus$outboundSchema;
  /** @deprecated use `ResourceUserAccessStatus$Outbound` instead. */
  export type Outbound = ResourceUserAccessStatus$Outbound;
}

export function resourceUserAccessStatusToJSON(
  resourceUserAccessStatus: ResourceUserAccessStatus,
): string {
  return JSON.stringify(
    ResourceUserAccessStatus$outboundSchema.parse(resourceUserAccessStatus),
  );
}

export function resourceUserAccessStatusFromJSON(
  jsonString: string,
): SafeParseResult<ResourceUserAccessStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceUserAccessStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceUserAccessStatus' from JSON`,
  );
}
