/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BundleGroup = {
  /**
   * The ID of the bundle containing the group.
   */
  bundleId?: string | undefined;
  /**
   * The ID of the group within a bundle.
   */
  groupId?: string | undefined;
  /**
   * The access level of the group within a bundle.
   */
  accessLevelName?: string | undefined;
  /**
   * The remote ID of the access level of the group within a bundle.
   */
  accessLevelRemoteId?: string | undefined;
};

/** @internal */
export const BundleGroup$inboundSchema: z.ZodType<
  BundleGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  bundle_id: z.string().optional(),
  group_id: z.string().optional(),
  access_level_name: z.string().optional(),
  access_level_remote_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "bundle_id": "bundleId",
    "group_id": "groupId",
    "access_level_name": "accessLevelName",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type BundleGroup$Outbound = {
  bundle_id?: string | undefined;
  group_id?: string | undefined;
  access_level_name?: string | undefined;
  access_level_remote_id?: string | undefined;
};

/** @internal */
export const BundleGroup$outboundSchema: z.ZodType<
  BundleGroup$Outbound,
  z.ZodTypeDef,
  BundleGroup
> = z.object({
  bundleId: z.string().optional(),
  groupId: z.string().optional(),
  accessLevelName: z.string().optional(),
  accessLevelRemoteId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
    groupId: "group_id",
    accessLevelName: "access_level_name",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BundleGroup$ {
  /** @deprecated use `BundleGroup$inboundSchema` instead. */
  export const inboundSchema = BundleGroup$inboundSchema;
  /** @deprecated use `BundleGroup$outboundSchema` instead. */
  export const outboundSchema = BundleGroup$outboundSchema;
  /** @deprecated use `BundleGroup$Outbound` instead. */
  export type Outbound = BundleGroup$Outbound;
}

export function bundleGroupToJSON(bundleGroup: BundleGroup): string {
  return JSON.stringify(BundleGroup$outboundSchema.parse(bundleGroup));
}

export function bundleGroupFromJSON(
  jsonString: string,
): SafeParseResult<BundleGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BundleGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BundleGroup' from JSON`,
  );
}
