/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RuleClauses,
  RuleClauses$inboundSchema,
  RuleClauses$Outbound,
  RuleClauses$outboundSchema,
} from "./ruleclauses.js";

/**
 * The status of the access rule.
 */
export const UpdateAccessRuleInfoStatus = {
  Active: "ACTIVE",
  Paused: "PAUSED",
} as const;
/**
 * The status of the access rule.
 */
export type UpdateAccessRuleInfoStatus = ClosedEnum<
  typeof UpdateAccessRuleInfoStatus
>;

/**
 * # UpdateAccessRuleInfo Object
 *
 * @remarks
 * ### Description
 * The `UpdateAccessRuleInfo` object is used as an input to the UpdateAccessRule and CreateAccessRule API.
 */
export type UpdateAccessRuleInfo = {
  /**
   * The name of the access rule.
   */
  name: string;
  /**
   * A description of the group.
   */
  description: string;
  /**
   * The ID of the owner of the group.
   */
  adminOwnerId: string;
  /**
   * The status of the access rule.
   */
  status: UpdateAccessRuleInfoStatus;
  ruleClauses: RuleClauses;
};

/** @internal */
export const UpdateAccessRuleInfoStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAccessRuleInfoStatus
> = z.nativeEnum(UpdateAccessRuleInfoStatus);

/** @internal */
export const UpdateAccessRuleInfoStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAccessRuleInfoStatus
> = UpdateAccessRuleInfoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAccessRuleInfoStatus$ {
  /** @deprecated use `UpdateAccessRuleInfoStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateAccessRuleInfoStatus$inboundSchema;
  /** @deprecated use `UpdateAccessRuleInfoStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateAccessRuleInfoStatus$outboundSchema;
}

/** @internal */
export const UpdateAccessRuleInfo$inboundSchema: z.ZodType<
  UpdateAccessRuleInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  admin_owner_id: z.string(),
  status: UpdateAccessRuleInfoStatus$inboundSchema,
  ruleClauses: RuleClauses$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "admin_owner_id": "adminOwnerId",
  });
});

/** @internal */
export type UpdateAccessRuleInfo$Outbound = {
  name: string;
  description: string;
  admin_owner_id: string;
  status: string;
  ruleClauses: RuleClauses$Outbound;
};

/** @internal */
export const UpdateAccessRuleInfo$outboundSchema: z.ZodType<
  UpdateAccessRuleInfo$Outbound,
  z.ZodTypeDef,
  UpdateAccessRuleInfo
> = z.object({
  name: z.string(),
  description: z.string(),
  adminOwnerId: z.string(),
  status: UpdateAccessRuleInfoStatus$outboundSchema,
  ruleClauses: RuleClauses$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    adminOwnerId: "admin_owner_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAccessRuleInfo$ {
  /** @deprecated use `UpdateAccessRuleInfo$inboundSchema` instead. */
  export const inboundSchema = UpdateAccessRuleInfo$inboundSchema;
  /** @deprecated use `UpdateAccessRuleInfo$outboundSchema` instead. */
  export const outboundSchema = UpdateAccessRuleInfo$outboundSchema;
  /** @deprecated use `UpdateAccessRuleInfo$Outbound` instead. */
  export type Outbound = UpdateAccessRuleInfo$Outbound;
}

export function updateAccessRuleInfoToJSON(
  updateAccessRuleInfo: UpdateAccessRuleInfo,
): string {
  return JSON.stringify(
    UpdateAccessRuleInfo$outboundSchema.parse(updateAccessRuleInfo),
  );
}

export function updateAccessRuleInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAccessRuleInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAccessRuleInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAccessRuleInfo' from JSON`,
  );
}
