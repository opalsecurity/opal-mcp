/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents a sync task that has been completed, either successfully or with errors.
 */
export type SyncTask = {
  /**
   * The ID of the sync task.
   */
  id: string;
  /**
   * The time when the sync task was completed.
   */
  completedAt: Date;
};

/** @internal */
export const SyncTask$inboundSchema: z.ZodType<
  SyncTask,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  completed_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
}).transform((v) => {
  return remap$(v, {
    "completed_at": "completedAt",
  });
});

/** @internal */
export type SyncTask$Outbound = {
  id: string;
  completed_at: string;
};

/** @internal */
export const SyncTask$outboundSchema: z.ZodType<
  SyncTask$Outbound,
  z.ZodTypeDef,
  SyncTask
> = z.object({
  id: z.string(),
  completedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    completedAt: "completed_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncTask$ {
  /** @deprecated use `SyncTask$inboundSchema` instead. */
  export const inboundSchema = SyncTask$inboundSchema;
  /** @deprecated use `SyncTask$outboundSchema` instead. */
  export const outboundSchema = SyncTask$outboundSchema;
  /** @deprecated use `SyncTask$Outbound` instead. */
  export type Outbound = SyncTask$Outbound;
}

export function syncTaskToJSON(syncTask: SyncTask): string {
  return JSON.stringify(SyncTask$outboundSchema.parse(syncTask));
}

export function syncTaskFromJSON(
  jsonString: string,
): SafeParseResult<SyncTask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncTask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncTask' from JSON`,
  );
}
