/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BundleGroup,
  BundleGroup$inboundSchema,
  BundleGroup$Outbound,
  BundleGroup$outboundSchema,
} from "./bundlegroup.js";

export type PaginatedBundleGroupList = {
  /**
   * The cursor used to obtain the current result page.
   */
  previous?: string | null | undefined;
  /**
   * The cursor with which to continue pagination if additional result pages exist.
   */
  next?: string | null | undefined;
  /**
   * The total number of items in the result set.
   */
  totalCount?: number | undefined;
  bundleGroups: Array<BundleGroup>;
};

/** @internal */
export const PaginatedBundleGroupList$inboundSchema: z.ZodType<
  PaginatedBundleGroupList,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
  total_count: z.number().int().optional(),
  bundle_groups: z.array(BundleGroup$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "total_count": "totalCount",
    "bundle_groups": "bundleGroups",
  });
});

/** @internal */
export type PaginatedBundleGroupList$Outbound = {
  previous?: string | null | undefined;
  next?: string | null | undefined;
  total_count?: number | undefined;
  bundle_groups: Array<BundleGroup$Outbound>;
};

/** @internal */
export const PaginatedBundleGroupList$outboundSchema: z.ZodType<
  PaginatedBundleGroupList$Outbound,
  z.ZodTypeDef,
  PaginatedBundleGroupList
> = z.object({
  previous: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
  totalCount: z.number().int().optional(),
  bundleGroups: z.array(BundleGroup$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    totalCount: "total_count",
    bundleGroups: "bundle_groups",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedBundleGroupList$ {
  /** @deprecated use `PaginatedBundleGroupList$inboundSchema` instead. */
  export const inboundSchema = PaginatedBundleGroupList$inboundSchema;
  /** @deprecated use `PaginatedBundleGroupList$outboundSchema` instead. */
  export const outboundSchema = PaginatedBundleGroupList$outboundSchema;
  /** @deprecated use `PaginatedBundleGroupList$Outbound` instead. */
  export type Outbound = PaginatedBundleGroupList$Outbound;
}

export function paginatedBundleGroupListToJSON(
  paginatedBundleGroupList: PaginatedBundleGroupList,
): string {
  return JSON.stringify(
    PaginatedBundleGroupList$outboundSchema.parse(paginatedBundleGroupList),
  );
}

export function paginatedBundleGroupListFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedBundleGroupList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedBundleGroupList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedBundleGroupList' from JSON`,
  );
}
