/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Information about a group mapping.
 */
export type IdpGroupMapping = {
  /**
   * The ID of the group.
   */
  groupId: string;
  /**
   * The alias of the group.
   */
  alias?: string | undefined;
  /**
   * A bool representing whether or not the group is hidden from the end user.
   */
  hiddenFromEndUser: boolean;
};

/** @internal */
export const IdpGroupMapping$inboundSchema: z.ZodType<
  IdpGroupMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  alias: z.string().optional(),
  hidden_from_end_user: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "hidden_from_end_user": "hiddenFromEndUser",
  });
});

/** @internal */
export type IdpGroupMapping$Outbound = {
  group_id: string;
  alias?: string | undefined;
  hidden_from_end_user: boolean;
};

/** @internal */
export const IdpGroupMapping$outboundSchema: z.ZodType<
  IdpGroupMapping$Outbound,
  z.ZodTypeDef,
  IdpGroupMapping
> = z.object({
  groupId: z.string(),
  alias: z.string().optional(),
  hiddenFromEndUser: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    hiddenFromEndUser: "hidden_from_end_user",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdpGroupMapping$ {
  /** @deprecated use `IdpGroupMapping$inboundSchema` instead. */
  export const inboundSchema = IdpGroupMapping$inboundSchema;
  /** @deprecated use `IdpGroupMapping$outboundSchema` instead. */
  export const outboundSchema = IdpGroupMapping$outboundSchema;
  /** @deprecated use `IdpGroupMapping$Outbound` instead. */
  export type Outbound = IdpGroupMapping$Outbound;
}

export function idpGroupMappingToJSON(
  idpGroupMapping: IdpGroupMapping,
): string {
  return JSON.stringify(IdpGroupMapping$outboundSchema.parse(idpGroupMapping));
}

export function idpGroupMappingFromJSON(
  jsonString: string,
): SafeParseResult<IdpGroupMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IdpGroupMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdpGroupMapping' from JSON`,
  );
}
