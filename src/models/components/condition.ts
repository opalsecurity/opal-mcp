/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # Condition Object
 *
 * @remarks
 * ### Description
 * The `Condition` object is used to represent a condition.
 *
 * ### Usage Example
 * Used to match request configurations to users in `RequestConfiguration`
 */
export type Condition = {
  /**
   * The list of group IDs to match.
   */
  groupIds?: Array<string> | undefined;
  /**
   * The list of role remote IDs to match.
   */
  roleRemoteIds?: Array<string> | undefined;
};

/** @internal */
export const Condition$inboundSchema: z.ZodType<
  Condition,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_ids: z.array(z.string()).optional(),
  role_remote_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "group_ids": "groupIds",
    "role_remote_ids": "roleRemoteIds",
  });
});

/** @internal */
export type Condition$Outbound = {
  group_ids?: Array<string> | undefined;
  role_remote_ids?: Array<string> | undefined;
};

/** @internal */
export const Condition$outboundSchema: z.ZodType<
  Condition$Outbound,
  z.ZodTypeDef,
  Condition
> = z.object({
  groupIds: z.array(z.string()).optional(),
  roleRemoteIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    groupIds: "group_ids",
    roleRemoteIds: "role_remote_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Condition$ {
  /** @deprecated use `Condition$inboundSchema` instead. */
  export const inboundSchema = Condition$inboundSchema;
  /** @deprecated use `Condition$outboundSchema` instead. */
  export const outboundSchema = Condition$outboundSchema;
  /** @deprecated use `Condition$Outbound` instead. */
  export type Outbound = Condition$Outbound;
}

export function conditionToJSON(condition: Condition): string {
  return JSON.stringify(Condition$outboundSchema.parse(condition));
}

export function conditionFromJSON(
  jsonString: string,
): SafeParseResult<Condition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Condition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Condition' from JSON`,
  );
}
