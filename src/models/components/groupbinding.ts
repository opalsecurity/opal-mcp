/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GroupBindingGroup,
  GroupBindingGroup$inboundSchema,
  GroupBindingGroup$Outbound,
  GroupBindingGroup$outboundSchema,
} from "./groupbindinggroup.js";

/**
 * # Group Binding Object
 *
 * @remarks
 * ### Description
 * The `GroupBinding` object is used to represent a group binding.
 *
 * ### Usage Example
 * Get group bindings from the `GET Group Bindings` endpoint.
 */
export type GroupBinding = {
  /**
   * The ID of the group binding.
   */
  groupBindingId: string;
  /**
   * The ID of the user that created the group binding.
   */
  createdById: string;
  /**
   * The date the group binding was created.
   */
  createdAt: Date;
  /**
   * The ID of the source group.
   */
  sourceGroupId: string;
  /**
   * The list of groups.
   */
  groups: Array<GroupBindingGroup>;
};

/** @internal */
export const GroupBinding$inboundSchema: z.ZodType<
  GroupBinding,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_binding_id: z.string(),
  created_by_id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  source_group_id: z.string(),
  groups: z.array(GroupBindingGroup$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "group_binding_id": "groupBindingId",
    "created_by_id": "createdById",
    "created_at": "createdAt",
    "source_group_id": "sourceGroupId",
  });
});

/** @internal */
export type GroupBinding$Outbound = {
  group_binding_id: string;
  created_by_id: string;
  created_at: string;
  source_group_id: string;
  groups: Array<GroupBindingGroup$Outbound>;
};

/** @internal */
export const GroupBinding$outboundSchema: z.ZodType<
  GroupBinding$Outbound,
  z.ZodTypeDef,
  GroupBinding
> = z.object({
  groupBindingId: z.string(),
  createdById: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  sourceGroupId: z.string(),
  groups: z.array(GroupBindingGroup$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    groupBindingId: "group_binding_id",
    createdById: "created_by_id",
    createdAt: "created_at",
    sourceGroupId: "source_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupBinding$ {
  /** @deprecated use `GroupBinding$inboundSchema` instead. */
  export const inboundSchema = GroupBinding$inboundSchema;
  /** @deprecated use `GroupBinding$outboundSchema` instead. */
  export const outboundSchema = GroupBinding$outboundSchema;
  /** @deprecated use `GroupBinding$Outbound` instead. */
  export type Outbound = GroupBinding$Outbound;
}

export function groupBindingToJSON(groupBinding: GroupBinding): string {
  return JSON.stringify(GroupBinding$outboundSchema.parse(groupBinding));
}

export function groupBindingFromJSON(
  jsonString: string,
): SafeParseResult<GroupBinding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupBinding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupBinding' from JSON`,
  );
}
