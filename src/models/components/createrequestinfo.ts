/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestTemplateCustomFieldTypeEnum,
  RequestTemplateCustomFieldTypeEnum$inboundSchema,
  RequestTemplateCustomFieldTypeEnum$outboundSchema,
} from "./requesttemplatecustomfieldtypeenum.js";
import {
  TicketingProviderEnum,
  TicketingProviderEnum$inboundSchema,
  TicketingProviderEnum$outboundSchema,
} from "./ticketingproviderenum.js";

export type CreateRequestInfoResource = {
  /**
   * The ID of the resource requested. Should not be specified if group_id is specified.
   */
  id?: string | undefined;
  /**
   * The ID of the access level requested on the remote system.
   */
  accessLevelRemoteId?: string | undefined;
  /**
   * The ID of the access level requested on the remote system.
   */
  accessLevelName?: string | undefined;
};

export type CreateRequestInfoGroup = {
  /**
   * The ID of the group requested. Should not be specified if resource_id is specified.
   */
  id: string;
  /**
   * The ID of the access level requested on the remote system.
   */
  accessLevelRemoteId?: string | undefined;
  /**
   * The ID of the access level requested on the remote system.
   */
  accessLevelName?: string | undefined;
};

export type SupportTicket = {
  /**
   * The third party ticketing platform provider.
   */
  ticketingProvider: TicketingProviderEnum;
  remoteId: string;
  identifier: string;
  url: string;
};

export type CustomMetadatum = {
  name: string;
  /**
   * The type of the custom request field.
   */
  type: RequestTemplateCustomFieldTypeEnum;
  value: string;
};

/**
 * All the information needed for creating a request
 */
export type CreateRequestInfo = {
  resources: Array<CreateRequestInfoResource>;
  groups: Array<CreateRequestInfoGroup>;
  /**
   * The ID of the user to be granted access. Should not be specified if target_group_id is specified.
   */
  targetUserId?: string | undefined;
  /**
   * The ID of the group the request is for.  Should not be specified if target_user_id is specified.
   */
  targetGroupId?: string | undefined;
  reason: string;
  supportTicket?: SupportTicket | undefined;
  /**
   * The duration of the request in minutes. -1 represents an indefinite duration
   */
  durationMinutes: number;
  customMetadata?: Array<CustomMetadatum> | undefined;
};

/** @internal */
export const CreateRequestInfoResource$inboundSchema: z.ZodType<
  CreateRequestInfoResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  access_level_remote_id: z.string().optional(),
  access_level_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "access_level_remote_id": "accessLevelRemoteId",
    "access_level_name": "accessLevelName",
  });
});

/** @internal */
export type CreateRequestInfoResource$Outbound = {
  id?: string | undefined;
  access_level_remote_id?: string | undefined;
  access_level_name?: string | undefined;
};

/** @internal */
export const CreateRequestInfoResource$outboundSchema: z.ZodType<
  CreateRequestInfoResource$Outbound,
  z.ZodTypeDef,
  CreateRequestInfoResource
> = z.object({
  id: z.string().optional(),
  accessLevelRemoteId: z.string().optional(),
  accessLevelName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accessLevelRemoteId: "access_level_remote_id",
    accessLevelName: "access_level_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequestInfoResource$ {
  /** @deprecated use `CreateRequestInfoResource$inboundSchema` instead. */
  export const inboundSchema = CreateRequestInfoResource$inboundSchema;
  /** @deprecated use `CreateRequestInfoResource$outboundSchema` instead. */
  export const outboundSchema = CreateRequestInfoResource$outboundSchema;
  /** @deprecated use `CreateRequestInfoResource$Outbound` instead. */
  export type Outbound = CreateRequestInfoResource$Outbound;
}

export function createRequestInfoResourceToJSON(
  createRequestInfoResource: CreateRequestInfoResource,
): string {
  return JSON.stringify(
    CreateRequestInfoResource$outboundSchema.parse(createRequestInfoResource),
  );
}

export function createRequestInfoResourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequestInfoResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequestInfoResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequestInfoResource' from JSON`,
  );
}

/** @internal */
export const CreateRequestInfoGroup$inboundSchema: z.ZodType<
  CreateRequestInfoGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  access_level_remote_id: z.string().optional(),
  access_level_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "access_level_remote_id": "accessLevelRemoteId",
    "access_level_name": "accessLevelName",
  });
});

/** @internal */
export type CreateRequestInfoGroup$Outbound = {
  id: string;
  access_level_remote_id?: string | undefined;
  access_level_name?: string | undefined;
};

/** @internal */
export const CreateRequestInfoGroup$outboundSchema: z.ZodType<
  CreateRequestInfoGroup$Outbound,
  z.ZodTypeDef,
  CreateRequestInfoGroup
> = z.object({
  id: z.string(),
  accessLevelRemoteId: z.string().optional(),
  accessLevelName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accessLevelRemoteId: "access_level_remote_id",
    accessLevelName: "access_level_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequestInfoGroup$ {
  /** @deprecated use `CreateRequestInfoGroup$inboundSchema` instead. */
  export const inboundSchema = CreateRequestInfoGroup$inboundSchema;
  /** @deprecated use `CreateRequestInfoGroup$outboundSchema` instead. */
  export const outboundSchema = CreateRequestInfoGroup$outboundSchema;
  /** @deprecated use `CreateRequestInfoGroup$Outbound` instead. */
  export type Outbound = CreateRequestInfoGroup$Outbound;
}

export function createRequestInfoGroupToJSON(
  createRequestInfoGroup: CreateRequestInfoGroup,
): string {
  return JSON.stringify(
    CreateRequestInfoGroup$outboundSchema.parse(createRequestInfoGroup),
  );
}

export function createRequestInfoGroupFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequestInfoGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequestInfoGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequestInfoGroup' from JSON`,
  );
}

/** @internal */
export const SupportTicket$inboundSchema: z.ZodType<
  SupportTicket,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticketing_provider: TicketingProviderEnum$inboundSchema,
  remote_id: z.string(),
  identifier: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ticketing_provider": "ticketingProvider",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type SupportTicket$Outbound = {
  ticketing_provider: string;
  remote_id: string;
  identifier: string;
  url: string;
};

/** @internal */
export const SupportTicket$outboundSchema: z.ZodType<
  SupportTicket$Outbound,
  z.ZodTypeDef,
  SupportTicket
> = z.object({
  ticketingProvider: TicketingProviderEnum$outboundSchema,
  remoteId: z.string(),
  identifier: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    ticketingProvider: "ticketing_provider",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicket$ {
  /** @deprecated use `SupportTicket$inboundSchema` instead. */
  export const inboundSchema = SupportTicket$inboundSchema;
  /** @deprecated use `SupportTicket$outboundSchema` instead. */
  export const outboundSchema = SupportTicket$outboundSchema;
  /** @deprecated use `SupportTicket$Outbound` instead. */
  export type Outbound = SupportTicket$Outbound;
}

export function supportTicketToJSON(supportTicket: SupportTicket): string {
  return JSON.stringify(SupportTicket$outboundSchema.parse(supportTicket));
}

export function supportTicketFromJSON(
  jsonString: string,
): SafeParseResult<SupportTicket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportTicket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportTicket' from JSON`,
  );
}

/** @internal */
export const CustomMetadatum$inboundSchema: z.ZodType<
  CustomMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: RequestTemplateCustomFieldTypeEnum$inboundSchema,
  value: z.string(),
});

/** @internal */
export type CustomMetadatum$Outbound = {
  name: string;
  type: string;
  value: string;
};

/** @internal */
export const CustomMetadatum$outboundSchema: z.ZodType<
  CustomMetadatum$Outbound,
  z.ZodTypeDef,
  CustomMetadatum
> = z.object({
  name: z.string(),
  type: RequestTemplateCustomFieldTypeEnum$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMetadatum$ {
  /** @deprecated use `CustomMetadatum$inboundSchema` instead. */
  export const inboundSchema = CustomMetadatum$inboundSchema;
  /** @deprecated use `CustomMetadatum$outboundSchema` instead. */
  export const outboundSchema = CustomMetadatum$outboundSchema;
  /** @deprecated use `CustomMetadatum$Outbound` instead. */
  export type Outbound = CustomMetadatum$Outbound;
}

export function customMetadatumToJSON(
  customMetadatum: CustomMetadatum,
): string {
  return JSON.stringify(CustomMetadatum$outboundSchema.parse(customMetadatum));
}

export function customMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<CustomMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMetadatum' from JSON`,
  );
}

/** @internal */
export const CreateRequestInfo$inboundSchema: z.ZodType<
  CreateRequestInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.array(z.lazy(() => CreateRequestInfoResource$inboundSchema)),
  groups: z.array(z.lazy(() => CreateRequestInfoGroup$inboundSchema)),
  target_user_id: z.string().optional(),
  target_group_id: z.string().optional(),
  reason: z.string(),
  support_ticket: z.lazy(() => SupportTicket$inboundSchema).optional(),
  duration_minutes: z.number().int(),
  custom_metadata: z.array(z.lazy(() => CustomMetadatum$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "target_user_id": "targetUserId",
    "target_group_id": "targetGroupId",
    "support_ticket": "supportTicket",
    "duration_minutes": "durationMinutes",
    "custom_metadata": "customMetadata",
  });
});

/** @internal */
export type CreateRequestInfo$Outbound = {
  resources: Array<CreateRequestInfoResource$Outbound>;
  groups: Array<CreateRequestInfoGroup$Outbound>;
  target_user_id?: string | undefined;
  target_group_id?: string | undefined;
  reason: string;
  support_ticket?: SupportTicket$Outbound | undefined;
  duration_minutes: number;
  custom_metadata?: Array<CustomMetadatum$Outbound> | undefined;
};

/** @internal */
export const CreateRequestInfo$outboundSchema: z.ZodType<
  CreateRequestInfo$Outbound,
  z.ZodTypeDef,
  CreateRequestInfo
> = z.object({
  resources: z.array(z.lazy(() => CreateRequestInfoResource$outboundSchema)),
  groups: z.array(z.lazy(() => CreateRequestInfoGroup$outboundSchema)),
  targetUserId: z.string().optional(),
  targetGroupId: z.string().optional(),
  reason: z.string(),
  supportTicket: z.lazy(() => SupportTicket$outboundSchema).optional(),
  durationMinutes: z.number().int(),
  customMetadata: z.array(z.lazy(() => CustomMetadatum$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    targetUserId: "target_user_id",
    targetGroupId: "target_group_id",
    supportTicket: "support_ticket",
    durationMinutes: "duration_minutes",
    customMetadata: "custom_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequestInfo$ {
  /** @deprecated use `CreateRequestInfo$inboundSchema` instead. */
  export const inboundSchema = CreateRequestInfo$inboundSchema;
  /** @deprecated use `CreateRequestInfo$outboundSchema` instead. */
  export const outboundSchema = CreateRequestInfo$outboundSchema;
  /** @deprecated use `CreateRequestInfo$Outbound` instead. */
  export type Outbound = CreateRequestInfo$Outbound;
}

export function createRequestInfoToJSON(
  createRequestInfo: CreateRequestInfo,
): string {
  return JSON.stringify(
    CreateRequestInfo$outboundSchema.parse(createRequestInfo),
  );
}

export function createRequestInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequestInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequestInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequestInfo' from JSON`,
  );
}
