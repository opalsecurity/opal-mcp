/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateRequestConfigurationInfoList,
  CreateRequestConfigurationInfoList$inboundSchema,
  CreateRequestConfigurationInfoList$Outbound,
  CreateRequestConfigurationInfoList$outboundSchema,
} from "./createrequestconfigurationinfolist.js";
import {
  RequestConfiguration,
  RequestConfiguration$inboundSchema,
  RequestConfiguration$Outbound,
  RequestConfiguration$outboundSchema,
} from "./requestconfiguration.js";
import {
  RiskSensitivityEnum,
  RiskSensitivityEnum$inboundSchema,
  RiskSensitivityEnum$outboundSchema,
} from "./risksensitivityenum.js";

/**
 * # UpdateGroupInfo Object
 *
 * @remarks
 * ### Description
 * The `UpdateGroupInfo` object is used as an input to the UpdateGroup API.
 */
export type UpdateGroupInfo = {
  /**
   * The ID of the group.
   */
  groupId: string;
  /**
   * The name of the group.
   */
  name?: string | undefined;
  /**
   * A description of the group.
   */
  description?: string | undefined;
  /**
   * The ID of the owner of the group.
   */
  adminOwnerId?: string | undefined;
  /**
   * The maximum duration for which the group can be requested (in minutes). Use -1 to set to indefinite. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  maxDuration?: number | undefined;
  /**
   * The recommended duration for which the group should be requested (in minutes). Will be the default value in a request. Use -1 to set to indefinite and 0 to unset. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  recommendedDuration?: number | undefined;
  /**
   * A bool representing whether or not access requests to the group require manager approval. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  requireManagerApproval?: boolean | undefined;
  /**
   * A bool representing whether or not access requests to the group require an access ticket. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  requireSupportTicket?: boolean | undefined;
  /**
   * The ID of the folder that the group is located in.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  folderId?: string | undefined;
  /**
   * A bool representing whether or not to require MFA for reviewers to approve requests for this group.
   */
  requireMfaToApprove?: boolean | undefined;
  /**
   * A bool representing whether or not to require MFA for requesting access to this group. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  requireMfaToRequest?: boolean | undefined;
  /**
   * A bool representing whether or not to automatically approve requests to this group. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  autoApproval?: boolean | undefined;
  /**
   * The ID of the associated configuration template.
   */
  configurationTemplateId?: string | undefined;
  /**
   * The ID of the associated request template. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  requestTemplateId?: string | undefined;
  /**
   * A bool representing whether or not to allow access requests to this group. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  isRequestable?: boolean | undefined;
  /**
   * A list of User IDs for the group leaders of the group
   */
  groupLeaderUserIds?: Array<string> | undefined;
  /**
   * The request configuration list of the configuration template. If not provided, the default request configuration will be used.
   */
  requestConfigurations?: Array<RequestConfiguration> | undefined;
  /**
   * # CreateRequestConfigurationInfoList Object
   *
   * @remarks
   * ### Description
   * The `CreateRequestConfigurationInfoList` object is used as an input to the CreateRequestConfigurations API.
   *
   * ### Formatting Requirements
   * The `CreateRequestConfigurationInfoList` object must contain a list of `RequestConfiguration` objects.
   * Exactly one default `RequestConfiguration` must be provided.  A default `RequestConfiguration` is one with a `condition` of `null`
   * and a `priority` of `0`.  The default `RequestConfiguration` will be used when no other `RequestConfiguration` matches the request.
   *
   * Only one `RequestConfiguration` may be provided for each priority, and the priorities must be contiguous.  For example, if there are
   * two `RequestConfigurations` with priorities 0 and 2, there must be a `RequestConfiguration` with priority 1.
   *
   * To use the `condition` field, the `condition` must be a valid JSON object.
   *
   * The `condition` must be a JSON object with the key `group_ids` (more options may be added in the future), whose value is a list of
   * group IDs.
   * The `condition` will match if the user requesting access is a member of any of the groups in the list. Currently, we only support
   * using a single group as a condition.
   */
  requestConfigurationList?: CreateRequestConfigurationInfoList | undefined;
  /**
   * Custom request notification sent to the requester when the request is approved.
   */
  customRequestNotification?: string | null | undefined;
  riskSensitivityOverride?: RiskSensitivityEnum | undefined;
};

/** @internal */
export const UpdateGroupInfo$inboundSchema: z.ZodType<
  UpdateGroupInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  admin_owner_id: z.string().optional(),
  max_duration: z.number().int().optional(),
  recommended_duration: z.number().int().optional(),
  require_manager_approval: z.boolean().optional(),
  require_support_ticket: z.boolean().optional(),
  folder_id: z.string().optional(),
  require_mfa_to_approve: z.boolean().optional(),
  require_mfa_to_request: z.boolean().optional(),
  auto_approval: z.boolean().optional(),
  configuration_template_id: z.string().optional(),
  request_template_id: z.string().optional(),
  is_requestable: z.boolean().optional(),
  group_leader_user_ids: z.array(z.string()).optional(),
  request_configurations: z.array(RequestConfiguration$inboundSchema)
    .optional(),
  request_configuration_list: CreateRequestConfigurationInfoList$inboundSchema
    .optional(),
  custom_request_notification: z.nullable(z.string()).optional(),
  risk_sensitivity_override: RiskSensitivityEnum$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "admin_owner_id": "adminOwnerId",
    "max_duration": "maxDuration",
    "recommended_duration": "recommendedDuration",
    "require_manager_approval": "requireManagerApproval",
    "require_support_ticket": "requireSupportTicket",
    "folder_id": "folderId",
    "require_mfa_to_approve": "requireMfaToApprove",
    "require_mfa_to_request": "requireMfaToRequest",
    "auto_approval": "autoApproval",
    "configuration_template_id": "configurationTemplateId",
    "request_template_id": "requestTemplateId",
    "is_requestable": "isRequestable",
    "group_leader_user_ids": "groupLeaderUserIds",
    "request_configurations": "requestConfigurations",
    "request_configuration_list": "requestConfigurationList",
    "custom_request_notification": "customRequestNotification",
    "risk_sensitivity_override": "riskSensitivityOverride",
  });
});

/** @internal */
export type UpdateGroupInfo$Outbound = {
  group_id: string;
  name?: string | undefined;
  description?: string | undefined;
  admin_owner_id?: string | undefined;
  max_duration?: number | undefined;
  recommended_duration?: number | undefined;
  require_manager_approval?: boolean | undefined;
  require_support_ticket?: boolean | undefined;
  folder_id?: string | undefined;
  require_mfa_to_approve?: boolean | undefined;
  require_mfa_to_request?: boolean | undefined;
  auto_approval?: boolean | undefined;
  configuration_template_id?: string | undefined;
  request_template_id?: string | undefined;
  is_requestable?: boolean | undefined;
  group_leader_user_ids?: Array<string> | undefined;
  request_configurations?: Array<RequestConfiguration$Outbound> | undefined;
  request_configuration_list?:
    | CreateRequestConfigurationInfoList$Outbound
    | undefined;
  custom_request_notification?: string | null | undefined;
  risk_sensitivity_override?: string | undefined;
};

/** @internal */
export const UpdateGroupInfo$outboundSchema: z.ZodType<
  UpdateGroupInfo$Outbound,
  z.ZodTypeDef,
  UpdateGroupInfo
> = z.object({
  groupId: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  adminOwnerId: z.string().optional(),
  maxDuration: z.number().int().optional(),
  recommendedDuration: z.number().int().optional(),
  requireManagerApproval: z.boolean().optional(),
  requireSupportTicket: z.boolean().optional(),
  folderId: z.string().optional(),
  requireMfaToApprove: z.boolean().optional(),
  requireMfaToRequest: z.boolean().optional(),
  autoApproval: z.boolean().optional(),
  configurationTemplateId: z.string().optional(),
  requestTemplateId: z.string().optional(),
  isRequestable: z.boolean().optional(),
  groupLeaderUserIds: z.array(z.string()).optional(),
  requestConfigurations: z.array(RequestConfiguration$outboundSchema)
    .optional(),
  requestConfigurationList: CreateRequestConfigurationInfoList$outboundSchema
    .optional(),
  customRequestNotification: z.nullable(z.string()).optional(),
  riskSensitivityOverride: RiskSensitivityEnum$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    adminOwnerId: "admin_owner_id",
    maxDuration: "max_duration",
    recommendedDuration: "recommended_duration",
    requireManagerApproval: "require_manager_approval",
    requireSupportTicket: "require_support_ticket",
    folderId: "folder_id",
    requireMfaToApprove: "require_mfa_to_approve",
    requireMfaToRequest: "require_mfa_to_request",
    autoApproval: "auto_approval",
    configurationTemplateId: "configuration_template_id",
    requestTemplateId: "request_template_id",
    isRequestable: "is_requestable",
    groupLeaderUserIds: "group_leader_user_ids",
    requestConfigurations: "request_configurations",
    requestConfigurationList: "request_configuration_list",
    customRequestNotification: "custom_request_notification",
    riskSensitivityOverride: "risk_sensitivity_override",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupInfo$ {
  /** @deprecated use `UpdateGroupInfo$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupInfo$inboundSchema;
  /** @deprecated use `UpdateGroupInfo$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupInfo$outboundSchema;
  /** @deprecated use `UpdateGroupInfo$Outbound` instead. */
  export type Outbound = UpdateGroupInfo$Outbound;
}

export function updateGroupInfoToJSON(
  updateGroupInfo: UpdateGroupInfo,
): string {
  return JSON.stringify(UpdateGroupInfo$outboundSchema.parse(updateGroupInfo));
}

export function updateGroupInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupInfo' from JSON`,
  );
}
