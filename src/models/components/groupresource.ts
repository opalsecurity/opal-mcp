/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceAccessLevel,
  ResourceAccessLevel$inboundSchema,
  ResourceAccessLevel$Outbound,
  ResourceAccessLevel$outboundSchema,
} from "./resourceaccesslevel.js";

/**
 * # GroupResource Object
 *
 * @remarks
 * ### Description
 * The `GroupResource` object is used to represent a relationship between a group and a resource.
 */
export type GroupResource = {
  /**
   * The ID of the group.
   */
  groupId: string;
  /**
   * The ID of the resource.
   */
  resourceId: string;
  /**
   * # Access Level Object
   *
   * @remarks
   * ### Description
   * The `AccessLevel` object is used to represent the level of access that a principal has. The "default" access
   * level is a `AccessLevel` object whose fields are all empty strings.
   *
   * ### Usage Example
   * View the `AccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
   */
  accessLevel: ResourceAccessLevel;
};

/** @internal */
export const GroupResource$inboundSchema: z.ZodType<
  GroupResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  resource_id: z.string(),
  access_level: ResourceAccessLevel$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "resource_id": "resourceId",
    "access_level": "accessLevel",
  });
});

/** @internal */
export type GroupResource$Outbound = {
  group_id: string;
  resource_id: string;
  access_level: ResourceAccessLevel$Outbound;
};

/** @internal */
export const GroupResource$outboundSchema: z.ZodType<
  GroupResource$Outbound,
  z.ZodTypeDef,
  GroupResource
> = z.object({
  groupId: z.string(),
  resourceId: z.string(),
  accessLevel: ResourceAccessLevel$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    resourceId: "resource_id",
    accessLevel: "access_level",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupResource$ {
  /** @deprecated use `GroupResource$inboundSchema` instead. */
  export const inboundSchema = GroupResource$inboundSchema;
  /** @deprecated use `GroupResource$outboundSchema` instead. */
  export const outboundSchema = GroupResource$outboundSchema;
  /** @deprecated use `GroupResource$Outbound` instead. */
  export type Outbound = GroupResource$Outbound;
}

export function groupResourceToJSON(groupResource: GroupResource): string {
  return JSON.stringify(GroupResource$outboundSchema.parse(groupResource));
}

export function groupResourceFromJSON(
  jsonString: string,
): SafeParseResult<GroupResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupResource' from JSON`,
  );
}
