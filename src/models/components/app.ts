/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppTypeEnum,
  AppTypeEnum$inboundSchema,
  AppTypeEnum$outboundSchema,
} from "./apptypeenum.js";
import {
  AppValidation,
  AppValidation$inboundSchema,
  AppValidation$Outbound,
  AppValidation$outboundSchema,
} from "./appvalidation.js";

/**
 * # App Object
 *
 * @remarks
 * ### Description
 * The `App` object is used to represent an app to an application.
 *
 * ### Usage Example
 * List from the `GET Apps` endpoint.
 */
export type App = {
  /**
   * The ID of the app.
   */
  appId: string;
  /**
   * The name of the app.
   */
  name: string;
  /**
   * A description of the app.
   */
  description: string;
  /**
   * The ID of the owner of the app.
   */
  adminOwnerId: string;
  /**
   * The type of an app.
   */
  appType: AppTypeEnum;
  /**
   * Validation checks of an apps' configuration and permissions.
   */
  validations?: Array<AppValidation> | undefined;
};

/** @internal */
export const App$inboundSchema: z.ZodType<App, z.ZodTypeDef, unknown> = z
  .object({
    app_id: z.string(),
    name: z.string(),
    description: z.string(),
    admin_owner_id: z.string(),
    app_type: AppTypeEnum$inboundSchema,
    validations: z.array(AppValidation$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "app_id": "appId",
      "admin_owner_id": "adminOwnerId",
      "app_type": "appType",
    });
  });

/** @internal */
export type App$Outbound = {
  app_id: string;
  name: string;
  description: string;
  admin_owner_id: string;
  app_type: string;
  validations?: Array<AppValidation$Outbound> | undefined;
};

/** @internal */
export const App$outboundSchema: z.ZodType<App$Outbound, z.ZodTypeDef, App> = z
  .object({
    appId: z.string(),
    name: z.string(),
    description: z.string(),
    adminOwnerId: z.string(),
    appType: AppTypeEnum$outboundSchema,
    validations: z.array(AppValidation$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      appId: "app_id",
      adminOwnerId: "admin_owner_id",
      appType: "app_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace App$ {
  /** @deprecated use `App$inboundSchema` instead. */
  export const inboundSchema = App$inboundSchema;
  /** @deprecated use `App$outboundSchema` instead. */
  export const outboundSchema = App$outboundSchema;
  /** @deprecated use `App$Outbound` instead. */
  export type Outbound = App$Outbound;
}

export function appToJSON(app: App): string {
  return JSON.stringify(App$outboundSchema.parse(app));
}

export function appFromJSON(
  jsonString: string,
): SafeParseResult<App, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => App$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'App' from JSON`,
  );
}
