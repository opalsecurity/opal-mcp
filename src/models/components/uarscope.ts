/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GroupTypeEnum,
  GroupTypeEnum$inboundSchema,
  GroupTypeEnum$outboundSchema,
} from "./grouptypeenum.js";
import {
  ResourceTypeEnum,
  ResourceTypeEnum$inboundSchema,
  ResourceTypeEnum$outboundSchema,
} from "./resourcetypeenum.js";
import {
  TagFilter,
  TagFilter$inboundSchema,
  TagFilter$Outbound,
  TagFilter$outboundSchema,
} from "./tagfilter.js";

/**
 * Specifies what users can see during an Access Review
 */
export const GroupVisibility = {
  Strict: "STRICT",
  ViewVisibleAndAssigned: "VIEW_VISIBLE_AND_ASSIGNED",
  ViewAll: "VIEW_ALL",
} as const;
/**
 * Specifies what users can see during an Access Review
 */
export type GroupVisibility = ClosedEnum<typeof GroupVisibility>;

/**
 * Specifies whether entities must match all (AND) or any (OR) of the filters.
 */
export const FilterOperator = {
  Any: "ANY",
  All: "ALL",
} as const;
/**
 * Specifies whether entities must match all (AND) or any (OR) of the filters.
 */
export type FilterOperator = ClosedEnum<typeof FilterOperator>;

/**
 * If set, the access review will only contain resources and groups that match at least one of the filters in scope.
 */
export type UARScope = {
  /**
   * Specifies what users can see during an Access Review
   */
  groupVisibility?: GroupVisibility | undefined;
  /**
   * The access review will only include the following users. If any users are selected, any entity filters will be applied to only the entities that the selected users have access to.
   */
  users?: Array<string> | undefined;
  /**
   * Specifies whether entities must match all (AND) or any (OR) of the filters.
   */
  filterOperator?: FilterOperator | undefined;
  /**
   * This access review will include resources and groups with ids in the given strings.
   */
  entities?: Array<string> | undefined;
  /**
   * This access review will include items in the specified applications
   */
  apps?: Array<string> | undefined;
  /**
   * This access review will include resources and groups who are owned by one of the owners corresponding to the given IDs.
   */
  admins?: Array<string> | undefined;
  /**
   * This access review will include items of the specified group types
   */
  groupTypes?: Array<GroupTypeEnum> | undefined;
  /**
   * This access review will include items of the specified resource types
   */
  resourceTypes?: Array<ResourceTypeEnum> | undefined;
  includeGroupBindings?: boolean | undefined;
  /**
   * This access review will include resources and groups who are tagged with one of the given tags.
   */
  tags?: Array<TagFilter> | undefined;
  /**
   * This access review will include resources and groups whose name contains one of the given strings.
   */
  names?: Array<string> | undefined;
};

/** @internal */
export const GroupVisibility$inboundSchema: z.ZodNativeEnum<
  typeof GroupVisibility
> = z.nativeEnum(GroupVisibility);

/** @internal */
export const GroupVisibility$outboundSchema: z.ZodNativeEnum<
  typeof GroupVisibility
> = GroupVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupVisibility$ {
  /** @deprecated use `GroupVisibility$inboundSchema` instead. */
  export const inboundSchema = GroupVisibility$inboundSchema;
  /** @deprecated use `GroupVisibility$outboundSchema` instead. */
  export const outboundSchema = GroupVisibility$outboundSchema;
}

/** @internal */
export const FilterOperator$inboundSchema: z.ZodNativeEnum<
  typeof FilterOperator
> = z.nativeEnum(FilterOperator);

/** @internal */
export const FilterOperator$outboundSchema: z.ZodNativeEnum<
  typeof FilterOperator
> = FilterOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterOperator$ {
  /** @deprecated use `FilterOperator$inboundSchema` instead. */
  export const inboundSchema = FilterOperator$inboundSchema;
  /** @deprecated use `FilterOperator$outboundSchema` instead. */
  export const outboundSchema = FilterOperator$outboundSchema;
}

/** @internal */
export const UARScope$inboundSchema: z.ZodType<
  UARScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_visibility: GroupVisibility$inboundSchema.optional(),
  users: z.array(z.string()).optional(),
  filter_operator: FilterOperator$inboundSchema.optional(),
  entities: z.array(z.string()).optional(),
  apps: z.array(z.string()).optional(),
  admins: z.array(z.string()).optional(),
  group_types: z.array(GroupTypeEnum$inboundSchema).optional(),
  resource_types: z.array(ResourceTypeEnum$inboundSchema).optional(),
  include_group_bindings: z.boolean().optional(),
  tags: z.array(TagFilter$inboundSchema).optional(),
  names: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "group_visibility": "groupVisibility",
    "filter_operator": "filterOperator",
    "group_types": "groupTypes",
    "resource_types": "resourceTypes",
    "include_group_bindings": "includeGroupBindings",
  });
});

/** @internal */
export type UARScope$Outbound = {
  group_visibility?: string | undefined;
  users?: Array<string> | undefined;
  filter_operator?: string | undefined;
  entities?: Array<string> | undefined;
  apps?: Array<string> | undefined;
  admins?: Array<string> | undefined;
  group_types?: Array<string> | undefined;
  resource_types?: Array<string> | undefined;
  include_group_bindings?: boolean | undefined;
  tags?: Array<TagFilter$Outbound> | undefined;
  names?: Array<string> | undefined;
};

/** @internal */
export const UARScope$outboundSchema: z.ZodType<
  UARScope$Outbound,
  z.ZodTypeDef,
  UARScope
> = z.object({
  groupVisibility: GroupVisibility$outboundSchema.optional(),
  users: z.array(z.string()).optional(),
  filterOperator: FilterOperator$outboundSchema.optional(),
  entities: z.array(z.string()).optional(),
  apps: z.array(z.string()).optional(),
  admins: z.array(z.string()).optional(),
  groupTypes: z.array(GroupTypeEnum$outboundSchema).optional(),
  resourceTypes: z.array(ResourceTypeEnum$outboundSchema).optional(),
  includeGroupBindings: z.boolean().optional(),
  tags: z.array(TagFilter$outboundSchema).optional(),
  names: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    groupVisibility: "group_visibility",
    filterOperator: "filter_operator",
    groupTypes: "group_types",
    resourceTypes: "resource_types",
    includeGroupBindings: "include_group_bindings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UARScope$ {
  /** @deprecated use `UARScope$inboundSchema` instead. */
  export const inboundSchema = UARScope$inboundSchema;
  /** @deprecated use `UARScope$outboundSchema` instead. */
  export const outboundSchema = UARScope$outboundSchema;
  /** @deprecated use `UARScope$Outbound` instead. */
  export type Outbound = UARScope$Outbound;
}

export function uarScopeToJSON(uarScope: UARScope): string {
  return JSON.stringify(UARScope$outboundSchema.parse(uarScope));
}

export function uarScopeFromJSON(
  jsonString: string,
): SafeParseResult<UARScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UARScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UARScope' from JSON`,
  );
}
