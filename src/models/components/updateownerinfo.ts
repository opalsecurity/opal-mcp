/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # UpdateOwnerInfo Object
 *
 * @remarks
 * ### Description
 * The `UpdateOwnerInfo` object is used as an input to the UpdateOwner API.
 */
export type UpdateOwnerInfo = {
  /**
   * The ID of the owner.
   */
  ownerId: string;
  /**
   * The name of the owner.
   */
  name?: string | undefined;
  /**
   * A description of the owner.
   */
  description?: string | undefined;
  /**
   * The amount of time (in minutes) before the next reviewer is notified. Use 0 to remove escalation policy.
   */
  accessRequestEscalationPeriod?: number | undefined;
  /**
   * The message channel id for the reviewer channel. Use "" to remove an existing message channel.
   */
  reviewerMessageChannelId?: string | undefined;
  /**
   * Sync this owner's user list with a source group. Use "" to remove an existing source group.
   */
  sourceGroupId?: string | undefined;
};

/** @internal */
export const UpdateOwnerInfo$inboundSchema: z.ZodType<
  UpdateOwnerInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  owner_id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  access_request_escalation_period: z.number().int().optional(),
  reviewer_message_channel_id: z.string().optional(),
  source_group_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "access_request_escalation_period": "accessRequestEscalationPeriod",
    "reviewer_message_channel_id": "reviewerMessageChannelId",
    "source_group_id": "sourceGroupId",
  });
});

/** @internal */
export type UpdateOwnerInfo$Outbound = {
  owner_id: string;
  name?: string | undefined;
  description?: string | undefined;
  access_request_escalation_period?: number | undefined;
  reviewer_message_channel_id?: string | undefined;
  source_group_id?: string | undefined;
};

/** @internal */
export const UpdateOwnerInfo$outboundSchema: z.ZodType<
  UpdateOwnerInfo$Outbound,
  z.ZodTypeDef,
  UpdateOwnerInfo
> = z.object({
  ownerId: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  accessRequestEscalationPeriod: z.number().int().optional(),
  reviewerMessageChannelId: z.string().optional(),
  sourceGroupId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    accessRequestEscalationPeriod: "access_request_escalation_period",
    reviewerMessageChannelId: "reviewer_message_channel_id",
    sourceGroupId: "source_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOwnerInfo$ {
  /** @deprecated use `UpdateOwnerInfo$inboundSchema` instead. */
  export const inboundSchema = UpdateOwnerInfo$inboundSchema;
  /** @deprecated use `UpdateOwnerInfo$outboundSchema` instead. */
  export const outboundSchema = UpdateOwnerInfo$outboundSchema;
  /** @deprecated use `UpdateOwnerInfo$Outbound` instead. */
  export type Outbound = UpdateOwnerInfo$Outbound;
}

export function updateOwnerInfoToJSON(
  updateOwnerInfo: UpdateOwnerInfo,
): string {
  return JSON.stringify(UpdateOwnerInfo$outboundSchema.parse(updateOwnerInfo));
}

export function updateOwnerInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOwnerInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOwnerInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOwnerInfo' from JSON`,
  );
}
