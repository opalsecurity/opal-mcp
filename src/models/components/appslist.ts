/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  App,
  App$inboundSchema,
  App$Outbound,
  App$outboundSchema,
} from "./app.js";

/**
 * A list of apps.
 */
export type AppsList = {
  apps: Array<App>;
};

/** @internal */
export const AppsList$inboundSchema: z.ZodType<
  AppsList,
  z.ZodTypeDef,
  unknown
> = z.object({
  apps: z.array(App$inboundSchema),
});

/** @internal */
export type AppsList$Outbound = {
  apps: Array<App$Outbound>;
};

/** @internal */
export const AppsList$outboundSchema: z.ZodType<
  AppsList$Outbound,
  z.ZodTypeDef,
  AppsList
> = z.object({
  apps: z.array(App$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppsList$ {
  /** @deprecated use `AppsList$inboundSchema` instead. */
  export const inboundSchema = AppsList$inboundSchema;
  /** @deprecated use `AppsList$outboundSchema` instead. */
  export const outboundSchema = AppsList$outboundSchema;
  /** @deprecated use `AppsList$Outbound` instead. */
  export type Outbound = AppsList$Outbound;
}

export function appsListToJSON(appsList: AppsList): string {
  return JSON.stringify(AppsList$outboundSchema.parse(appsList));
}

export function appsListFromJSON(
  jsonString: string,
): SafeParseResult<AppsList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppsList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppsList' from JSON`,
  );
}
