/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestTemplateCustomFieldTypeEnum,
  RequestTemplateCustomFieldTypeEnum$inboundSchema,
  RequestTemplateCustomFieldTypeEnum$outboundSchema,
} from "./requesttemplatecustomfieldtypeenum.js";

export type FieldValue = string | boolean;

export type RequestCustomFieldResponse = {
  fieldName: string;
  /**
   * The type of the custom request field.
   */
  fieldType: RequestTemplateCustomFieldTypeEnum;
  fieldValue: string | boolean;
};

/** @internal */
export const FieldValue$inboundSchema: z.ZodType<
  FieldValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean()]);

/** @internal */
export type FieldValue$Outbound = string | boolean;

/** @internal */
export const FieldValue$outboundSchema: z.ZodType<
  FieldValue$Outbound,
  z.ZodTypeDef,
  FieldValue
> = z.union([z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldValue$ {
  /** @deprecated use `FieldValue$inboundSchema` instead. */
  export const inboundSchema = FieldValue$inboundSchema;
  /** @deprecated use `FieldValue$outboundSchema` instead. */
  export const outboundSchema = FieldValue$outboundSchema;
  /** @deprecated use `FieldValue$Outbound` instead. */
  export type Outbound = FieldValue$Outbound;
}

export function fieldValueToJSON(fieldValue: FieldValue): string {
  return JSON.stringify(FieldValue$outboundSchema.parse(fieldValue));
}

export function fieldValueFromJSON(
  jsonString: string,
): SafeParseResult<FieldValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldValue' from JSON`,
  );
}

/** @internal */
export const RequestCustomFieldResponse$inboundSchema: z.ZodType<
  RequestCustomFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  field_name: z.string(),
  field_type: RequestTemplateCustomFieldTypeEnum$inboundSchema,
  field_value: z.union([z.string(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "field_name": "fieldName",
    "field_type": "fieldType",
    "field_value": "fieldValue",
  });
});

/** @internal */
export type RequestCustomFieldResponse$Outbound = {
  field_name: string;
  field_type: string;
  field_value: string | boolean;
};

/** @internal */
export const RequestCustomFieldResponse$outboundSchema: z.ZodType<
  RequestCustomFieldResponse$Outbound,
  z.ZodTypeDef,
  RequestCustomFieldResponse
> = z.object({
  fieldName: z.string(),
  fieldType: RequestTemplateCustomFieldTypeEnum$outboundSchema,
  fieldValue: z.union([z.string(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    fieldName: "field_name",
    fieldType: "field_type",
    fieldValue: "field_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCustomFieldResponse$ {
  /** @deprecated use `RequestCustomFieldResponse$inboundSchema` instead. */
  export const inboundSchema = RequestCustomFieldResponse$inboundSchema;
  /** @deprecated use `RequestCustomFieldResponse$outboundSchema` instead. */
  export const outboundSchema = RequestCustomFieldResponse$outboundSchema;
  /** @deprecated use `RequestCustomFieldResponse$Outbound` instead. */
  export type Outbound = RequestCustomFieldResponse$Outbound;
}

export function requestCustomFieldResponseToJSON(
  requestCustomFieldResponse: RequestCustomFieldResponse,
): string {
  return JSON.stringify(
    RequestCustomFieldResponse$outboundSchema.parse(requestCustomFieldResponse),
  );
}

export function requestCustomFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<RequestCustomFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCustomFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCustomFieldResponse' from JSON`,
  );
}
