/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UARReviewerAssignmentPolicyEnum,
  UARReviewerAssignmentPolicyEnum$inboundSchema,
  UARReviewerAssignmentPolicyEnum$outboundSchema,
} from "./uarreviewerassignmentpolicyenum.js";
import {
  UARScope,
  UARScope$inboundSchema,
  UARScope$Outbound,
  UARScope$outboundSchema,
} from "./uarscope.js";

/**
 * A user access review.
 */
export type Uar = {
  /**
   * The ID of the UAR.
   */
  uarId: string;
  /**
   * The name of the UAR.
   */
  name: string;
  /**
   * A policy for auto-assigning reviewers. If auto-assignment is on, specific assignments can still be manually adjusted after the access review is started. Default is Manually.
   */
  reviewerAssignmentPolicy: UARReviewerAssignmentPolicyEnum;
  /**
   * A bool representing whether to send a notification to reviewers when they're assigned a new review. Default is False.
   */
  sendReviewerAssignmentNotification: boolean;
  /**
   * The last day for reviewers to complete their access reviews.
   */
  deadline: Date;
  /**
   * The time zone name (as defined by the IANA Time Zone database) used in the access review deadline and exported audit report. Default is America/Los_Angeles.
   */
  timeZone: string;
  /**
   * A bool representing whether to present a warning when a user is the only reviewer for themself. Default is False.
   */
  selfReviewAllowed: boolean;
  /**
   * If set, the access review will only contain resources and groups that match at least one of the filters in scope.
   */
  uarScope?: UARScope | undefined;
};

/** @internal */
export const Uar$inboundSchema: z.ZodType<Uar, z.ZodTypeDef, unknown> = z
  .object({
    uar_id: z.string(),
    name: z.string(),
    reviewer_assignment_policy: UARReviewerAssignmentPolicyEnum$inboundSchema,
    send_reviewer_assignment_notification: z.boolean(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    time_zone: z.string(),
    self_review_allowed: z.boolean(),
    uar_scope: UARScope$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "uar_id": "uarId",
      "reviewer_assignment_policy": "reviewerAssignmentPolicy",
      "send_reviewer_assignment_notification":
        "sendReviewerAssignmentNotification",
      "time_zone": "timeZone",
      "self_review_allowed": "selfReviewAllowed",
      "uar_scope": "uarScope",
    });
  });

/** @internal */
export type Uar$Outbound = {
  uar_id: string;
  name: string;
  reviewer_assignment_policy: string;
  send_reviewer_assignment_notification: boolean;
  deadline: string;
  time_zone: string;
  self_review_allowed: boolean;
  uar_scope?: UARScope$Outbound | undefined;
};

/** @internal */
export const Uar$outboundSchema: z.ZodType<Uar$Outbound, z.ZodTypeDef, Uar> = z
  .object({
    uarId: z.string(),
    name: z.string(),
    reviewerAssignmentPolicy: UARReviewerAssignmentPolicyEnum$outboundSchema,
    sendReviewerAssignmentNotification: z.boolean(),
    deadline: z.date().transform(v => v.toISOString()),
    timeZone: z.string(),
    selfReviewAllowed: z.boolean(),
    uarScope: UARScope$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      uarId: "uar_id",
      reviewerAssignmentPolicy: "reviewer_assignment_policy",
      sendReviewerAssignmentNotification:
        "send_reviewer_assignment_notification",
      timeZone: "time_zone",
      selfReviewAllowed: "self_review_allowed",
      uarScope: "uar_scope",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Uar$ {
  /** @deprecated use `Uar$inboundSchema` instead. */
  export const inboundSchema = Uar$inboundSchema;
  /** @deprecated use `Uar$outboundSchema` instead. */
  export const outboundSchema = Uar$outboundSchema;
  /** @deprecated use `Uar$Outbound` instead. */
  export type Outbound = Uar$Outbound;
}

export function uarToJSON(uar: Uar): string {
  return JSON.stringify(Uar$outboundSchema.parse(uar));
}

export function uarFromJSON(
  jsonString: string,
): SafeParseResult<Uar, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Uar$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Uar' from JSON`,
  );
}
