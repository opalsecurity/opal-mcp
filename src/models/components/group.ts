/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GroupRemoteInfo,
  GroupRemoteInfo$inboundSchema,
  GroupRemoteInfo$Outbound,
  GroupRemoteInfo$outboundSchema,
} from "./groupremoteinfo.js";
import {
  GroupTypeEnum,
  GroupTypeEnum$inboundSchema,
  GroupTypeEnum$outboundSchema,
} from "./grouptypeenum.js";
import {
  RequestConfiguration,
  RequestConfiguration$inboundSchema,
  RequestConfiguration$Outbound,
  RequestConfiguration$outboundSchema,
} from "./requestconfiguration.js";
import {
  RiskSensitivityEnum,
  RiskSensitivityEnum$inboundSchema,
  RiskSensitivityEnum$outboundSchema,
} from "./risksensitivityenum.js";

/**
 * The risk sensitivity level for the group. When an override is set, this field will match that.
 */
export const GroupRiskSensitivity = {
  Unknown: "UNKNOWN",
  Critical: "CRITICAL",
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
  None: "NONE",
} as const;
/**
 * The risk sensitivity level for the group. When an override is set, this field will match that.
 */
export type GroupRiskSensitivity = ClosedEnum<typeof GroupRiskSensitivity>;

/**
 * # Group Object
 *
 * @remarks
 * ### Description
 * The `Group` object is used to represent a group.
 *
 * ### Usage Example
 * Update from the `UPDATE Groups` endpoint.
 */
export type Group = {
  /**
   * The ID of the group.
   */
  groupId: string;
  /**
   * The ID of the group's app.
   */
  appId?: string | undefined;
  /**
   * The name of the group.
   */
  name?: string | undefined;
  /**
   * A description of the group.
   */
  description?: string | undefined;
  /**
   * The ID of the owner of the group.
   */
  adminOwnerId?: string | undefined;
  /**
   * A list of User IDs for the group leaders of the group
   */
  groupLeaderUserIds?: Array<string> | undefined;
  /**
   * The ID of the remote.
   */
  remoteId?: string | undefined;
  /**
   * The name of the remote.
   */
  remoteName?: string | undefined;
  /**
   * The type of the group.
   */
  groupType?: GroupTypeEnum | undefined;
  /**
   * The maximum duration for which the group can be requested (in minutes).
   */
  maxDuration?: number | undefined;
  /**
   * The recommended duration for which the group should be requested (in minutes). -1 represents an indefinite duration.
   */
  recommendedDuration?: number | undefined;
  /**
   * A bool representing whether or not access requests to the group require manager approval.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  requireManagerApproval?: boolean | undefined;
  /**
   * A bool representing whether or not access requests to the group require an access ticket.
   */
  requireSupportTicket?: boolean | undefined;
  /**
   * A bool representing whether or not to require MFA for reviewers to approve requests for this group.
   */
  requireMfaToApprove?: boolean | undefined;
  /**
   * A bool representing whether or not to require MFA for requesting access to this group.
   */
  requireMfaToRequest?: boolean | undefined;
  /**
   * A bool representing whether or not to automatically approve requests to this group.
   */
  autoApproval?: boolean | undefined;
  /**
   * The ID of the associated request template.
   */
  requestTemplateId?: string | undefined;
  /**
   * The ID of the associated configuration template.
   */
  configurationTemplateId?: string | undefined;
  /**
   * The ID of the associated group binding.
   */
  groupBindingId?: string | undefined;
  /**
   * A bool representing whether or not to allow access requests to this group.
   */
  isRequestable?: boolean | undefined;
  /**
   * A list of request configurations for this group.
   */
  requestConfigurations?: Array<RequestConfiguration> | undefined;
  /**
   * A list of request configurations for this group. Deprecated in favor of `request_configurations`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  requestConfigurationList?: Array<RequestConfiguration> | undefined;
  /**
   * JSON metadata about the remote group. Only set for items linked to remote systems. See [this guide](https://docs.opal.dev/reference/end-system-objects) for details.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  metadata?: string | undefined;
  /**
   * Information that defines the remote group. This replaces the deprecated remote_id and metadata fields.
   */
  remoteInfo?: GroupRemoteInfo | undefined;
  /**
   * Custom request notification sent to the requester when the request is approved.
   */
  customRequestNotification?: string | null | undefined;
  /**
   * The risk sensitivity level for the group. When an override is set, this field will match that.
   */
  riskSensitivity?: GroupRiskSensitivity | undefined;
  riskSensitivityOverride?: RiskSensitivityEnum | undefined;
};

/** @internal */
export const GroupRiskSensitivity$inboundSchema: z.ZodNativeEnum<
  typeof GroupRiskSensitivity
> = z.nativeEnum(GroupRiskSensitivity);

/** @internal */
export const GroupRiskSensitivity$outboundSchema: z.ZodNativeEnum<
  typeof GroupRiskSensitivity
> = GroupRiskSensitivity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupRiskSensitivity$ {
  /** @deprecated use `GroupRiskSensitivity$inboundSchema` instead. */
  export const inboundSchema = GroupRiskSensitivity$inboundSchema;
  /** @deprecated use `GroupRiskSensitivity$outboundSchema` instead. */
  export const outboundSchema = GroupRiskSensitivity$outboundSchema;
}

/** @internal */
export const Group$inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown> = z
  .object({
    group_id: z.string(),
    app_id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    admin_owner_id: z.string().optional(),
    group_leader_user_ids: z.array(z.string()).optional(),
    remote_id: z.string().optional(),
    remote_name: z.string().optional(),
    group_type: GroupTypeEnum$inboundSchema.optional(),
    max_duration: z.number().int().optional(),
    recommended_duration: z.number().int().optional(),
    require_manager_approval: z.boolean().optional(),
    require_support_ticket: z.boolean().optional(),
    require_mfa_to_approve: z.boolean().optional(),
    require_mfa_to_request: z.boolean().optional(),
    auto_approval: z.boolean().optional(),
    request_template_id: z.string().optional(),
    configuration_template_id: z.string().optional(),
    group_binding_id: z.string().optional(),
    is_requestable: z.boolean().optional(),
    request_configurations: z.array(RequestConfiguration$inboundSchema)
      .optional(),
    request_configuration_list: z.array(RequestConfiguration$inboundSchema)
      .optional(),
    metadata: z.string().optional(),
    remote_info: GroupRemoteInfo$inboundSchema.optional(),
    custom_request_notification: z.nullable(z.string()).optional(),
    risk_sensitivity: GroupRiskSensitivity$inboundSchema.optional(),
    risk_sensitivity_override: RiskSensitivityEnum$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "group_id": "groupId",
      "app_id": "appId",
      "admin_owner_id": "adminOwnerId",
      "group_leader_user_ids": "groupLeaderUserIds",
      "remote_id": "remoteId",
      "remote_name": "remoteName",
      "group_type": "groupType",
      "max_duration": "maxDuration",
      "recommended_duration": "recommendedDuration",
      "require_manager_approval": "requireManagerApproval",
      "require_support_ticket": "requireSupportTicket",
      "require_mfa_to_approve": "requireMfaToApprove",
      "require_mfa_to_request": "requireMfaToRequest",
      "auto_approval": "autoApproval",
      "request_template_id": "requestTemplateId",
      "configuration_template_id": "configurationTemplateId",
      "group_binding_id": "groupBindingId",
      "is_requestable": "isRequestable",
      "request_configurations": "requestConfigurations",
      "request_configuration_list": "requestConfigurationList",
      "remote_info": "remoteInfo",
      "custom_request_notification": "customRequestNotification",
      "risk_sensitivity": "riskSensitivity",
      "risk_sensitivity_override": "riskSensitivityOverride",
    });
  });

/** @internal */
export type Group$Outbound = {
  group_id: string;
  app_id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  admin_owner_id?: string | undefined;
  group_leader_user_ids?: Array<string> | undefined;
  remote_id?: string | undefined;
  remote_name?: string | undefined;
  group_type?: string | undefined;
  max_duration?: number | undefined;
  recommended_duration?: number | undefined;
  require_manager_approval?: boolean | undefined;
  require_support_ticket?: boolean | undefined;
  require_mfa_to_approve?: boolean | undefined;
  require_mfa_to_request?: boolean | undefined;
  auto_approval?: boolean | undefined;
  request_template_id?: string | undefined;
  configuration_template_id?: string | undefined;
  group_binding_id?: string | undefined;
  is_requestable?: boolean | undefined;
  request_configurations?: Array<RequestConfiguration$Outbound> | undefined;
  request_configuration_list?: Array<RequestConfiguration$Outbound> | undefined;
  metadata?: string | undefined;
  remote_info?: GroupRemoteInfo$Outbound | undefined;
  custom_request_notification?: string | null | undefined;
  risk_sensitivity?: string | undefined;
  risk_sensitivity_override?: string | undefined;
};

/** @internal */
export const Group$outboundSchema: z.ZodType<
  Group$Outbound,
  z.ZodTypeDef,
  Group
> = z.object({
  groupId: z.string(),
  appId: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  adminOwnerId: z.string().optional(),
  groupLeaderUserIds: z.array(z.string()).optional(),
  remoteId: z.string().optional(),
  remoteName: z.string().optional(),
  groupType: GroupTypeEnum$outboundSchema.optional(),
  maxDuration: z.number().int().optional(),
  recommendedDuration: z.number().int().optional(),
  requireManagerApproval: z.boolean().optional(),
  requireSupportTicket: z.boolean().optional(),
  requireMfaToApprove: z.boolean().optional(),
  requireMfaToRequest: z.boolean().optional(),
  autoApproval: z.boolean().optional(),
  requestTemplateId: z.string().optional(),
  configurationTemplateId: z.string().optional(),
  groupBindingId: z.string().optional(),
  isRequestable: z.boolean().optional(),
  requestConfigurations: z.array(RequestConfiguration$outboundSchema)
    .optional(),
  requestConfigurationList: z.array(RequestConfiguration$outboundSchema)
    .optional(),
  metadata: z.string().optional(),
  remoteInfo: GroupRemoteInfo$outboundSchema.optional(),
  customRequestNotification: z.nullable(z.string()).optional(),
  riskSensitivity: GroupRiskSensitivity$outboundSchema.optional(),
  riskSensitivityOverride: RiskSensitivityEnum$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    appId: "app_id",
    adminOwnerId: "admin_owner_id",
    groupLeaderUserIds: "group_leader_user_ids",
    remoteId: "remote_id",
    remoteName: "remote_name",
    groupType: "group_type",
    maxDuration: "max_duration",
    recommendedDuration: "recommended_duration",
    requireManagerApproval: "require_manager_approval",
    requireSupportTicket: "require_support_ticket",
    requireMfaToApprove: "require_mfa_to_approve",
    requireMfaToRequest: "require_mfa_to_request",
    autoApproval: "auto_approval",
    requestTemplateId: "request_template_id",
    configurationTemplateId: "configuration_template_id",
    groupBindingId: "group_binding_id",
    isRequestable: "is_requestable",
    requestConfigurations: "request_configurations",
    requestConfigurationList: "request_configuration_list",
    remoteInfo: "remote_info",
    customRequestNotification: "custom_request_notification",
    riskSensitivity: "risk_sensitivity",
    riskSensitivityOverride: "risk_sensitivity_override",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Group$ {
  /** @deprecated use `Group$inboundSchema` instead. */
  export const inboundSchema = Group$inboundSchema;
  /** @deprecated use `Group$outboundSchema` instead. */
  export const outboundSchema = Group$outboundSchema;
  /** @deprecated use `Group$Outbound` instead. */
  export type Outbound = Group$Outbound;
}

export function groupToJSON(group: Group): string {
  return JSON.stringify(Group$outboundSchema.parse(group));
}

export function groupFromJSON(
  jsonString: string,
): SafeParseResult<Group, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Group$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Group' from JSON`,
  );
}
