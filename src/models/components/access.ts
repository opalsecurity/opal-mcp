/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EntityTypeEnum,
  EntityTypeEnum$inboundSchema,
  EntityTypeEnum$outboundSchema,
} from "./entitytypeenum.js";
import {
  ResourceAccessLevel,
  ResourceAccessLevel$inboundSchema,
  ResourceAccessLevel$Outbound,
  ResourceAccessLevel$outboundSchema,
} from "./resourceaccesslevel.js";

/**
 * # Access Object
 *
 * @remarks
 * ### Description
 * The `Access` object is used to represent a principal's access to an entity, either directly or inherited.
 *
 * ### Usage Example
 * Fetch from the `LIST ResourceNonHumanIdentities` endpoint.
 */
export type Access = {
  /**
   * The ID of the principal with access.
   */
  principalId: string;
  /**
   * The type of an entity.
   */
  principalType: EntityTypeEnum;
  /**
   * The ID of the entity being accessed.
   */
  entityId: string;
  /**
   * The type of an entity.
   */
  entityType: EntityTypeEnum;
  /**
   * # Access Level Object
   *
   * @remarks
   * ### Description
   * The `AccessLevel` object is used to represent the level of access that a principal has. The "default" access
   * level is a `AccessLevel` object whose fields are all empty strings.
   *
   * ### Usage Example
   * View the `AccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
   */
  accessLevel?: ResourceAccessLevel | undefined;
  /**
   * The day and time the principal's access will expire.
   */
  expirationDate?: Date | null | undefined;
  /**
   * The principal has direct access to this entity (vs. inherited access).
   */
  hasDirectAccess: boolean;
  /**
   * The number of ways in which the principal has access to this entity (directly and inherited).
   */
  numAccessPaths: number;
};

/** @internal */
export const Access$inboundSchema: z.ZodType<Access, z.ZodTypeDef, unknown> = z
  .object({
    principal_id: z.string(),
    principal_type: EntityTypeEnum$inboundSchema,
    entity_id: z.string(),
    entity_type: EntityTypeEnum$inboundSchema,
    access_level: ResourceAccessLevel$inboundSchema.optional(),
    expiration_date: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    has_direct_access: z.boolean(),
    num_access_paths: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "principal_id": "principalId",
      "principal_type": "principalType",
      "entity_id": "entityId",
      "entity_type": "entityType",
      "access_level": "accessLevel",
      "expiration_date": "expirationDate",
      "has_direct_access": "hasDirectAccess",
      "num_access_paths": "numAccessPaths",
    });
  });

/** @internal */
export type Access$Outbound = {
  principal_id: string;
  principal_type: string;
  entity_id: string;
  entity_type: string;
  access_level?: ResourceAccessLevel$Outbound | undefined;
  expiration_date?: string | null | undefined;
  has_direct_access: boolean;
  num_access_paths: number;
};

/** @internal */
export const Access$outboundSchema: z.ZodType<
  Access$Outbound,
  z.ZodTypeDef,
  Access
> = z.object({
  principalId: z.string(),
  principalType: EntityTypeEnum$outboundSchema,
  entityId: z.string(),
  entityType: EntityTypeEnum$outboundSchema,
  accessLevel: ResourceAccessLevel$outboundSchema.optional(),
  expirationDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  hasDirectAccess: z.boolean(),
  numAccessPaths: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    principalId: "principal_id",
    principalType: "principal_type",
    entityId: "entity_id",
    entityType: "entity_type",
    accessLevel: "access_level",
    expirationDate: "expiration_date",
    hasDirectAccess: "has_direct_access",
    numAccessPaths: "num_access_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Access$ {
  /** @deprecated use `Access$inboundSchema` instead. */
  export const inboundSchema = Access$inboundSchema;
  /** @deprecated use `Access$outboundSchema` instead. */
  export const outboundSchema = Access$outboundSchema;
  /** @deprecated use `Access$Outbound` instead. */
  export type Outbound = Access$Outbound;
}

export function accessToJSON(access: Access): string {
  return JSON.stringify(Access$outboundSchema.parse(access));
}

export function accessFromJSON(
  jsonString: string,
): SafeParseResult<Access, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Access$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Access' from JSON`,
  );
}
