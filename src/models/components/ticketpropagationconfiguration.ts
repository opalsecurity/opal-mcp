/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketingProviderEnum,
  TicketingProviderEnum$inboundSchema,
  TicketingProviderEnum$outboundSchema,
} from "./ticketingproviderenum.js";

/**
 * Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in this resource.
 */
export type TicketPropagationConfiguration = {
  enabledOnGrant: boolean;
  enabledOnRevocation: boolean;
  /**
   * The third party ticketing platform provider.
   */
  ticketProvider?: TicketingProviderEnum | undefined;
  ticketProjectId?: string | undefined;
};

/** @internal */
export const TicketPropagationConfiguration$inboundSchema: z.ZodType<
  TicketPropagationConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled_on_grant: z.boolean(),
  enabled_on_revocation: z.boolean(),
  ticket_provider: TicketingProviderEnum$inboundSchema.optional(),
  ticket_project_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "enabled_on_grant": "enabledOnGrant",
    "enabled_on_revocation": "enabledOnRevocation",
    "ticket_provider": "ticketProvider",
    "ticket_project_id": "ticketProjectId",
  });
});

/** @internal */
export type TicketPropagationConfiguration$Outbound = {
  enabled_on_grant: boolean;
  enabled_on_revocation: boolean;
  ticket_provider?: string | undefined;
  ticket_project_id?: string | undefined;
};

/** @internal */
export const TicketPropagationConfiguration$outboundSchema: z.ZodType<
  TicketPropagationConfiguration$Outbound,
  z.ZodTypeDef,
  TicketPropagationConfiguration
> = z.object({
  enabledOnGrant: z.boolean(),
  enabledOnRevocation: z.boolean(),
  ticketProvider: TicketingProviderEnum$outboundSchema.optional(),
  ticketProjectId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    enabledOnGrant: "enabled_on_grant",
    enabledOnRevocation: "enabled_on_revocation",
    ticketProvider: "ticket_provider",
    ticketProjectId: "ticket_project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketPropagationConfiguration$ {
  /** @deprecated use `TicketPropagationConfiguration$inboundSchema` instead. */
  export const inboundSchema = TicketPropagationConfiguration$inboundSchema;
  /** @deprecated use `TicketPropagationConfiguration$outboundSchema` instead. */
  export const outboundSchema = TicketPropagationConfiguration$outboundSchema;
  /** @deprecated use `TicketPropagationConfiguration$Outbound` instead. */
  export type Outbound = TicketPropagationConfiguration$Outbound;
}

export function ticketPropagationConfigurationToJSON(
  ticketPropagationConfiguration: TicketPropagationConfiguration,
): string {
  return JSON.stringify(
    TicketPropagationConfiguration$outboundSchema.parse(
      ticketPropagationConfiguration,
    ),
  );
}

export function ticketPropagationConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<TicketPropagationConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketPropagationConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketPropagationConfiguration' from JSON`,
  );
}
