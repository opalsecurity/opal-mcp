/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Tag,
  Tag$inboundSchema,
  Tag$Outbound,
  Tag$outboundSchema,
} from "./tag.js";

export type TagsList = {
  tags: Array<Tag>;
};

/** @internal */
export const TagsList$inboundSchema: z.ZodType<
  TagsList,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.array(Tag$inboundSchema),
});

/** @internal */
export type TagsList$Outbound = {
  tags: Array<Tag$Outbound>;
};

/** @internal */
export const TagsList$outboundSchema: z.ZodType<
  TagsList$Outbound,
  z.ZodTypeDef,
  TagsList
> = z.object({
  tags: z.array(Tag$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagsList$ {
  /** @deprecated use `TagsList$inboundSchema` instead. */
  export const inboundSchema = TagsList$inboundSchema;
  /** @deprecated use `TagsList$outboundSchema` instead. */
  export const outboundSchema = TagsList$outboundSchema;
  /** @deprecated use `TagsList$Outbound` instead. */
  export type Outbound = TagsList$Outbound;
}

export function tagsListToJSON(tagsList: TagsList): string {
  return JSON.stringify(TagsList$outboundSchema.parse(tagsList));
}

export function tagsListFromJSON(
  jsonString: string,
): SafeParseResult<TagsList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagsList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagsList' from JSON`,
  );
}
