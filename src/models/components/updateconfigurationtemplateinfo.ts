/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateRequestConfigurationInfoList,
  CreateRequestConfigurationInfoList$inboundSchema,
  CreateRequestConfigurationInfoList$Outbound,
  CreateRequestConfigurationInfoList$outboundSchema,
} from "./createrequestconfigurationinfolist.js";
import {
  RequestConfiguration,
  RequestConfiguration$inboundSchema,
  RequestConfiguration$Outbound,
  RequestConfiguration$outboundSchema,
} from "./requestconfiguration.js";
import {
  TicketPropagationConfiguration,
  TicketPropagationConfiguration$inboundSchema,
  TicketPropagationConfiguration$Outbound,
  TicketPropagationConfiguration$outboundSchema,
} from "./ticketpropagationconfiguration.js";
import {
  VisibilityInfo,
  VisibilityInfo$inboundSchema,
  VisibilityInfo$Outbound,
  VisibilityInfo$outboundSchema,
} from "./visibilityinfo.js";

/**
 * # UpdateConfigurationTemplateInfo Object
 *
 * @remarks
 * ### Description
 * The `ConfigurationTemplate` object is used to represent an update to a configuration template.
 *
 * ### Usage Example
 * Use in the `PUT Configuration Templates` endpoint.
 */
export type UpdateConfigurationTemplateInfo = {
  /**
   * The ID of the configuration template.
   */
  configurationTemplateId: string;
  /**
   * The name of the configuration template.
   */
  name?: string | undefined;
  /**
   * The ID of the owner of the configuration template.
   */
  adminOwnerId?: string | undefined;
  /**
   * Visibility infomation of an entity.
   */
  visibility?: VisibilityInfo | undefined;
  /**
   * The IDs of the audit message channels linked to the configuration template.
   */
  linkedAuditMessageChannelIds?: Array<string> | undefined;
  /**
   * The request configuration list linked to the configuration template.
   */
  requestConfigurations?: Array<RequestConfiguration> | undefined;
  /**
   * # CreateRequestConfigurationInfoList Object
   *
   * @remarks
   * ### Description
   * The `CreateRequestConfigurationInfoList` object is used as an input to the CreateRequestConfigurations API.
   *
   * ### Formatting Requirements
   * The `CreateRequestConfigurationInfoList` object must contain a list of `RequestConfiguration` objects.
   * Exactly one default `RequestConfiguration` must be provided.  A default `RequestConfiguration` is one with a `condition` of `null`
   * and a `priority` of `0`.  The default `RequestConfiguration` will be used when no other `RequestConfiguration` matches the request.
   *
   * Only one `RequestConfiguration` may be provided for each priority, and the priorities must be contiguous.  For example, if there are
   * two `RequestConfigurations` with priorities 0 and 2, there must be a `RequestConfiguration` with priority 1.
   *
   * To use the `condition` field, the `condition` must be a valid JSON object.
   *
   * The `condition` must be a JSON object with the key `group_ids` (more options may be added in the future), whose value is a list of
   * group IDs.
   * The `condition` will match if the user requesting access is a member of any of the groups in the list. Currently, we only support
   * using a single group as a condition.
   */
  requestConfigurationList?: CreateRequestConfigurationInfoList | undefined;
  /**
   * The IDs of the on-call schedules linked to the configuration template.
   */
  memberOncallScheduleIds?: Array<string> | undefined;
  /**
   * The IDs of the break glass users linked to the configuration template.
   */
  breakGlassUserIds?: Array<string> | undefined;
  /**
   * A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
   */
  requireMfaToApprove?: boolean | undefined;
  /**
   * A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
   */
  requireMfaToConnect?: boolean | undefined;
  /**
   * Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in this resource.
   */
  ticketPropagation?: TicketPropagationConfiguration | undefined;
  /**
   * Custom request notification sent upon request approval for this configuration template.
   */
  customRequestNotification?: string | null | undefined;
};

/** @internal */
export const UpdateConfigurationTemplateInfo$inboundSchema: z.ZodType<
  UpdateConfigurationTemplateInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  configuration_template_id: z.string(),
  name: z.string().optional(),
  admin_owner_id: z.string().optional(),
  visibility: VisibilityInfo$inboundSchema.optional(),
  linked_audit_message_channel_ids: z.array(z.string()).optional(),
  request_configurations: z.array(RequestConfiguration$inboundSchema)
    .optional(),
  request_configuration_list: CreateRequestConfigurationInfoList$inboundSchema
    .optional(),
  member_oncall_schedule_ids: z.array(z.string()).optional(),
  break_glass_user_ids: z.array(z.string()).optional(),
  require_mfa_to_approve: z.boolean().optional(),
  require_mfa_to_connect: z.boolean().optional(),
  ticket_propagation: TicketPropagationConfiguration$inboundSchema.optional(),
  custom_request_notification: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "configuration_template_id": "configurationTemplateId",
    "admin_owner_id": "adminOwnerId",
    "linked_audit_message_channel_ids": "linkedAuditMessageChannelIds",
    "request_configurations": "requestConfigurations",
    "request_configuration_list": "requestConfigurationList",
    "member_oncall_schedule_ids": "memberOncallScheduleIds",
    "break_glass_user_ids": "breakGlassUserIds",
    "require_mfa_to_approve": "requireMfaToApprove",
    "require_mfa_to_connect": "requireMfaToConnect",
    "ticket_propagation": "ticketPropagation",
    "custom_request_notification": "customRequestNotification",
  });
});

/** @internal */
export type UpdateConfigurationTemplateInfo$Outbound = {
  configuration_template_id: string;
  name?: string | undefined;
  admin_owner_id?: string | undefined;
  visibility?: VisibilityInfo$Outbound | undefined;
  linked_audit_message_channel_ids?: Array<string> | undefined;
  request_configurations?: Array<RequestConfiguration$Outbound> | undefined;
  request_configuration_list?:
    | CreateRequestConfigurationInfoList$Outbound
    | undefined;
  member_oncall_schedule_ids?: Array<string> | undefined;
  break_glass_user_ids?: Array<string> | undefined;
  require_mfa_to_approve?: boolean | undefined;
  require_mfa_to_connect?: boolean | undefined;
  ticket_propagation?: TicketPropagationConfiguration$Outbound | undefined;
  custom_request_notification?: string | null | undefined;
};

/** @internal */
export const UpdateConfigurationTemplateInfo$outboundSchema: z.ZodType<
  UpdateConfigurationTemplateInfo$Outbound,
  z.ZodTypeDef,
  UpdateConfigurationTemplateInfo
> = z.object({
  configurationTemplateId: z.string(),
  name: z.string().optional(),
  adminOwnerId: z.string().optional(),
  visibility: VisibilityInfo$outboundSchema.optional(),
  linkedAuditMessageChannelIds: z.array(z.string()).optional(),
  requestConfigurations: z.array(RequestConfiguration$outboundSchema)
    .optional(),
  requestConfigurationList: CreateRequestConfigurationInfoList$outboundSchema
    .optional(),
  memberOncallScheduleIds: z.array(z.string()).optional(),
  breakGlassUserIds: z.array(z.string()).optional(),
  requireMfaToApprove: z.boolean().optional(),
  requireMfaToConnect: z.boolean().optional(),
  ticketPropagation: TicketPropagationConfiguration$outboundSchema.optional(),
  customRequestNotification: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    configurationTemplateId: "configuration_template_id",
    adminOwnerId: "admin_owner_id",
    linkedAuditMessageChannelIds: "linked_audit_message_channel_ids",
    requestConfigurations: "request_configurations",
    requestConfigurationList: "request_configuration_list",
    memberOncallScheduleIds: "member_oncall_schedule_ids",
    breakGlassUserIds: "break_glass_user_ids",
    requireMfaToApprove: "require_mfa_to_approve",
    requireMfaToConnect: "require_mfa_to_connect",
    ticketPropagation: "ticket_propagation",
    customRequestNotification: "custom_request_notification",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigurationTemplateInfo$ {
  /** @deprecated use `UpdateConfigurationTemplateInfo$inboundSchema` instead. */
  export const inboundSchema = UpdateConfigurationTemplateInfo$inboundSchema;
  /** @deprecated use `UpdateConfigurationTemplateInfo$outboundSchema` instead. */
  export const outboundSchema = UpdateConfigurationTemplateInfo$outboundSchema;
  /** @deprecated use `UpdateConfigurationTemplateInfo$Outbound` instead. */
  export type Outbound = UpdateConfigurationTemplateInfo$Outbound;
}

export function updateConfigurationTemplateInfoToJSON(
  updateConfigurationTemplateInfo: UpdateConfigurationTemplateInfo,
): string {
  return JSON.stringify(
    UpdateConfigurationTemplateInfo$outboundSchema.parse(
      updateConfigurationTemplateInfo,
    ),
  );
}

export function updateConfigurationTemplateInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConfigurationTemplateInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConfigurationTemplateInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConfigurationTemplateInfo' from JSON`,
  );
}
