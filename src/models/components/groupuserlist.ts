/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GroupUser,
  GroupUser$inboundSchema,
  GroupUser$Outbound,
  GroupUser$outboundSchema,
} from "./groupuser.js";

export type GroupUserList = {
  results?: Array<GroupUser> | undefined;
};

/** @internal */
export const GroupUserList$inboundSchema: z.ZodType<
  GroupUserList,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(GroupUser$inboundSchema).optional(),
});

/** @internal */
export type GroupUserList$Outbound = {
  results?: Array<GroupUser$Outbound> | undefined;
};

/** @internal */
export const GroupUserList$outboundSchema: z.ZodType<
  GroupUserList$Outbound,
  z.ZodTypeDef,
  GroupUserList
> = z.object({
  results: z.array(GroupUser$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupUserList$ {
  /** @deprecated use `GroupUserList$inboundSchema` instead. */
  export const inboundSchema = GroupUserList$inboundSchema;
  /** @deprecated use `GroupUserList$outboundSchema` instead. */
  export const outboundSchema = GroupUserList$outboundSchema;
  /** @deprecated use `GroupUserList$Outbound` instead. */
  export type Outbound = GroupUserList$Outbound;
}

export function groupUserListToJSON(groupUserList: GroupUserList): string {
  return JSON.stringify(GroupUserList$outboundSchema.parse(groupUserList));
}

export function groupUserListFromJSON(
  jsonString: string,
): SafeParseResult<GroupUserList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupUserList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupUserList' from JSON`,
  );
}
