/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # Requested Item Object
 *
 * @remarks
 * ### Description
 * The `RequestedItem` object is used to represent a request target item.
 *
 * ### Usage Example
 * Returned from the `GET Requests` endpoint.
 */
export type RequestedItem = {
  /**
   * The ID of the resource requested.
   */
  resourceId?: string | undefined;
  /**
   * The ID of the group requested.
   */
  groupId?: string | undefined;
  /**
   * The name of the access level requested.
   */
  accessLevelName?: string | undefined;
  /**
   * The ID of the access level requested on the remote system.
   */
  accessLevelRemoteId?: string | undefined;
  /**
   * The name of the target.
   */
  name?: string | undefined;
};

/** @internal */
export const RequestedItem$inboundSchema: z.ZodType<
  RequestedItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string().optional(),
  group_id: z.string().optional(),
  access_level_name: z.string().optional(),
  access_level_remote_id: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "group_id": "groupId",
    "access_level_name": "accessLevelName",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type RequestedItem$Outbound = {
  resource_id?: string | undefined;
  group_id?: string | undefined;
  access_level_name?: string | undefined;
  access_level_remote_id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const RequestedItem$outboundSchema: z.ZodType<
  RequestedItem$Outbound,
  z.ZodTypeDef,
  RequestedItem
> = z.object({
  resourceId: z.string().optional(),
  groupId: z.string().optional(),
  accessLevelName: z.string().optional(),
  accessLevelRemoteId: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    groupId: "group_id",
    accessLevelName: "access_level_name",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestedItem$ {
  /** @deprecated use `RequestedItem$inboundSchema` instead. */
  export const inboundSchema = RequestedItem$inboundSchema;
  /** @deprecated use `RequestedItem$outboundSchema` instead. */
  export const outboundSchema = RequestedItem$outboundSchema;
  /** @deprecated use `RequestedItem$Outbound` instead. */
  export type Outbound = RequestedItem$Outbound;
}

export function requestedItemToJSON(requestedItem: RequestedItem): string {
  return JSON.stringify(RequestedItem$outboundSchema.parse(requestedItem));
}

export function requestedItemFromJSON(
  jsonString: string,
): SafeParseResult<RequestedItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestedItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestedItem' from JSON`,
  );
}
