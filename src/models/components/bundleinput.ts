/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BundleInput = {
  /**
   * The name of the bundle.
   */
  name?: string | undefined;
  /**
   * The description of the bundle.
   */
  description?: string | undefined;
  /**
   * The ID of the owner of the bundle.
   */
  adminOwnerId?: string | undefined;
};

/** @internal */
export const BundleInput$inboundSchema: z.ZodType<
  BundleInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  admin_owner_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "admin_owner_id": "adminOwnerId",
  });
});

/** @internal */
export type BundleInput$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  admin_owner_id?: string | undefined;
};

/** @internal */
export const BundleInput$outboundSchema: z.ZodType<
  BundleInput$Outbound,
  z.ZodTypeDef,
  BundleInput
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  adminOwnerId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminOwnerId: "admin_owner_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BundleInput$ {
  /** @deprecated use `BundleInput$inboundSchema` instead. */
  export const inboundSchema = BundleInput$inboundSchema;
  /** @deprecated use `BundleInput$outboundSchema` instead. */
  export const outboundSchema = BundleInput$outboundSchema;
  /** @deprecated use `BundleInput$Outbound` instead. */
  export type Outbound = BundleInput$Outbound;
}

export function bundleInputToJSON(bundleInput: BundleInput): string {
  return JSON.stringify(BundleInput$outboundSchema.parse(bundleInput));
}

export function bundleInputFromJSON(
  jsonString: string,
): SafeParseResult<BundleInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BundleInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BundleInput' from JSON`,
  );
}
