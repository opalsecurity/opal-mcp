/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketPropagationConfiguration,
  TicketPropagationConfiguration$inboundSchema,
  TicketPropagationConfiguration$Outbound,
  TicketPropagationConfiguration$outboundSchema,
} from "./ticketpropagationconfiguration.js";
import {
  VisibilityInfo,
  VisibilityInfo$inboundSchema,
  VisibilityInfo$Outbound,
  VisibilityInfo$outboundSchema,
} from "./visibilityinfo.js";

/**
 * # Configuration Template Object
 *
 * @remarks
 * ### Description
 * The `ConfigurationTemplate` object is used to represent a configuration template.
 *
 * ### Usage Example
 * Returned from the `GET Configuration Templates` endpoint.
 */
export type ConfigurationTemplate = {
  /**
   * The ID of the configuration template.
   */
  configurationTemplateId?: string | undefined;
  /**
   * The name of the configuration template.
   */
  name?: string | undefined;
  /**
   * The ID of the owner of the configuration template.
   */
  adminOwnerId?: string | undefined;
  /**
   * Visibility infomation of an entity.
   */
  visibility?: VisibilityInfo | undefined;
  /**
   * The IDs of the audit message channels linked to the configuration template.
   */
  linkedAuditMessageChannelIds?: Array<string> | undefined;
  /**
   * The ID of the request configuration linked to the configuration template.
   */
  requestConfigurationId?: string | undefined;
  /**
   * The IDs of the on-call schedules linked to the configuration template.
   */
  memberOncallScheduleIds?: Array<string> | undefined;
  /**
   * The IDs of the break glass users linked to the configuration template.
   */
  breakGlassUserIds?: Array<string> | undefined;
  /**
   * A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
   */
  requireMfaToApprove?: boolean | undefined;
  /**
   * A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
   */
  requireMfaToConnect?: boolean | undefined;
  /**
   * Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in this resource.
   */
  ticketPropagation?: TicketPropagationConfiguration | undefined;
  /**
   * Custom request notification sent upon request approval for this configuration template.
   */
  customRequestNotification?: string | null | undefined;
};

/** @internal */
export const ConfigurationTemplate$inboundSchema: z.ZodType<
  ConfigurationTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  configuration_template_id: z.string().optional(),
  name: z.string().optional(),
  admin_owner_id: z.string().optional(),
  visibility: VisibilityInfo$inboundSchema.optional(),
  linked_audit_message_channel_ids: z.array(z.string()).optional(),
  request_configuration_id: z.string().optional(),
  member_oncall_schedule_ids: z.array(z.string()).optional(),
  break_glass_user_ids: z.array(z.string()).optional(),
  require_mfa_to_approve: z.boolean().optional(),
  require_mfa_to_connect: z.boolean().optional(),
  ticket_propagation: TicketPropagationConfiguration$inboundSchema.optional(),
  custom_request_notification: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "configuration_template_id": "configurationTemplateId",
    "admin_owner_id": "adminOwnerId",
    "linked_audit_message_channel_ids": "linkedAuditMessageChannelIds",
    "request_configuration_id": "requestConfigurationId",
    "member_oncall_schedule_ids": "memberOncallScheduleIds",
    "break_glass_user_ids": "breakGlassUserIds",
    "require_mfa_to_approve": "requireMfaToApprove",
    "require_mfa_to_connect": "requireMfaToConnect",
    "ticket_propagation": "ticketPropagation",
    "custom_request_notification": "customRequestNotification",
  });
});

/** @internal */
export type ConfigurationTemplate$Outbound = {
  configuration_template_id?: string | undefined;
  name?: string | undefined;
  admin_owner_id?: string | undefined;
  visibility?: VisibilityInfo$Outbound | undefined;
  linked_audit_message_channel_ids?: Array<string> | undefined;
  request_configuration_id?: string | undefined;
  member_oncall_schedule_ids?: Array<string> | undefined;
  break_glass_user_ids?: Array<string> | undefined;
  require_mfa_to_approve?: boolean | undefined;
  require_mfa_to_connect?: boolean | undefined;
  ticket_propagation?: TicketPropagationConfiguration$Outbound | undefined;
  custom_request_notification?: string | null | undefined;
};

/** @internal */
export const ConfigurationTemplate$outboundSchema: z.ZodType<
  ConfigurationTemplate$Outbound,
  z.ZodTypeDef,
  ConfigurationTemplate
> = z.object({
  configurationTemplateId: z.string().optional(),
  name: z.string().optional(),
  adminOwnerId: z.string().optional(),
  visibility: VisibilityInfo$outboundSchema.optional(),
  linkedAuditMessageChannelIds: z.array(z.string()).optional(),
  requestConfigurationId: z.string().optional(),
  memberOncallScheduleIds: z.array(z.string()).optional(),
  breakGlassUserIds: z.array(z.string()).optional(),
  requireMfaToApprove: z.boolean().optional(),
  requireMfaToConnect: z.boolean().optional(),
  ticketPropagation: TicketPropagationConfiguration$outboundSchema.optional(),
  customRequestNotification: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    configurationTemplateId: "configuration_template_id",
    adminOwnerId: "admin_owner_id",
    linkedAuditMessageChannelIds: "linked_audit_message_channel_ids",
    requestConfigurationId: "request_configuration_id",
    memberOncallScheduleIds: "member_oncall_schedule_ids",
    breakGlassUserIds: "break_glass_user_ids",
    requireMfaToApprove: "require_mfa_to_approve",
    requireMfaToConnect: "require_mfa_to_connect",
    ticketPropagation: "ticket_propagation",
    customRequestNotification: "custom_request_notification",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurationTemplate$ {
  /** @deprecated use `ConfigurationTemplate$inboundSchema` instead. */
  export const inboundSchema = ConfigurationTemplate$inboundSchema;
  /** @deprecated use `ConfigurationTemplate$outboundSchema` instead. */
  export const outboundSchema = ConfigurationTemplate$outboundSchema;
  /** @deprecated use `ConfigurationTemplate$Outbound` instead. */
  export type Outbound = ConfigurationTemplate$Outbound;
}

export function configurationTemplateToJSON(
  configurationTemplate: ConfigurationTemplate,
): string {
  return JSON.stringify(
    ConfigurationTemplate$outboundSchema.parse(configurationTemplate),
  );
}

export function configurationTemplateFromJSON(
  jsonString: string,
): SafeParseResult<ConfigurationTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigurationTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigurationTemplate' from JSON`,
  );
}
