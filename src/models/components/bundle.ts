/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Bundle = {
  /**
   * The ID of the bundle.
   */
  bundleId?: string | undefined;
  /**
   * The name of the bundle.
   */
  name?: string | undefined;
  /**
   * The description of the bundle.
   */
  description?: string | undefined;
  /**
   * The creation timestamp of the bundle, in ISO 8601 format
   */
  createdAt?: Date | undefined;
  /**
   * The last updated timestamp of the bundle, in ISO 8601 format
   */
  updatedAt?: Date | undefined;
  /**
   * The ID of the owner of the bundle.
   */
  adminOwnerId?: string | undefined;
  /**
   * The total number of items in the bundle.
   */
  totalNumItems?: number | undefined;
  /**
   * The total number of resources in the bundle.
   */
  totalNumResources?: number | undefined;
  /**
   * The total number of groups in the bundle.
   */
  totalNumGroups?: number | undefined;
};

/** @internal */
export const Bundle$inboundSchema: z.ZodType<Bundle, z.ZodTypeDef, unknown> = z
  .object({
    bundle_id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    admin_owner_id: z.string().optional(),
    total_num_items: z.number().int().optional(),
    total_num_resources: z.number().int().optional(),
    total_num_groups: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "bundle_id": "bundleId",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "admin_owner_id": "adminOwnerId",
      "total_num_items": "totalNumItems",
      "total_num_resources": "totalNumResources",
      "total_num_groups": "totalNumGroups",
    });
  });

/** @internal */
export type Bundle$Outbound = {
  bundle_id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  admin_owner_id?: string | undefined;
  total_num_items?: number | undefined;
  total_num_resources?: number | undefined;
  total_num_groups?: number | undefined;
};

/** @internal */
export const Bundle$outboundSchema: z.ZodType<
  Bundle$Outbound,
  z.ZodTypeDef,
  Bundle
> = z.object({
  bundleId: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  adminOwnerId: z.string().optional(),
  totalNumItems: z.number().int().optional(),
  totalNumResources: z.number().int().optional(),
  totalNumGroups: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    bundleId: "bundle_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    adminOwnerId: "admin_owner_id",
    totalNumItems: "total_num_items",
    totalNumResources: "total_num_resources",
    totalNumGroups: "total_num_groups",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bundle$ {
  /** @deprecated use `Bundle$inboundSchema` instead. */
  export const inboundSchema = Bundle$inboundSchema;
  /** @deprecated use `Bundle$outboundSchema` instead. */
  export const outboundSchema = Bundle$outboundSchema;
  /** @deprecated use `Bundle$Outbound` instead. */
  export type Outbound = Bundle$Outbound;
}

export function bundleToJSON(bundle: Bundle): string {
  return JSON.stringify(Bundle$outboundSchema.parse(bundle));
}

export function bundleFromJSON(
  jsonString: string,
): SafeParseResult<Bundle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Bundle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Bundle' from JSON`,
  );
}
