/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  User,
  User$inboundSchema,
  User$Outbound,
  User$outboundSchema,
} from "./user.js";

/**
 * A list of users.
 */
export type UserList = {
  users: Array<User>;
};

/** @internal */
export const UserList$inboundSchema: z.ZodType<
  UserList,
  z.ZodTypeDef,
  unknown
> = z.object({
  users: z.array(User$inboundSchema),
});

/** @internal */
export type UserList$Outbound = {
  users: Array<User$Outbound>;
};

/** @internal */
export const UserList$outboundSchema: z.ZodType<
  UserList$Outbound,
  z.ZodTypeDef,
  UserList
> = z.object({
  users: z.array(User$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserList$ {
  /** @deprecated use `UserList$inboundSchema` instead. */
  export const inboundSchema = UserList$inboundSchema;
  /** @deprecated use `UserList$outboundSchema` instead. */
  export const outboundSchema = UserList$outboundSchema;
  /** @deprecated use `UserList$Outbound` instead. */
  export type Outbound = UserList$Outbound;
}

export function userListToJSON(userList: UserList): string {
  return JSON.stringify(UserList$outboundSchema.parse(userList));
}

export function userListFromJSON(
  jsonString: string,
): SafeParseResult<UserList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserList' from JSON`,
  );
}
