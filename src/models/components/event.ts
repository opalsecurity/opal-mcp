/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SubEvent,
  SubEvent$inboundSchema,
  SubEvent$Outbound,
  SubEvent$outboundSchema,
} from "./subevent.js";

/**
 * # Event Object
 *
 * @remarks
 * ### Description
 * The `Event` object is used to represent an event.
 *
 * ### Usage Example
 * Fetch from the `LIST Events` endpoint.
 */
export type Event = {
  /**
   * The ID of the event.
   */
  eventId: string;
  /**
   * The ID of the actor user.
   */
  actorUserId: string;
  /**
   * The name of the actor user.
   */
  actorName?: any | undefined;
  /**
   * The email of the actor user.
   */
  actorEmail?: string | undefined;
  /**
   * The event type.
   */
  eventType: string;
  /**
   * The day and time the event was created.
   */
  createdAt: Date;
  /**
   * The IP address of the event actor.
   */
  actorIpAddress?: string | undefined;
  /**
   * The name of the API token used to create the event.
   */
  apiTokenName?: string | undefined;
  /**
   * The preview of the API token used to create the event.
   */
  apiTokenPreview?: string | undefined;
  subEvents?: Array<SubEvent> | undefined;
};

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
  .object({
    event_id: z.string(),
    actor_user_id: z.string(),
    actor_name: z.any().optional(),
    actor_email: z.string().optional(),
    event_type: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    actor_ip_address: z.string().optional(),
    api_token_name: z.string().optional(),
    api_token_preview: z.string().optional(),
    sub_events: z.array(SubEvent$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "event_id": "eventId",
      "actor_user_id": "actorUserId",
      "actor_name": "actorName",
      "actor_email": "actorEmail",
      "event_type": "eventType",
      "created_at": "createdAt",
      "actor_ip_address": "actorIpAddress",
      "api_token_name": "apiTokenName",
      "api_token_preview": "apiTokenPreview",
      "sub_events": "subEvents",
    });
  });

/** @internal */
export type Event$Outbound = {
  event_id: string;
  actor_user_id: string;
  actor_name?: any | undefined;
  actor_email?: string | undefined;
  event_type: string;
  created_at: string;
  actor_ip_address?: string | undefined;
  api_token_name?: string | undefined;
  api_token_preview?: string | undefined;
  sub_events?: Array<SubEvent$Outbound> | undefined;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<
  Event$Outbound,
  z.ZodTypeDef,
  Event
> = z.object({
  eventId: z.string(),
  actorUserId: z.string(),
  actorName: z.any().optional(),
  actorEmail: z.string().optional(),
  eventType: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  actorIpAddress: z.string().optional(),
  apiTokenName: z.string().optional(),
  apiTokenPreview: z.string().optional(),
  subEvents: z.array(SubEvent$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    eventId: "event_id",
    actorUserId: "actor_user_id",
    actorName: "actor_name",
    actorEmail: "actor_email",
    eventType: "event_type",
    createdAt: "created_at",
    actorIpAddress: "actor_ip_address",
    apiTokenName: "api_token_name",
    apiTokenPreview: "api_token_preview",
    subEvents: "sub_events",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
  /** @deprecated use `Event$Outbound` instead. */
  export type Outbound = Event$Outbound;
}

export function eventToJSON(event: Event): string {
  return JSON.stringify(Event$outboundSchema.parse(event));
}

export function eventFromJSON(
  jsonString: string,
): SafeParseResult<Event, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event' from JSON`,
  );
}
