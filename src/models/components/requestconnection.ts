/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PageInfo,
  PageInfo$inboundSchema,
  PageInfo$Outbound,
  PageInfo$outboundSchema,
} from "./pageinfo.js";
import {
  RequestEdge,
  RequestEdge$inboundSchema,
  RequestEdge$Outbound,
  RequestEdge$outboundSchema,
} from "./requestedge.js";

export type RequestConnection = {
  edges: Array<RequestEdge>;
  pageInfo: PageInfo;
  /**
   * The total number of items available
   */
  totalCount: number;
};

/** @internal */
export const RequestConnection$inboundSchema: z.ZodType<
  RequestConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  edges: z.array(RequestEdge$inboundSchema),
  pageInfo: PageInfo$inboundSchema,
  totalCount: z.number().int(),
});

/** @internal */
export type RequestConnection$Outbound = {
  edges: Array<RequestEdge$Outbound>;
  pageInfo: PageInfo$Outbound;
  totalCount: number;
};

/** @internal */
export const RequestConnection$outboundSchema: z.ZodType<
  RequestConnection$Outbound,
  z.ZodTypeDef,
  RequestConnection
> = z.object({
  edges: z.array(RequestEdge$outboundSchema),
  pageInfo: PageInfo$outboundSchema,
  totalCount: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestConnection$ {
  /** @deprecated use `RequestConnection$inboundSchema` instead. */
  export const inboundSchema = RequestConnection$inboundSchema;
  /** @deprecated use `RequestConnection$outboundSchema` instead. */
  export const outboundSchema = RequestConnection$outboundSchema;
  /** @deprecated use `RequestConnection$Outbound` instead. */
  export type Outbound = RequestConnection$Outbound;
}

export function requestConnectionToJSON(
  requestConnection: RequestConnection,
): string {
  return JSON.stringify(
    RequestConnection$outboundSchema.parse(requestConnection),
  );
}

export function requestConnectionFromJSON(
  jsonString: string,
): SafeParseResult<RequestConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestConnection' from JSON`,
  );
}
