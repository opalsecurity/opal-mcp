/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Request,
  Request$inboundSchema,
  Request$Outbound,
  Request$outboundSchema,
} from "./request.js";

/**
 * # Request List
 *
 * @remarks
 * ### Description
 * The `RequestList` object is used to represent a list of requests.
 *
 * ### Usage Example
 * Returned from the `GET Requests` endpoint.
 */
export type RequestList = {
  /**
   * The list of requests.
   */
  requests?: Array<Request> | undefined;
  /**
   * The cursor to use in the next request to get the next page of results.
   */
  cursor?: string | undefined;
};

/** @internal */
export const RequestList$inboundSchema: z.ZodType<
  RequestList,
  z.ZodTypeDef,
  unknown
> = z.object({
  requests: z.array(Request$inboundSchema).optional(),
  cursor: z.string().optional(),
});

/** @internal */
export type RequestList$Outbound = {
  requests?: Array<Request$Outbound> | undefined;
  cursor?: string | undefined;
};

/** @internal */
export const RequestList$outboundSchema: z.ZodType<
  RequestList$Outbound,
  z.ZodTypeDef,
  RequestList
> = z.object({
  requests: z.array(Request$outboundSchema).optional(),
  cursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestList$ {
  /** @deprecated use `RequestList$inboundSchema` instead. */
  export const inboundSchema = RequestList$inboundSchema;
  /** @deprecated use `RequestList$outboundSchema` instead. */
  export const outboundSchema = RequestList$outboundSchema;
  /** @deprecated use `RequestList$Outbound` instead. */
  export type Outbound = RequestList$Outbound;
}

export function requestListToJSON(requestList: RequestList): string {
  return JSON.stringify(RequestList$outboundSchema.parse(requestList));
}

export function requestListFromJSON(
  jsonString: string,
): SafeParseResult<RequestList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestList' from JSON`,
  );
}
