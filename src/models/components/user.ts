/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserHrIdpStatusEnum,
  UserHrIdpStatusEnum$inboundSchema,
  UserHrIdpStatusEnum$outboundSchema,
} from "./userhridpstatusenum.js";

/**
 * # User Object
 *
 * @remarks
 *
 * ### Core Properties
 * - `user_id`: Unique identifier (UUID v4) for the user
 * - `email`: Primary email address, used for authentication and notifications
 * - `full_name`: Display name, combining first_name and last_name
 * - `position`: Organizational role or job title
 * - `hr_idp_status`: Current provisioning status from HR/IDP system
 *
 * ### MCP Integration Guidelines
 * 1. User Synchronization:
 *   - Match users by `user_id` as primary key
 *   - Use email as secondary matching field
 *   - Maintain hr_idp_status for access control decisions
 * 2. Status Handling:
 *   - ACTIVE: Full system access granted
 *   - SUSPENDED: Temporary access restriction
 *   - DEPROVISIONED: Access removed but user record maintained
 *   - DELETED: User record marked for removal
 *   - NOT_FOUND: User doesn't exist in HR/IDP system
 */
export type User = {
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * The email of the user.
   */
  email: string;
  /**
   * The full name of the user.
   */
  fullName: string;
  /**
   * The first name of the user.
   */
  firstName: string;
  /**
   * The last name of the user.
   */
  lastName: string;
  /**
   * The user's position.
   */
  position: string;
  /**
   * Represents the current status of a user as reported by the HR/IDP provider.
   *
   * @remarks
   *
   * ### Status Definitions
   * - `ACTIVE`: User is currently employed and should have appropriate access
   * - `SUSPENDED`: User access temporarily restricted (e.g., leave of absence)
   * - `DEPROVISIONED`: User has been offboarded but record retained
   * - `DELETED`: User record has been removed from HR system
   * - `NOT_FOUND`: User doesn't exist in HR/IDP system
   *
   * ### MCP Status Handling
   * ```typescript
   * function handleUserStatusChange(user: User) {
   *   switch (user.hr_idp_status) {
   *     case 'ACTIVE':
   *       return enableUserAccess(user.user_id);
   *     case 'SUSPENDED':
   *       return suspendUserAccess(user.user_id);
   *     case 'DEPROVISIONED':
   *     case 'DELETED':
   *       return revokeUserAccess(user.user_id);
   *     case 'NOT_FOUND':
   *       return flagUserForReview(user.user_id);
   *   }
   * }
   * ```
   */
  hrIdpStatus?: UserHrIdpStatusEnum | undefined;
};

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    user_id: z.string(),
    email: z.string(),
    full_name: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    position: z.string(),
    hr_idp_status: UserHrIdpStatusEnum$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_id": "userId",
      "full_name": "fullName",
      "first_name": "firstName",
      "last_name": "lastName",
      "hr_idp_status": "hrIdpStatus",
    });
  });

/** @internal */
export type User$Outbound = {
  user_id: string;
  email: string;
  full_name: string;
  first_name: string;
  last_name: string;
  position: string;
  hr_idp_status?: string | undefined;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    userId: z.string(),
    email: z.string(),
    fullName: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    position: z.string(),
    hrIdpStatus: UserHrIdpStatusEnum$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      userId: "user_id",
      fullName: "full_name",
      firstName: "first_name",
      lastName: "last_name",
      hrIdpStatus: "hr_idp_status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}
