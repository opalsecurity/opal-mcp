/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserHrIdpStatusEnum,
  UserHrIdpStatusEnum$inboundSchema,
  UserHrIdpStatusEnum$outboundSchema,
} from "./userhridpstatusenum.js";

/**
 * # User Object
 *
 * @remarks
 * ### Description
 * The `User` object is used to represent a user.
 *
 * ### Usage Example
 * Fetch from the `LIST Sessions` endpoint.
 */
export type User = {
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * The email of the user.
   */
  email: string;
  /**
   * The full name of the user.
   */
  fullName: string;
  /**
   * The first name of the user.
   */
  firstName: string;
  /**
   * The last name of the user.
   */
  lastName: string;
  /**
   * The user's position.
   */
  position: string;
  /**
   * User status pulled from an HR/IDP provider.
   */
  hrIdpStatus?: UserHrIdpStatusEnum | undefined;
};

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    user_id: z.string(),
    email: z.string(),
    full_name: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    position: z.string(),
    hr_idp_status: UserHrIdpStatusEnum$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_id": "userId",
      "full_name": "fullName",
      "first_name": "firstName",
      "last_name": "lastName",
      "hr_idp_status": "hrIdpStatus",
    });
  });

/** @internal */
export type User$Outbound = {
  user_id: string;
  email: string;
  full_name: string;
  first_name: string;
  last_name: string;
  position: string;
  hr_idp_status?: string | undefined;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    userId: z.string(),
    email: z.string(),
    fullName: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    position: z.string(),
    hrIdpStatus: UserHrIdpStatusEnum$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      userId: "user_id",
      fullName: "full_name",
      firstName: "first_name",
      lastName: "last_name",
      hrIdpStatus: "hr_idp_status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}
