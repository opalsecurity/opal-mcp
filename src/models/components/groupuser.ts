/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GroupAccessLevel,
  GroupAccessLevel$inboundSchema,
  GroupAccessLevel$Outbound,
  GroupAccessLevel$outboundSchema,
} from "./groupaccesslevel.js";
import {
  PropagationStatus,
  PropagationStatus$inboundSchema,
  PropagationStatus$Outbound,
  PropagationStatus$outboundSchema,
} from "./propagationstatus.js";

/**
 * # Group Access User Object
 *
 * @remarks
 * ### Description
 * The `GroupAccessUser` object is used to represent a user with access to a group.
 *
 * ### Usage Example
 * Fetch from the `LIST GroupUsers` endpoint.
 */
export type GroupUser = {
  /**
   * The ID of the group.
   */
  groupId: string;
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * # Access Level Object
   *
   * @remarks
   * ### Description
   * The `GroupAccessLevel` object is used to represent the level of access that a user has to a group or a group has to a group. The "default" access
   * level is a `GroupAccessLevel` object whose fields are all empty strings.
   *
   * ### Usage Example
   * View the `GroupAccessLevel` of a group/user or group/group pair to see the level of access granted to the group.
   */
  accessLevel?: GroupAccessLevel | undefined;
  /**
   * The user's full name.
   */
  fullName: string;
  /**
   * The user's email.
   */
  email: string;
  /**
   * The day and time the user's access will expire.
   */
  expirationDate?: Date | null | undefined;
  /**
   * The state of whether the push action was propagated to the remote system. If this is null, the access was synced from the remote system.
   */
  propagationStatus?: PropagationStatus | undefined;
};

/** @internal */
export const GroupUser$inboundSchema: z.ZodType<
  GroupUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
  user_id: z.string(),
  access_level: GroupAccessLevel$inboundSchema.optional(),
  full_name: z.string(),
  email: z.string(),
  expiration_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  propagation_status: PropagationStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "user_id": "userId",
    "access_level": "accessLevel",
    "full_name": "fullName",
    "expiration_date": "expirationDate",
    "propagation_status": "propagationStatus",
  });
});

/** @internal */
export type GroupUser$Outbound = {
  group_id: string;
  user_id: string;
  access_level?: GroupAccessLevel$Outbound | undefined;
  full_name: string;
  email: string;
  expiration_date?: string | null | undefined;
  propagation_status?: PropagationStatus$Outbound | undefined;
};

/** @internal */
export const GroupUser$outboundSchema: z.ZodType<
  GroupUser$Outbound,
  z.ZodTypeDef,
  GroupUser
> = z.object({
  groupId: z.string(),
  userId: z.string(),
  accessLevel: GroupAccessLevel$outboundSchema.optional(),
  fullName: z.string(),
  email: z.string(),
  expirationDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  propagationStatus: PropagationStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    userId: "user_id",
    accessLevel: "access_level",
    fullName: "full_name",
    expirationDate: "expiration_date",
    propagationStatus: "propagation_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupUser$ {
  /** @deprecated use `GroupUser$inboundSchema` instead. */
  export const inboundSchema = GroupUser$inboundSchema;
  /** @deprecated use `GroupUser$outboundSchema` instead. */
  export const outboundSchema = GroupUser$outboundSchema;
  /** @deprecated use `GroupUser$Outbound` instead. */
  export type Outbound = GroupUser$Outbound;
}

export function groupUserToJSON(groupUser: GroupUser): string {
  return JSON.stringify(GroupUser$outboundSchema.parse(groupUser));
}

export function groupUserFromJSON(
  jsonString: string,
): SafeParseResult<GroupUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupUser' from JSON`,
  );
}
