/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GroupResource,
  GroupResource$inboundSchema,
  GroupResource$Outbound,
  GroupResource$outboundSchema,
} from "./groupresource.js";

export type GroupResourceList = {
  groupResources: Array<GroupResource>;
};

/** @internal */
export const GroupResourceList$inboundSchema: z.ZodType<
  GroupResourceList,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_resources: z.array(GroupResource$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "group_resources": "groupResources",
  });
});

/** @internal */
export type GroupResourceList$Outbound = {
  group_resources: Array<GroupResource$Outbound>;
};

/** @internal */
export const GroupResourceList$outboundSchema: z.ZodType<
  GroupResourceList$Outbound,
  z.ZodTypeDef,
  GroupResourceList
> = z.object({
  groupResources: z.array(GroupResource$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    groupResources: "group_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupResourceList$ {
  /** @deprecated use `GroupResourceList$inboundSchema` instead. */
  export const inboundSchema = GroupResourceList$inboundSchema;
  /** @deprecated use `GroupResourceList$outboundSchema` instead. */
  export const outboundSchema = GroupResourceList$outboundSchema;
  /** @deprecated use `GroupResourceList$Outbound` instead. */
  export type Outbound = GroupResourceList$Outbound;
}

export function groupResourceListToJSON(
  groupResourceList: GroupResourceList,
): string {
  return JSON.stringify(
    GroupResourceList$outboundSchema.parse(groupResourceList),
  );
}

export function groupResourceListFromJSON(
  jsonString: string,
): SafeParseResult<GroupResourceList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupResourceList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupResourceList' from JSON`,
  );
}
