/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # SyncError Object
 *
 * @remarks
 * ### Description
 * The `SyncError` object is used to represent a sync error.
 *
 * ### Usage Example
 * List from the `GET Sync Errors` endpoint.
 */
export type SyncError = {
  /**
   * The time when this error was first seen.
   */
  firstSeen: Date;
  /**
   * The time when this error was most recently seen.
   */
  lastSeen: Date;
  /**
   * The error message associated with the sync error.
   */
  errorMessage: string;
  /**
   * The ID of the app that the error occured for.
   */
  appId?: string | undefined;
};

/** @internal */
export const SyncError$inboundSchema: z.ZodType<
  SyncError,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_seen: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  last_seen: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  error_message: z.string(),
  app_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_seen": "firstSeen",
    "last_seen": "lastSeen",
    "error_message": "errorMessage",
    "app_id": "appId",
  });
});

/** @internal */
export type SyncError$Outbound = {
  first_seen: string;
  last_seen: string;
  error_message: string;
  app_id?: string | undefined;
};

/** @internal */
export const SyncError$outboundSchema: z.ZodType<
  SyncError$Outbound,
  z.ZodTypeDef,
  SyncError
> = z.object({
  firstSeen: z.date().transform(v => v.toISOString()),
  lastSeen: z.date().transform(v => v.toISOString()),
  errorMessage: z.string(),
  appId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstSeen: "first_seen",
    lastSeen: "last_seen",
    errorMessage: "error_message",
    appId: "app_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncError$ {
  /** @deprecated use `SyncError$inboundSchema` instead. */
  export const inboundSchema = SyncError$inboundSchema;
  /** @deprecated use `SyncError$outboundSchema` instead. */
  export const outboundSchema = SyncError$outboundSchema;
  /** @deprecated use `SyncError$Outbound` instead. */
  export type Outbound = SyncError$Outbound;
}

export function syncErrorToJSON(syncError: SyncError): string {
  return JSON.stringify(SyncError$outboundSchema.parse(syncError));
}

export function syncErrorFromJSON(
  jsonString: string,
): SafeParseResult<SyncError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncError' from JSON`,
  );
}
