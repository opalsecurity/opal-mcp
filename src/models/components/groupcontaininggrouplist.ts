/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GroupContainingGroup,
  GroupContainingGroup$inboundSchema,
  GroupContainingGroup$Outbound,
  GroupContainingGroup$outboundSchema,
} from "./groupcontaininggroup.js";

export type GroupContainingGroupList = {
  containingGroups: Array<GroupContainingGroup>;
};

/** @internal */
export const GroupContainingGroupList$inboundSchema: z.ZodType<
  GroupContainingGroupList,
  z.ZodTypeDef,
  unknown
> = z.object({
  containing_groups: z.array(GroupContainingGroup$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "containing_groups": "containingGroups",
  });
});

/** @internal */
export type GroupContainingGroupList$Outbound = {
  containing_groups: Array<GroupContainingGroup$Outbound>;
};

/** @internal */
export const GroupContainingGroupList$outboundSchema: z.ZodType<
  GroupContainingGroupList$Outbound,
  z.ZodTypeDef,
  GroupContainingGroupList
> = z.object({
  containingGroups: z.array(GroupContainingGroup$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    containingGroups: "containing_groups",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupContainingGroupList$ {
  /** @deprecated use `GroupContainingGroupList$inboundSchema` instead. */
  export const inboundSchema = GroupContainingGroupList$inboundSchema;
  /** @deprecated use `GroupContainingGroupList$outboundSchema` instead. */
  export const outboundSchema = GroupContainingGroupList$outboundSchema;
  /** @deprecated use `GroupContainingGroupList$Outbound` instead. */
  export type Outbound = GroupContainingGroupList$Outbound;
}

export function groupContainingGroupListToJSON(
  groupContainingGroupList: GroupContainingGroupList,
): string {
  return JSON.stringify(
    GroupContainingGroupList$outboundSchema.parse(groupContainingGroupList),
  );
}

export function groupContainingGroupListFromJSON(
  jsonString: string,
): SafeParseResult<GroupContainingGroupList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupContainingGroupList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupContainingGroupList' from JSON`,
  );
}
