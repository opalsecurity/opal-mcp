/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RemoteUser,
  RemoteUser$inboundSchema,
  RemoteUser$Outbound,
  RemoteUser$outboundSchema,
} from "./remoteuser.js";

export type PaginatedRemoteUsersList = {
  /**
   * The cursor with which to continue pagination if additional result pages exist.
   */
  next?: string | null | undefined;
  /**
   * The cursor used to obtain the current result page.
   */
  previous?: string | null | undefined;
  results: Array<RemoteUser>;
};

/** @internal */
export const PaginatedRemoteUsersList$inboundSchema: z.ZodType<
  PaginatedRemoteUsersList,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.nullable(z.string()).optional(),
  previous: z.nullable(z.string()).optional(),
  results: z.array(RemoteUser$inboundSchema),
});

/** @internal */
export type PaginatedRemoteUsersList$Outbound = {
  next?: string | null | undefined;
  previous?: string | null | undefined;
  results: Array<RemoteUser$Outbound>;
};

/** @internal */
export const PaginatedRemoteUsersList$outboundSchema: z.ZodType<
  PaginatedRemoteUsersList$Outbound,
  z.ZodTypeDef,
  PaginatedRemoteUsersList
> = z.object({
  next: z.nullable(z.string()).optional(),
  previous: z.nullable(z.string()).optional(),
  results: z.array(RemoteUser$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedRemoteUsersList$ {
  /** @deprecated use `PaginatedRemoteUsersList$inboundSchema` instead. */
  export const inboundSchema = PaginatedRemoteUsersList$inboundSchema;
  /** @deprecated use `PaginatedRemoteUsersList$outboundSchema` instead. */
  export const outboundSchema = PaginatedRemoteUsersList$outboundSchema;
  /** @deprecated use `PaginatedRemoteUsersList$Outbound` instead. */
  export type Outbound = PaginatedRemoteUsersList$Outbound;
}

export function paginatedRemoteUsersListToJSON(
  paginatedRemoteUsersList: PaginatedRemoteUsersList,
): string {
  return JSON.stringify(
    PaginatedRemoteUsersList$outboundSchema.parse(paginatedRemoteUsersList),
  );
}

export function paginatedRemoteUsersListFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedRemoteUsersList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedRemoteUsersList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedRemoteUsersList' from JSON`,
  );
}
