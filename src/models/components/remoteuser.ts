/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ThirdPartyProviderEnum,
  ThirdPartyProviderEnum$inboundSchema,
  ThirdPartyProviderEnum$outboundSchema,
} from "./thirdpartyproviderenum.js";

/**
 * # RemoteUser Object
 *
 * @remarks
 * ### Description
 * The `RemoteUser` object is used to represent a remote user.
 */
export type RemoteUser = {
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * The ID of the remote user.
   */
  remoteId: string;
  /**
   * The third party provider of the remote user.
   */
  thirdPartyProvider: ThirdPartyProviderEnum;
};

/** @internal */
export const RemoteUser$inboundSchema: z.ZodType<
  RemoteUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  remote_id: z.string(),
  third_party_provider: ThirdPartyProviderEnum$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "remote_id": "remoteId",
    "third_party_provider": "thirdPartyProvider",
  });
});

/** @internal */
export type RemoteUser$Outbound = {
  user_id: string;
  remote_id: string;
  third_party_provider: string;
};

/** @internal */
export const RemoteUser$outboundSchema: z.ZodType<
  RemoteUser$Outbound,
  z.ZodTypeDef,
  RemoteUser
> = z.object({
  userId: z.string(),
  remoteId: z.string(),
  thirdPartyProvider: ThirdPartyProviderEnum$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    remoteId: "remote_id",
    thirdPartyProvider: "third_party_provider",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteUser$ {
  /** @deprecated use `RemoteUser$inboundSchema` instead. */
  export const inboundSchema = RemoteUser$inboundSchema;
  /** @deprecated use `RemoteUser$outboundSchema` instead. */
  export const outboundSchema = RemoteUser$outboundSchema;
  /** @deprecated use `RemoteUser$Outbound` instead. */
  export type Outbound = RemoteUser$Outbound;
}

export function remoteUserToJSON(remoteUser: RemoteUser): string {
  return JSON.stringify(RemoteUser$outboundSchema.parse(remoteUser));
}

export function remoteUserFromJSON(
  jsonString: string,
): SafeParseResult<RemoteUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoteUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoteUser' from JSON`,
  );
}
