/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RuleDisjunction,
  RuleDisjunction$inboundSchema,
  RuleDisjunction$Outbound,
  RuleDisjunction$outboundSchema,
} from "./ruledisjunction.js";

export type RuleConjunction = {
  clauses: Array<RuleDisjunction>;
};

/** @internal */
export const RuleConjunction$inboundSchema: z.ZodType<
  RuleConjunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  clauses: z.array(RuleDisjunction$inboundSchema),
});

/** @internal */
export type RuleConjunction$Outbound = {
  clauses: Array<RuleDisjunction$Outbound>;
};

/** @internal */
export const RuleConjunction$outboundSchema: z.ZodType<
  RuleConjunction$Outbound,
  z.ZodTypeDef,
  RuleConjunction
> = z.object({
  clauses: z.array(RuleDisjunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RuleConjunction$ {
  /** @deprecated use `RuleConjunction$inboundSchema` instead. */
  export const inboundSchema = RuleConjunction$inboundSchema;
  /** @deprecated use `RuleConjunction$outboundSchema` instead. */
  export const outboundSchema = RuleConjunction$outboundSchema;
  /** @deprecated use `RuleConjunction$Outbound` instead. */
  export type Outbound = RuleConjunction$Outbound;
}

export function ruleConjunctionToJSON(
  ruleConjunction: RuleConjunction,
): string {
  return JSON.stringify(RuleConjunction$outboundSchema.parse(ruleConjunction));
}

export function ruleConjunctionFromJSON(
  jsonString: string,
): SafeParseResult<RuleConjunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RuleConjunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RuleConjunction' from JSON`,
  );
}
