/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageChannelProviderEnum,
  MessageChannelProviderEnum$inboundSchema,
  MessageChannelProviderEnum$outboundSchema,
} from "./messagechannelproviderenum.js";

/**
 * # MessageChannel Object
 *
 * @remarks
 * ### Description
 * The `MessageChannel` object is used to represent a message channel.
 *
 * ### Usage Example
 * Update a groups message channel from the `UPDATE Groups` endpoint.
 */
export type MessageChannel = {
  /**
   * The ID of the message channel.
   */
  messageChannelId: string;
  /**
   * The third party provider of the message channel.
   */
  thirdPartyProvider?: MessageChannelProviderEnum | undefined;
  /**
   * The remote ID of the message channel
   */
  remoteId?: string | undefined;
  /**
   * The name of the message channel.
   */
  name?: string | undefined;
  /**
   * A bool representing whether or not the message channel is private.
   */
  isPrivate?: boolean | undefined;
};

/** @internal */
export const MessageChannel$inboundSchema: z.ZodType<
  MessageChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  message_channel_id: z.string(),
  third_party_provider: MessageChannelProviderEnum$inboundSchema.optional(),
  remote_id: z.string().optional(),
  name: z.string().optional(),
  is_private: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "message_channel_id": "messageChannelId",
    "third_party_provider": "thirdPartyProvider",
    "remote_id": "remoteId",
    "is_private": "isPrivate",
  });
});

/** @internal */
export type MessageChannel$Outbound = {
  message_channel_id: string;
  third_party_provider?: string | undefined;
  remote_id?: string | undefined;
  name?: string | undefined;
  is_private?: boolean | undefined;
};

/** @internal */
export const MessageChannel$outboundSchema: z.ZodType<
  MessageChannel$Outbound,
  z.ZodTypeDef,
  MessageChannel
> = z.object({
  messageChannelId: z.string(),
  thirdPartyProvider: MessageChannelProviderEnum$outboundSchema.optional(),
  remoteId: z.string().optional(),
  name: z.string().optional(),
  isPrivate: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    messageChannelId: "message_channel_id",
    thirdPartyProvider: "third_party_provider",
    remoteId: "remote_id",
    isPrivate: "is_private",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageChannel$ {
  /** @deprecated use `MessageChannel$inboundSchema` instead. */
  export const inboundSchema = MessageChannel$inboundSchema;
  /** @deprecated use `MessageChannel$outboundSchema` instead. */
  export const outboundSchema = MessageChannel$outboundSchema;
  /** @deprecated use `MessageChannel$Outbound` instead. */
  export type Outbound = MessageChannel$Outbound;
}

export function messageChannelToJSON(messageChannel: MessageChannel): string {
  return JSON.stringify(MessageChannel$outboundSchema.parse(messageChannel));
}

export function messageChannelFromJSON(
  jsonString: string,
): SafeParseResult<MessageChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageChannel' from JSON`,
  );
}
