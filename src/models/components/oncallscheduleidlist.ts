/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A list of on call schedule Opal UUIDs. To get the matching remote IDs, use the /on-call-schedules endpoints.
 */
export type OnCallScheduleIDList = {
  onCallScheduleIds: Array<string>;
};

/** @internal */
export const OnCallScheduleIDList$inboundSchema: z.ZodType<
  OnCallScheduleIDList,
  z.ZodTypeDef,
  unknown
> = z.object({
  on_call_schedule_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "on_call_schedule_ids": "onCallScheduleIds",
  });
});

/** @internal */
export type OnCallScheduleIDList$Outbound = {
  on_call_schedule_ids: Array<string>;
};

/** @internal */
export const OnCallScheduleIDList$outboundSchema: z.ZodType<
  OnCallScheduleIDList$Outbound,
  z.ZodTypeDef,
  OnCallScheduleIDList
> = z.object({
  onCallScheduleIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    onCallScheduleIds: "on_call_schedule_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnCallScheduleIDList$ {
  /** @deprecated use `OnCallScheduleIDList$inboundSchema` instead. */
  export const inboundSchema = OnCallScheduleIDList$inboundSchema;
  /** @deprecated use `OnCallScheduleIDList$outboundSchema` instead. */
  export const outboundSchema = OnCallScheduleIDList$outboundSchema;
  /** @deprecated use `OnCallScheduleIDList$Outbound` instead. */
  export type Outbound = OnCallScheduleIDList$Outbound;
}

export function onCallScheduleIDListToJSON(
  onCallScheduleIDList: OnCallScheduleIDList,
): string {
  return JSON.stringify(
    OnCallScheduleIDList$outboundSchema.parse(onCallScheduleIDList),
  );
}

export function onCallScheduleIDListFromJSON(
  jsonString: string,
): SafeParseResult<OnCallScheduleIDList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnCallScheduleIDList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnCallScheduleIDList' from JSON`,
  );
}
