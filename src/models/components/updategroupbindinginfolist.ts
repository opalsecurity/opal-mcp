/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UpdateGroupBindingInfo,
  UpdateGroupBindingInfo$inboundSchema,
  UpdateGroupBindingInfo$Outbound,
  UpdateGroupBindingInfo$outboundSchema,
} from "./updategroupbindinginfo.js";

export type UpdateGroupBindingInfoList = {
  /**
   * A list of group bindings with information to update.
   */
  groupBindings: Array<UpdateGroupBindingInfo>;
};

/** @internal */
export const UpdateGroupBindingInfoList$inboundSchema: z.ZodType<
  UpdateGroupBindingInfoList,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_bindings: z.array(UpdateGroupBindingInfo$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "group_bindings": "groupBindings",
  });
});

/** @internal */
export type UpdateGroupBindingInfoList$Outbound = {
  group_bindings: Array<UpdateGroupBindingInfo$Outbound>;
};

/** @internal */
export const UpdateGroupBindingInfoList$outboundSchema: z.ZodType<
  UpdateGroupBindingInfoList$Outbound,
  z.ZodTypeDef,
  UpdateGroupBindingInfoList
> = z.object({
  groupBindings: z.array(UpdateGroupBindingInfo$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    groupBindings: "group_bindings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupBindingInfoList$ {
  /** @deprecated use `UpdateGroupBindingInfoList$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupBindingInfoList$inboundSchema;
  /** @deprecated use `UpdateGroupBindingInfoList$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupBindingInfoList$outboundSchema;
  /** @deprecated use `UpdateGroupBindingInfoList$Outbound` instead. */
  export type Outbound = UpdateGroupBindingInfoList$Outbound;
}

export function updateGroupBindingInfoListToJSON(
  updateGroupBindingInfoList: UpdateGroupBindingInfoList,
): string {
  return JSON.stringify(
    UpdateGroupBindingInfoList$outboundSchema.parse(updateGroupBindingInfoList),
  );
}

export function updateGroupBindingInfoListFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupBindingInfoList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupBindingInfoList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupBindingInfoList' from JSON`,
  );
}
