/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # Sub event Object
 *
 * @remarks
 * ### Description
 * The `SubEvent` object is used to represent a subevent.
 *
 * ### Usage Example
 * Fetch from the `LIST Events` endpoint.
 */
export type SubEvent = {
  /**
   * The subevent type.
   */
  subEventType: string;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const SubEvent$inboundSchema: z.ZodType<
  SubEvent,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    sub_event_type: z.string(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "sub_event_type": "subEventType",
  });
});

/** @internal */
export type SubEvent$Outbound = {
  sub_event_type: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SubEvent$outboundSchema: z.ZodType<
  SubEvent$Outbound,
  z.ZodTypeDef,
  SubEvent
> = z.object({
  subEventType: z.string(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      subEventType: "sub_event_type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubEvent$ {
  /** @deprecated use `SubEvent$inboundSchema` instead. */
  export const inboundSchema = SubEvent$inboundSchema;
  /** @deprecated use `SubEvent$outboundSchema` instead. */
  export const outboundSchema = SubEvent$outboundSchema;
  /** @deprecated use `SubEvent$Outbound` instead. */
  export type Outbound = SubEvent$Outbound;
}

export function subEventToJSON(subEvent: SubEvent): string {
  return JSON.stringify(SubEvent$outboundSchema.parse(subEvent));
}

export function subEventFromJSON(
  jsonString: string,
): SafeParseResult<SubEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubEvent' from JSON`,
  );
}
