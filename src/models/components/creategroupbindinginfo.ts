/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateGroupBindingInfoGroup = {
  /**
   * The ID of the group.
   */
  groupId: string;
};

/**
 * # CreateGroupBindingInfo Object
 *
 * @remarks
 * ### Description
 * The `CreateGroupBindingInfo` object is used as an input to the CreateGroupBinding API.
 */
export type CreateGroupBindingInfo = {
  /**
   * The ID of the source group.
   */
  sourceGroupId: string;
  /**
   * The list of groups.
   */
  groups: Array<CreateGroupBindingInfoGroup>;
};

/** @internal */
export const CreateGroupBindingInfoGroup$inboundSchema: z.ZodType<
  CreateGroupBindingInfoGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type CreateGroupBindingInfoGroup$Outbound = {
  group_id: string;
};

/** @internal */
export const CreateGroupBindingInfoGroup$outboundSchema: z.ZodType<
  CreateGroupBindingInfoGroup$Outbound,
  z.ZodTypeDef,
  CreateGroupBindingInfoGroup
> = z.object({
  groupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGroupBindingInfoGroup$ {
  /** @deprecated use `CreateGroupBindingInfoGroup$inboundSchema` instead. */
  export const inboundSchema = CreateGroupBindingInfoGroup$inboundSchema;
  /** @deprecated use `CreateGroupBindingInfoGroup$outboundSchema` instead. */
  export const outboundSchema = CreateGroupBindingInfoGroup$outboundSchema;
  /** @deprecated use `CreateGroupBindingInfoGroup$Outbound` instead. */
  export type Outbound = CreateGroupBindingInfoGroup$Outbound;
}

export function createGroupBindingInfoGroupToJSON(
  createGroupBindingInfoGroup: CreateGroupBindingInfoGroup,
): string {
  return JSON.stringify(
    CreateGroupBindingInfoGroup$outboundSchema.parse(
      createGroupBindingInfoGroup,
    ),
  );
}

export function createGroupBindingInfoGroupFromJSON(
  jsonString: string,
): SafeParseResult<CreateGroupBindingInfoGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateGroupBindingInfoGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGroupBindingInfoGroup' from JSON`,
  );
}

/** @internal */
export const CreateGroupBindingInfo$inboundSchema: z.ZodType<
  CreateGroupBindingInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_group_id: z.string(),
  groups: z.array(z.lazy(() => CreateGroupBindingInfoGroup$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "source_group_id": "sourceGroupId",
  });
});

/** @internal */
export type CreateGroupBindingInfo$Outbound = {
  source_group_id: string;
  groups: Array<CreateGroupBindingInfoGroup$Outbound>;
};

/** @internal */
export const CreateGroupBindingInfo$outboundSchema: z.ZodType<
  CreateGroupBindingInfo$Outbound,
  z.ZodTypeDef,
  CreateGroupBindingInfo
> = z.object({
  sourceGroupId: z.string(),
  groups: z.array(z.lazy(() => CreateGroupBindingInfoGroup$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    sourceGroupId: "source_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGroupBindingInfo$ {
  /** @deprecated use `CreateGroupBindingInfo$inboundSchema` instead. */
  export const inboundSchema = CreateGroupBindingInfo$inboundSchema;
  /** @deprecated use `CreateGroupBindingInfo$outboundSchema` instead. */
  export const outboundSchema = CreateGroupBindingInfo$outboundSchema;
  /** @deprecated use `CreateGroupBindingInfo$Outbound` instead. */
  export type Outbound = CreateGroupBindingInfo$Outbound;
}

export function createGroupBindingInfoToJSON(
  createGroupBindingInfo: CreateGroupBindingInfo,
): string {
  return JSON.stringify(
    CreateGroupBindingInfo$outboundSchema.parse(createGroupBindingInfo),
  );
}

export function createGroupBindingInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateGroupBindingInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateGroupBindingInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGroupBindingInfo' from JSON`,
  );
}
