/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceRemoteInfo,
  ResourceRemoteInfo$inboundSchema,
  ResourceRemoteInfo$Outbound,
  ResourceRemoteInfo$outboundSchema,
} from "./resourceremoteinfo.js";
import {
  ResourceTypeEnum,
  ResourceTypeEnum$inboundSchema,
  ResourceTypeEnum$outboundSchema,
} from "./resourcetypeenum.js";
import {
  RiskSensitivityEnum,
  RiskSensitivityEnum$inboundSchema,
  RiskSensitivityEnum$outboundSchema,
} from "./risksensitivityenum.js";

/**
 * # CreateResourceInfo Object
 *
 * @remarks
 * ### Description
 * The `CreateResourceInfo` object is used to store creation info for a resource.
 *
 * ### Usage Example
 * Use in the `POST Resources` endpoint.
 */
export type CreateResourceInfo = {
  /**
   * The name of the remote resource.
   */
  name: string;
  /**
   * A description of the remote resource.
   */
  description?: string | undefined;
  /**
   * The type of the resource.
   */
  resourceType: ResourceTypeEnum;
  /**
   * The ID of the app for the resource.
   */
  appId: string;
  /**
   * Information that defines the remote resource. This replaces the deprecated remote_id and metadata fields.
   */
  remoteInfo?: ResourceRemoteInfo | undefined;
  /**
   * Deprecated - use remote_info instead. The ID of the resource on the remote system. Include only for items linked to remote systems. See [this guide](https://docs.opal.dev/reference/end-system-objects) for details on how to specify this field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  remoteResourceId?: string | undefined;
  /**
   * Deprecated - use remote_info instead.
   *
   * @remarks
   *
   * JSON metadata about the remote resource. Include only for items linked to remote systems. See [this guide](https://docs.opal.dev/reference/end-system-objects) for details on how to specify this field.
   * The required format is dependent on resource_type and should have the following schema:
   * <style type="text/css">
   * code {max-height:300px !important}
   * </style>
   * ```json
   * {
   *   "$schema": "http://json-schema.org/draft-04/schema#",
   *   "title": "Resource Metadata",
   *   "properties": {
   *     "aws_ec2_instance": {
   *       "properties": {
   *         "instance_id": {
   *           "type": "string"
   *         },
   *         "region": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["instance_id", "region"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "AWS EC2 Instance"
   *     },
   *     "aws_eks_cluster": {
   *       "properties": {
   *         "cluster_name": {
   *           "type": "string"
   *         },
   *         "cluster_region": {
   *           "type": "string"
   *         },
   *         "cluster_arn": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["cluster_name", "cluster_region", "cluster_arn"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "AWS EKS Cluster"
   *     },
   *     "aws_rds_instance": {
   *       "properties": {
   *         "instance_id": {
   *           "type": "string"
   *         },
   *         "engine": {
   *           "type": "string"
   *         },
   *         "region": {
   *           "type": "string"
   *         },
   *         "resource_id": {
   *           "type": "string"
   *         },
   *         "database_name": {
   *           "type": "string"
   *         }
   *       },
   *       "required": [
   *         "instance_id",
   *         "engine",
   *         "region",
   *         "resource_id",
   *         "database_name"
   *       ],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "AWS RDS Instance"
   *     },
   *     "aws_role": {
   *       "properties": {
   *         "arn": {
   *           "type": "string"
   *         },
   *         "name": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["arn", "name"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "AWS Role"
   *     },
   *     "gcp_bucket": {
   *       "properties": {
   *         "bucket_id": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["bucket_id"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "GCP Bucket"
   *     },
   *     "gcp_compute_instance": {
   *       "properties": {
   *         "instance_id": {
   *           "type": "string"
   *         },
   *         "project_id": {
   *           "type": "string"
   *         },
   *         "zone": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["instance_id", "project_id", "zone"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "GCP Compute Instance"
   *     },
   *     "gcp_folder": {
   *       "properties": {
   *         "folder_id": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["folder_id"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "GCP Folder"
   *     },
   *     "gcp_gke_cluster": {
   *       "properties": {
   *         "cluster_name": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["cluster_name"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "GCP GKE Cluster"
   *     },
   *     "gcp_project": {
   *       "properties": {
   *         "project_id": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["project_id"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "GCP Project"
   *     },
   *     "gcp_sql_instance": {
   *       "properties": {
   *         "instance_id": {
   *           "type": "string"
   *         },
   *         "project_id": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["instance_id", "project_id"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "GCP SQL Instance"
   *     },
   *     "git_hub_repo": {
   *       "properties": {
   *         "org_name": {
   *           "type": "string"
   *         },
   *         "repo_name": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["org_name", "repo_name"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "GitHub Repo"
   *     },
   *     "okta_directory_app": {
   *       "properties": {
   *         "app_id": {
   *           "type": "string"
   *         },
   *         "logo_url": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["app_id", "logo_url"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "Okta Directory App"
   *     },
   *     "okta_directory_role": {
   *       "properties": {
   *         "role_type": {
   *           "type": "string"
   *         },
   *         "role_id": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["role_type", "role_id"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "Okta Directory Role"
   *     },
   *     "salesforce_profile": {
   *       "properties": {
   *         "user_license": {
   *           "type": "string"
   *         }
   *       },
   *       "required": ["user_license"],
   *       "additionalProperties": false,
   *       "type": "object",
   *       "title": "Salesforce Profile"
   *     }
   *   },
   *   "additionalProperties": false,
   *   "minProperties": 1,
   *   "maxProperties": 1,
   *   "type": "object"
   * }
   * ```
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  metadata?: string | undefined;
  /**
   * Custom request notification sent upon request approval.
   */
  customRequestNotification?: string | null | undefined;
  riskSensitivityOverride?: RiskSensitivityEnum | undefined;
};

/** @internal */
export const CreateResourceInfo$inboundSchema: z.ZodType<
  CreateResourceInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  resource_type: ResourceTypeEnum$inboundSchema,
  app_id: z.string(),
  remote_info: ResourceRemoteInfo$inboundSchema.optional(),
  remote_resource_id: z.string().optional(),
  metadata: z.string().optional(),
  custom_request_notification: z.nullable(z.string()).optional(),
  risk_sensitivity_override: RiskSensitivityEnum$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "app_id": "appId",
    "remote_info": "remoteInfo",
    "remote_resource_id": "remoteResourceId",
    "custom_request_notification": "customRequestNotification",
    "risk_sensitivity_override": "riskSensitivityOverride",
  });
});

/** @internal */
export type CreateResourceInfo$Outbound = {
  name: string;
  description?: string | undefined;
  resource_type: string;
  app_id: string;
  remote_info?: ResourceRemoteInfo$Outbound | undefined;
  remote_resource_id?: string | undefined;
  metadata?: string | undefined;
  custom_request_notification?: string | null | undefined;
  risk_sensitivity_override?: string | undefined;
};

/** @internal */
export const CreateResourceInfo$outboundSchema: z.ZodType<
  CreateResourceInfo$Outbound,
  z.ZodTypeDef,
  CreateResourceInfo
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  resourceType: ResourceTypeEnum$outboundSchema,
  appId: z.string(),
  remoteInfo: ResourceRemoteInfo$outboundSchema.optional(),
  remoteResourceId: z.string().optional(),
  metadata: z.string().optional(),
  customRequestNotification: z.nullable(z.string()).optional(),
  riskSensitivityOverride: RiskSensitivityEnum$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    appId: "app_id",
    remoteInfo: "remote_info",
    remoteResourceId: "remote_resource_id",
    customRequestNotification: "custom_request_notification",
    riskSensitivityOverride: "risk_sensitivity_override",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResourceInfo$ {
  /** @deprecated use `CreateResourceInfo$inboundSchema` instead. */
  export const inboundSchema = CreateResourceInfo$inboundSchema;
  /** @deprecated use `CreateResourceInfo$outboundSchema` instead. */
  export const outboundSchema = CreateResourceInfo$outboundSchema;
  /** @deprecated use `CreateResourceInfo$Outbound` instead. */
  export type Outbound = CreateResourceInfo$Outbound;
}

export function createResourceInfoToJSON(
  createResourceInfo: CreateResourceInfo,
): string {
  return JSON.stringify(
    CreateResourceInfo$outboundSchema.parse(createResourceInfo),
  );
}

export function createResourceInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateResourceInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResourceInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResourceInfo' from JSON`,
  );
}
