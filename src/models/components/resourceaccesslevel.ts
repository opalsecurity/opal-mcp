/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # Access Level Object
 *
 * @remarks
 * ### Description
 * The `AccessLevel` object is used to represent the level of access that a principal has. The "default" access
 * level is a `AccessLevel` object whose fields are all empty strings.
 *
 * ### Usage Example
 * View the `AccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
 */
export type ResourceAccessLevel = {
  /**
   * The human-readable name of the access level.
   */
  accessLevelName: string;
  /**
   * The machine-readable identifier of the access level.
   */
  accessLevelRemoteId: string;
};

/** @internal */
export const ResourceAccessLevel$inboundSchema: z.ZodType<
  ResourceAccessLevel,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_level_name: z.string(),
  access_level_remote_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "access_level_name": "accessLevelName",
    "access_level_remote_id": "accessLevelRemoteId",
  });
});

/** @internal */
export type ResourceAccessLevel$Outbound = {
  access_level_name: string;
  access_level_remote_id: string;
};

/** @internal */
export const ResourceAccessLevel$outboundSchema: z.ZodType<
  ResourceAccessLevel$Outbound,
  z.ZodTypeDef,
  ResourceAccessLevel
> = z.object({
  accessLevelName: z.string(),
  accessLevelRemoteId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accessLevelName: "access_level_name",
    accessLevelRemoteId: "access_level_remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceAccessLevel$ {
  /** @deprecated use `ResourceAccessLevel$inboundSchema` instead. */
  export const inboundSchema = ResourceAccessLevel$inboundSchema;
  /** @deprecated use `ResourceAccessLevel$outboundSchema` instead. */
  export const outboundSchema = ResourceAccessLevel$outboundSchema;
  /** @deprecated use `ResourceAccessLevel$Outbound` instead. */
  export type Outbound = ResourceAccessLevel$Outbound;
}

export function resourceAccessLevelToJSON(
  resourceAccessLevel: ResourceAccessLevel,
): string {
  return JSON.stringify(
    ResourceAccessLevel$outboundSchema.parse(resourceAccessLevel),
  );
}

export function resourceAccessLevelFromJSON(
  jsonString: string,
): SafeParseResult<ResourceAccessLevel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceAccessLevel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceAccessLevel' from JSON`,
  );
}
