/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppValidationSeverityEnum,
  AppValidationSeverityEnum$inboundSchema,
  AppValidationSeverityEnum$outboundSchema,
} from "./appvalidationseverityenum.js";
import {
  AppValidationStatusEnum,
  AppValidationStatusEnum$inboundSchema,
  AppValidationStatusEnum$outboundSchema,
} from "./appvalidationstatusenum.js";

/**
 * # App validation object
 *
 * @remarks
 * ### Description
 * The `AppValidation` object is used to represent a validation check of an apps' configuration and permissions.
 *
 * ### Usage Example
 * List from the `GET Apps` endpoint.
 */
export type AppValidation = {
  /**
   * The key of the app validation. These are not unique IDs between runs.
   */
  key: string;
  /**
   * The human-readable description of whether the validation has the permissions.
   */
  name?: any | undefined;
  /**
   * The reason for needing the validation.
   */
  usageReason?: string | undefined;
  /**
   * Extra details regarding the validation. Could be an error message or restrictions on permissions.
   */
  details?: string | undefined;
  /**
   * The severity of an app validation.
   */
  severity: AppValidationSeverityEnum;
  /**
   * The status of an app validation.
   */
  status: AppValidationStatusEnum;
  /**
   * The date and time the app validation was last run.
   */
  updatedAt: Date;
};

/** @internal */
export const AppValidation$inboundSchema: z.ZodType<
  AppValidation,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  name: z.any().optional(),
  usage_reason: z.string().optional(),
  details: z.string().optional(),
  severity: AppValidationSeverityEnum$inboundSchema,
  status: AppValidationStatusEnum$inboundSchema,
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "usage_reason": "usageReason",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AppValidation$Outbound = {
  key: string;
  name?: any | undefined;
  usage_reason?: string | undefined;
  details?: string | undefined;
  severity: string;
  status: string;
  updated_at: string;
};

/** @internal */
export const AppValidation$outboundSchema: z.ZodType<
  AppValidation$Outbound,
  z.ZodTypeDef,
  AppValidation
> = z.object({
  key: z.string(),
  name: z.any().optional(),
  usageReason: z.string().optional(),
  details: z.string().optional(),
  severity: AppValidationSeverityEnum$outboundSchema,
  status: AppValidationStatusEnum$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    usageReason: "usage_reason",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppValidation$ {
  /** @deprecated use `AppValidation$inboundSchema` instead. */
  export const inboundSchema = AppValidation$inboundSchema;
  /** @deprecated use `AppValidation$outboundSchema` instead. */
  export const outboundSchema = AppValidation$outboundSchema;
  /** @deprecated use `AppValidation$Outbound` instead. */
  export type Outbound = AppValidation$Outbound;
}

export function appValidationToJSON(appValidation: AppValidation): string {
  return JSON.stringify(AppValidation$outboundSchema.parse(appValidation));
}

export function appValidationFromJSON(
  jsonString: string,
): SafeParseResult<AppValidation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppValidation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppValidation' from JSON`,
  );
}
