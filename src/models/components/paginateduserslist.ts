/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  User,
  User$inboundSchema,
  User$Outbound,
  User$outboundSchema,
} from "./user.js";

export type PaginatedUsersList = {
  /**
   * The cursor with which to continue pagination if additional result pages exist.
   */
  next?: string | null | undefined;
  /**
   * The cursor used to obtain the current result page.
   */
  previous?: string | null | undefined;
  results: Array<User>;
};

/** @internal */
export const PaginatedUsersList$inboundSchema: z.ZodType<
  PaginatedUsersList,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.nullable(z.string()).optional(),
  previous: z.nullable(z.string()).optional(),
  results: z.array(User$inboundSchema),
});

/** @internal */
export type PaginatedUsersList$Outbound = {
  next?: string | null | undefined;
  previous?: string | null | undefined;
  results: Array<User$Outbound>;
};

/** @internal */
export const PaginatedUsersList$outboundSchema: z.ZodType<
  PaginatedUsersList$Outbound,
  z.ZodTypeDef,
  PaginatedUsersList
> = z.object({
  next: z.nullable(z.string()).optional(),
  previous: z.nullable(z.string()).optional(),
  results: z.array(User$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedUsersList$ {
  /** @deprecated use `PaginatedUsersList$inboundSchema` instead. */
  export const inboundSchema = PaginatedUsersList$inboundSchema;
  /** @deprecated use `PaginatedUsersList$outboundSchema` instead. */
  export const outboundSchema = PaginatedUsersList$outboundSchema;
  /** @deprecated use `PaginatedUsersList$Outbound` instead. */
  export type Outbound = PaginatedUsersList$Outbound;
}

export function paginatedUsersListToJSON(
  paginatedUsersList: PaginatedUsersList,
): string {
  return JSON.stringify(
    PaginatedUsersList$outboundSchema.parse(paginatedUsersList),
  );
}

export function paginatedUsersListFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedUsersList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedUsersList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedUsersList' from JSON`,
  );
}
