/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropagationStatusEnum,
  PropagationStatusEnum$inboundSchema,
  PropagationStatusEnum$outboundSchema,
} from "./propagationstatusenum.js";

/**
 * The state of whether the push action was propagated to the remote system. If this is null, the access was synced from the remote system.
 */
export type PropagationStatus = {
  /**
   * The status of whether the user has been synced to the group or resource in the remote system.
   */
  status: PropagationStatusEnum;
};

/** @internal */
export const PropagationStatus$inboundSchema: z.ZodType<
  PropagationStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PropagationStatusEnum$inboundSchema,
});

/** @internal */
export type PropagationStatus$Outbound = {
  status: string;
};

/** @internal */
export const PropagationStatus$outboundSchema: z.ZodType<
  PropagationStatus$Outbound,
  z.ZodTypeDef,
  PropagationStatus
> = z.object({
  status: PropagationStatusEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropagationStatus$ {
  /** @deprecated use `PropagationStatus$inboundSchema` instead. */
  export const inboundSchema = PropagationStatus$inboundSchema;
  /** @deprecated use `PropagationStatus$outboundSchema` instead. */
  export const outboundSchema = PropagationStatus$outboundSchema;
  /** @deprecated use `PropagationStatus$Outbound` instead. */
  export type Outbound = PropagationStatus$Outbound;
}

export function propagationStatusToJSON(
  propagationStatus: PropagationStatus,
): string {
  return JSON.stringify(
    PropagationStatus$outboundSchema.parse(propagationStatus),
  );
}

export function propagationStatusFromJSON(
  jsonString: string,
): SafeParseResult<PropagationStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropagationStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropagationStatus' from JSON`,
  );
}
