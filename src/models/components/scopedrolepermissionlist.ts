/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ScopedRolePermission,
  ScopedRolePermission$inboundSchema,
  ScopedRolePermission$Outbound,
  ScopedRolePermission$outboundSchema,
} from "./scopedrolepermission.js";

export type ScopedRolePermissionList = {
  permissions: Array<ScopedRolePermission>;
};

/** @internal */
export const ScopedRolePermissionList$inboundSchema: z.ZodType<
  ScopedRolePermissionList,
  z.ZodTypeDef,
  unknown
> = z.object({
  permissions: z.array(ScopedRolePermission$inboundSchema),
});

/** @internal */
export type ScopedRolePermissionList$Outbound = {
  permissions: Array<ScopedRolePermission$Outbound>;
};

/** @internal */
export const ScopedRolePermissionList$outboundSchema: z.ZodType<
  ScopedRolePermissionList$Outbound,
  z.ZodTypeDef,
  ScopedRolePermissionList
> = z.object({
  permissions: z.array(ScopedRolePermission$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScopedRolePermissionList$ {
  /** @deprecated use `ScopedRolePermissionList$inboundSchema` instead. */
  export const inboundSchema = ScopedRolePermissionList$inboundSchema;
  /** @deprecated use `ScopedRolePermissionList$outboundSchema` instead. */
  export const outboundSchema = ScopedRolePermissionList$outboundSchema;
  /** @deprecated use `ScopedRolePermissionList$Outbound` instead. */
  export type Outbound = ScopedRolePermissionList$Outbound;
}

export function scopedRolePermissionListToJSON(
  scopedRolePermissionList: ScopedRolePermissionList,
): string {
  return JSON.stringify(
    ScopedRolePermissionList$outboundSchema.parse(scopedRolePermissionList),
  );
}

export function scopedRolePermissionListFromJSON(
  jsonString: string,
): SafeParseResult<ScopedRolePermissionList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScopedRolePermissionList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScopedRolePermissionList' from JSON`,
  );
}
