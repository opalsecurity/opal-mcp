/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Uar,
  Uar$inboundSchema,
  Uar$Outbound,
  Uar$outboundSchema,
} from "./uar.js";

/**
 * A list of UARs.
 */
export type PaginatedUARsList = {
  /**
   * The cursor with which to continue pagination if additional result pages exist.
   */
  next?: string | null | undefined;
  /**
   * The cursor used to obtain the current result page.
   */
  previous?: string | null | undefined;
  results: Array<Uar>;
};

/** @internal */
export const PaginatedUARsList$inboundSchema: z.ZodType<
  PaginatedUARsList,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.nullable(z.string()).optional(),
  previous: z.nullable(z.string()).optional(),
  results: z.array(Uar$inboundSchema),
});

/** @internal */
export type PaginatedUARsList$Outbound = {
  next?: string | null | undefined;
  previous?: string | null | undefined;
  results: Array<Uar$Outbound>;
};

/** @internal */
export const PaginatedUARsList$outboundSchema: z.ZodType<
  PaginatedUARsList$Outbound,
  z.ZodTypeDef,
  PaginatedUARsList
> = z.object({
  next: z.nullable(z.string()).optional(),
  previous: z.nullable(z.string()).optional(),
  results: z.array(Uar$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedUARsList$ {
  /** @deprecated use `PaginatedUARsList$inboundSchema` instead. */
  export const inboundSchema = PaginatedUARsList$inboundSchema;
  /** @deprecated use `PaginatedUARsList$outboundSchema` instead. */
  export const outboundSchema = PaginatedUARsList$outboundSchema;
  /** @deprecated use `PaginatedUARsList$Outbound` instead. */
  export type Outbound = PaginatedUARsList$Outbound;
}

export function paginatedUARsListToJSON(
  paginatedUARsList: PaginatedUARsList,
): string {
  return JSON.stringify(
    PaginatedUARsList$outboundSchema.parse(paginatedUARsList),
  );
}

export function paginatedUARsListFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedUARsList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedUARsList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedUARsList' from JSON`,
  );
}
