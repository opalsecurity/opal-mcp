/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # CreateBundleInfo Object
 *
 * @remarks
 * ### Description
 * The `CreateBundleInfo` object is used to store creation info for a bundle.
 *
 * ### Usage Example
 * Use in the `POST Bundles` endpoint.
 */
export type CreateBundleInfo = {
  /**
   * The name of the bundle.
   */
  name: string;
  /**
   * A brief description of the bundle.
   */
  description?: string | undefined;
  /**
   * The ID of the bundle's admin owner.
   */
  adminOwnerId: string;
};

/** @internal */
export const CreateBundleInfo$inboundSchema: z.ZodType<
  CreateBundleInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  admin_owner_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "admin_owner_id": "adminOwnerId",
  });
});

/** @internal */
export type CreateBundleInfo$Outbound = {
  name: string;
  description?: string | undefined;
  admin_owner_id: string;
};

/** @internal */
export const CreateBundleInfo$outboundSchema: z.ZodType<
  CreateBundleInfo$Outbound,
  z.ZodTypeDef,
  CreateBundleInfo
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  adminOwnerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    adminOwnerId: "admin_owner_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBundleInfo$ {
  /** @deprecated use `CreateBundleInfo$inboundSchema` instead. */
  export const inboundSchema = CreateBundleInfo$inboundSchema;
  /** @deprecated use `CreateBundleInfo$outboundSchema` instead. */
  export const outboundSchema = CreateBundleInfo$outboundSchema;
  /** @deprecated use `CreateBundleInfo$Outbound` instead. */
  export type Outbound = CreateBundleInfo$Outbound;
}

export function createBundleInfoToJSON(
  createBundleInfo: CreateBundleInfo,
): string {
  return JSON.stringify(
    CreateBundleInfo$outboundSchema.parse(createBundleInfo),
  );
}

export function createBundleInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateBundleInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBundleInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBundleInfo' from JSON`,
  );
}
