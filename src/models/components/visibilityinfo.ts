/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VisibilityTypeEnum,
  VisibilityTypeEnum$inboundSchema,
  VisibilityTypeEnum$outboundSchema,
} from "./visibilitytypeenum.js";

/**
 * Visibility infomation of an entity.
 */
export type VisibilityInfo = {
  /**
   * The visibility level of the entity.
   */
  visibility: VisibilityTypeEnum;
  visibilityGroupIds?: Array<string> | undefined;
};

/** @internal */
export const VisibilityInfo$inboundSchema: z.ZodType<
  VisibilityInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: VisibilityTypeEnum$inboundSchema,
  visibility_group_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "visibility_group_ids": "visibilityGroupIds",
  });
});

/** @internal */
export type VisibilityInfo$Outbound = {
  visibility: string;
  visibility_group_ids?: Array<string> | undefined;
};

/** @internal */
export const VisibilityInfo$outboundSchema: z.ZodType<
  VisibilityInfo$Outbound,
  z.ZodTypeDef,
  VisibilityInfo
> = z.object({
  visibility: VisibilityTypeEnum$outboundSchema,
  visibilityGroupIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    visibilityGroupIds: "visibility_group_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisibilityInfo$ {
  /** @deprecated use `VisibilityInfo$inboundSchema` instead. */
  export const inboundSchema = VisibilityInfo$inboundSchema;
  /** @deprecated use `VisibilityInfo$outboundSchema` instead. */
  export const outboundSchema = VisibilityInfo$outboundSchema;
  /** @deprecated use `VisibilityInfo$Outbound` instead. */
  export type Outbound = VisibilityInfo$Outbound;
}

export function visibilityInfoToJSON(visibilityInfo: VisibilityInfo): string {
  return JSON.stringify(VisibilityInfo$outboundSchema.parse(visibilityInfo));
}

export function visibilityInfoFromJSON(
  jsonString: string,
): SafeParseResult<VisibilityInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisibilityInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisibilityInfo' from JSON`,
  );
}
