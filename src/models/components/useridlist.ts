/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A list of user IDs.
 */
export type UserIDList = {
  userIds: Array<string>;
};

/** @internal */
export const UserIDList$inboundSchema: z.ZodType<
  UserIDList,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "user_ids": "userIds",
  });
});

/** @internal */
export type UserIDList$Outbound = {
  user_ids: Array<string>;
};

/** @internal */
export const UserIDList$outboundSchema: z.ZodType<
  UserIDList$Outbound,
  z.ZodTypeDef,
  UserIDList
> = z.object({
  userIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    userIds: "user_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserIDList$ {
  /** @deprecated use `UserIDList$inboundSchema` instead. */
  export const inboundSchema = UserIDList$inboundSchema;
  /** @deprecated use `UserIDList$outboundSchema` instead. */
  export const outboundSchema = UserIDList$outboundSchema;
  /** @deprecated use `UserIDList$Outbound` instead. */
  export type Outbound = UserIDList$Outbound;
}

export function userIDListToJSON(userIDList: UserIDList): string {
  return JSON.stringify(UserIDList$outboundSchema.parse(userIDList));
}

export function userIDListFromJSON(
  jsonString: string,
): SafeParseResult<UserIDList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserIDList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserIDList' from JSON`,
  );
}
