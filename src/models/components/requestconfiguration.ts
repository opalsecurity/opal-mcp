/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Condition,
  Condition$inboundSchema,
  Condition$Outbound,
  Condition$outboundSchema,
} from "./condition.js";
import {
  ReviewerStage,
  ReviewerStage$inboundSchema,
  ReviewerStage$Outbound,
  ReviewerStage$outboundSchema,
} from "./reviewerstage.js";

/**
 * # Request Configuration Object
 *
 * @remarks
 * ### Description
 * The `RequestConfiguration` object is used to represent a request configuration.
 *
 * ### Usage Example
 * Returned from the `GET Request Configurations` endpoint.
 */
export type RequestConfiguration = {
  /**
   * # Condition Object
   *
   * @remarks
   * ### Description
   * The `Condition` object is used to represent a condition.
   *
   * ### Usage Example
   * Used to match request configurations to users in `RequestConfiguration`
   */
  condition?: Condition | undefined;
  /**
   * A bool representing whether or not to allow requests for this resource.
   */
  allowRequests: boolean;
  /**
   * A bool representing whether or not to automatically approve requests for this resource.
   */
  autoApproval: boolean;
  /**
   * A bool representing whether or not to require MFA for requesting access to this resource.
   */
  requireMfaToRequest: boolean;
  /**
   * The maximum duration for which the resource can be requested (in minutes).
   */
  maxDurationMinutes?: number | undefined;
  /**
   * The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.
   */
  recommendedDurationMinutes?: number | undefined;
  /**
   * A bool representing whether or not access requests to the resource require an access ticket.
   */
  requireSupportTicket: boolean;
  /**
   * The ID of the associated request template.
   */
  requestTemplateId?: string | undefined;
  /**
   * The list of reviewer stages for the request configuration.
   */
  reviewerStages?: Array<ReviewerStage> | undefined;
  /**
   * The priority of the request configuration.
   */
  priority: number;
};

/** @internal */
export const RequestConfiguration$inboundSchema: z.ZodType<
  RequestConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: Condition$inboundSchema.optional(),
  allow_requests: z.boolean(),
  auto_approval: z.boolean(),
  require_mfa_to_request: z.boolean(),
  max_duration_minutes: z.number().int().optional(),
  recommended_duration_minutes: z.number().int().optional(),
  require_support_ticket: z.boolean(),
  request_template_id: z.string().optional(),
  reviewer_stages: z.array(ReviewerStage$inboundSchema).optional(),
  priority: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "allow_requests": "allowRequests",
    "auto_approval": "autoApproval",
    "require_mfa_to_request": "requireMfaToRequest",
    "max_duration_minutes": "maxDurationMinutes",
    "recommended_duration_minutes": "recommendedDurationMinutes",
    "require_support_ticket": "requireSupportTicket",
    "request_template_id": "requestTemplateId",
    "reviewer_stages": "reviewerStages",
  });
});

/** @internal */
export type RequestConfiguration$Outbound = {
  condition?: Condition$Outbound | undefined;
  allow_requests: boolean;
  auto_approval: boolean;
  require_mfa_to_request: boolean;
  max_duration_minutes?: number | undefined;
  recommended_duration_minutes?: number | undefined;
  require_support_ticket: boolean;
  request_template_id?: string | undefined;
  reviewer_stages?: Array<ReviewerStage$Outbound> | undefined;
  priority: number;
};

/** @internal */
export const RequestConfiguration$outboundSchema: z.ZodType<
  RequestConfiguration$Outbound,
  z.ZodTypeDef,
  RequestConfiguration
> = z.object({
  condition: Condition$outboundSchema.optional(),
  allowRequests: z.boolean(),
  autoApproval: z.boolean(),
  requireMfaToRequest: z.boolean(),
  maxDurationMinutes: z.number().int().optional(),
  recommendedDurationMinutes: z.number().int().optional(),
  requireSupportTicket: z.boolean(),
  requestTemplateId: z.string().optional(),
  reviewerStages: z.array(ReviewerStage$outboundSchema).optional(),
  priority: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    allowRequests: "allow_requests",
    autoApproval: "auto_approval",
    requireMfaToRequest: "require_mfa_to_request",
    maxDurationMinutes: "max_duration_minutes",
    recommendedDurationMinutes: "recommended_duration_minutes",
    requireSupportTicket: "require_support_ticket",
    requestTemplateId: "request_template_id",
    reviewerStages: "reviewer_stages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestConfiguration$ {
  /** @deprecated use `RequestConfiguration$inboundSchema` instead. */
  export const inboundSchema = RequestConfiguration$inboundSchema;
  /** @deprecated use `RequestConfiguration$outboundSchema` instead. */
  export const outboundSchema = RequestConfiguration$outboundSchema;
  /** @deprecated use `RequestConfiguration$Outbound` instead. */
  export type Outbound = RequestConfiguration$Outbound;
}

export function requestConfigurationToJSON(
  requestConfiguration: RequestConfiguration,
): string {
  return JSON.stringify(
    RequestConfiguration$outboundSchema.parse(requestConfiguration),
  );
}

export function requestConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<RequestConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestConfiguration' from JSON`,
  );
}
