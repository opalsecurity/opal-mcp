/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A tag filter defined by the tags key and value.
 */
export type TagFilter = {
  /**
   * The key of the tag.
   */
  key: string;
  /**
   * The value of the tag.
   */
  value?: string | undefined;
};

/** @internal */
export const TagFilter$inboundSchema: z.ZodType<
  TagFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type TagFilter$Outbound = {
  key: string;
  value?: string | undefined;
};

/** @internal */
export const TagFilter$outboundSchema: z.ZodType<
  TagFilter$Outbound,
  z.ZodTypeDef,
  TagFilter
> = z.object({
  key: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagFilter$ {
  /** @deprecated use `TagFilter$inboundSchema` instead. */
  export const inboundSchema = TagFilter$inboundSchema;
  /** @deprecated use `TagFilter$outboundSchema` instead. */
  export const outboundSchema = TagFilter$outboundSchema;
  /** @deprecated use `TagFilter$Outbound` instead. */
  export type Outbound = TagFilter$Outbound;
}

export function tagFilterToJSON(tagFilter: TagFilter): string {
  return JSON.stringify(TagFilter$outboundSchema.parse(tagFilter));
}

export function tagFilterFromJSON(
  jsonString: string,
): SafeParseResult<TagFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagFilter' from JSON`,
  );
}
