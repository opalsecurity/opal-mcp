/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PageInfo = {
  /**
   * Whether there are more items after the end cursor
   */
  hasNextPage: boolean;
  /**
   * The cursor to continue pagination forwards
   */
  endCursor: string;
  /**
   * Whether there are more items before the start cursor
   */
  hasPreviousPage: boolean;
  /**
   * The cursor to continue pagination backwards
   */
  startCursor: string;
};

/** @internal */
export const PageInfo$inboundSchema: z.ZodType<
  PageInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  hasNextPage: z.boolean(),
  endCursor: z.string(),
  hasPreviousPage: z.boolean(),
  startCursor: z.string(),
});

/** @internal */
export type PageInfo$Outbound = {
  hasNextPage: boolean;
  endCursor: string;
  hasPreviousPage: boolean;
  startCursor: string;
};

/** @internal */
export const PageInfo$outboundSchema: z.ZodType<
  PageInfo$Outbound,
  z.ZodTypeDef,
  PageInfo
> = z.object({
  hasNextPage: z.boolean(),
  endCursor: z.string(),
  hasPreviousPage: z.boolean(),
  startCursor: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PageInfo$ {
  /** @deprecated use `PageInfo$inboundSchema` instead. */
  export const inboundSchema = PageInfo$inboundSchema;
  /** @deprecated use `PageInfo$outboundSchema` instead. */
  export const outboundSchema = PageInfo$outboundSchema;
  /** @deprecated use `PageInfo$Outbound` instead. */
  export type Outbound = PageInfo$Outbound;
}

export function pageInfoToJSON(pageInfo: PageInfo): string {
  return JSON.stringify(PageInfo$outboundSchema.parse(pageInfo));
}

export function pageInfoFromJSON(
  jsonString: string,
): SafeParseResult<PageInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PageInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PageInfo' from JSON`,
  );
}
