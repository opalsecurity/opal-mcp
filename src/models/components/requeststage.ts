/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestReviewer,
  RequestReviewer$inboundSchema,
  RequestReviewer$Outbound,
  RequestReviewer$outboundSchema,
} from "./requestreviewer.js";
import {
  ReviewStageOperator,
  ReviewStageOperator$inboundSchema,
  ReviewStageOperator$outboundSchema,
} from "./reviewstageoperator.js";

/**
 * A stage in the request review process
 */
export type RequestStage = {
  /**
   * The stage number
   */
  stage: number;
  /**
   * The operator to apply to reviewers in a stage
   */
  operator: ReviewStageOperator;
  /**
   * The reviewers for this stage
   */
  reviewers: Array<RequestReviewer>;
};

/** @internal */
export const RequestStage$inboundSchema: z.ZodType<
  RequestStage,
  z.ZodTypeDef,
  unknown
> = z.object({
  stage: z.number().int(),
  operator: ReviewStageOperator$inboundSchema,
  reviewers: z.array(RequestReviewer$inboundSchema),
});

/** @internal */
export type RequestStage$Outbound = {
  stage: number;
  operator: string;
  reviewers: Array<RequestReviewer$Outbound>;
};

/** @internal */
export const RequestStage$outboundSchema: z.ZodType<
  RequestStage$Outbound,
  z.ZodTypeDef,
  RequestStage
> = z.object({
  stage: z.number().int(),
  operator: ReviewStageOperator$outboundSchema,
  reviewers: z.array(RequestReviewer$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestStage$ {
  /** @deprecated use `RequestStage$inboundSchema` instead. */
  export const inboundSchema = RequestStage$inboundSchema;
  /** @deprecated use `RequestStage$outboundSchema` instead. */
  export const outboundSchema = RequestStage$outboundSchema;
  /** @deprecated use `RequestStage$Outbound` instead. */
  export type Outbound = RequestStage$Outbound;
}

export function requestStageToJSON(requestStage: RequestStage): string {
  return JSON.stringify(RequestStage$outboundSchema.parse(requestStage));
}

export function requestStageFromJSON(
  jsonString: string,
): SafeParseResult<RequestStage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestStage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestStage' from JSON`,
  );
}
