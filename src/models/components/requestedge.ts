/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Request,
  Request$inboundSchema,
  Request$Outbound,
  Request$outboundSchema,
} from "./request.js";

export type RequestEdge = {
  /**
   * # Request Object
   *
   * @remarks
   * ### Description
   * The `Request` object is used to represent a request.
   *
   * ### Usage Example
   * Returned from the `GET Requests` endpoint.
   */
  node: Request;
  /**
   * The cursor for this request edge
   */
  cursor: string;
};

/** @internal */
export const RequestEdge$inboundSchema: z.ZodType<
  RequestEdge,
  z.ZodTypeDef,
  unknown
> = z.object({
  node: Request$inboundSchema,
  cursor: z.string(),
});

/** @internal */
export type RequestEdge$Outbound = {
  node: Request$Outbound;
  cursor: string;
};

/** @internal */
export const RequestEdge$outboundSchema: z.ZodType<
  RequestEdge$Outbound,
  z.ZodTypeDef,
  RequestEdge
> = z.object({
  node: Request$outboundSchema,
  cursor: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestEdge$ {
  /** @deprecated use `RequestEdge$inboundSchema` instead. */
  export const inboundSchema = RequestEdge$inboundSchema;
  /** @deprecated use `RequestEdge$outboundSchema` instead. */
  export const outboundSchema = RequestEdge$outboundSchema;
  /** @deprecated use `RequestEdge$Outbound` instead. */
  export type Outbound = RequestEdge$Outbound;
}

export function requestEdgeToJSON(requestEdge: RequestEdge): string {
  return JSON.stringify(RequestEdge$outboundSchema.parse(requestEdge));
}

export function requestEdgeFromJSON(
  jsonString: string,
): SafeParseResult<RequestEdge, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestEdge$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestEdge' from JSON`,
  );
}
