/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RuleConjunction,
  RuleConjunction$inboundSchema,
  RuleConjunction$Outbound,
  RuleConjunction$outboundSchema,
} from "./ruleconjunction.js";

export type RuleClauses = {
  when: RuleConjunction;
  unless?: RuleConjunction | undefined;
};

/** @internal */
export const RuleClauses$inboundSchema: z.ZodType<
  RuleClauses,
  z.ZodTypeDef,
  unknown
> = z.object({
  when: RuleConjunction$inboundSchema,
  unless: RuleConjunction$inboundSchema.optional(),
});

/** @internal */
export type RuleClauses$Outbound = {
  when: RuleConjunction$Outbound;
  unless?: RuleConjunction$Outbound | undefined;
};

/** @internal */
export const RuleClauses$outboundSchema: z.ZodType<
  RuleClauses$Outbound,
  z.ZodTypeDef,
  RuleClauses
> = z.object({
  when: RuleConjunction$outboundSchema,
  unless: RuleConjunction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RuleClauses$ {
  /** @deprecated use `RuleClauses$inboundSchema` instead. */
  export const inboundSchema = RuleClauses$inboundSchema;
  /** @deprecated use `RuleClauses$outboundSchema` instead. */
  export const outboundSchema = RuleClauses$outboundSchema;
  /** @deprecated use `RuleClauses$Outbound` instead. */
  export type Outbound = RuleClauses$Outbound;
}

export function ruleClausesToJSON(ruleClauses: RuleClauses): string {
  return JSON.stringify(RuleClauses$outboundSchema.parse(ruleClauses));
}

export function ruleClausesFromJSON(
  jsonString: string,
): SafeParseResult<RuleClauses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RuleClauses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RuleClauses' from JSON`,
  );
}
