/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";

export type AccessList = {
  results?: Array<Access> | undefined;
};

/** @internal */
export const AccessList$inboundSchema: z.ZodType<
  AccessList,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(Access$inboundSchema).optional(),
});

/** @internal */
export type AccessList$Outbound = {
  results?: Array<Access$Outbound> | undefined;
};

/** @internal */
export const AccessList$outboundSchema: z.ZodType<
  AccessList$Outbound,
  z.ZodTypeDef,
  AccessList
> = z.object({
  results: z.array(Access$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessList$ {
  /** @deprecated use `AccessList$inboundSchema` instead. */
  export const inboundSchema = AccessList$inboundSchema;
  /** @deprecated use `AccessList$outboundSchema` instead. */
  export const outboundSchema = AccessList$outboundSchema;
  /** @deprecated use `AccessList$Outbound` instead. */
  export type Outbound = AccessList$Outbound;
}

export function accessListToJSON(accessList: AccessList): string {
  return JSON.stringify(AccessList$outboundSchema.parse(accessList));
}

export function accessListFromJSON(
  jsonString: string,
): SafeParseResult<AccessList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessList' from JSON`,
  );
}
