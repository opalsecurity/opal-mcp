/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceAccessUser,
  ResourceAccessUser$inboundSchema,
  ResourceAccessUser$Outbound,
  ResourceAccessUser$outboundSchema,
} from "./resourceaccessuser.js";

export type ResourceAccessUserList = {
  results?: Array<ResourceAccessUser> | undefined;
};

/** @internal */
export const ResourceAccessUserList$inboundSchema: z.ZodType<
  ResourceAccessUserList,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(ResourceAccessUser$inboundSchema).optional(),
});

/** @internal */
export type ResourceAccessUserList$Outbound = {
  results?: Array<ResourceAccessUser$Outbound> | undefined;
};

/** @internal */
export const ResourceAccessUserList$outboundSchema: z.ZodType<
  ResourceAccessUserList$Outbound,
  z.ZodTypeDef,
  ResourceAccessUserList
> = z.object({
  results: z.array(ResourceAccessUser$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceAccessUserList$ {
  /** @deprecated use `ResourceAccessUserList$inboundSchema` instead. */
  export const inboundSchema = ResourceAccessUserList$inboundSchema;
  /** @deprecated use `ResourceAccessUserList$outboundSchema` instead. */
  export const outboundSchema = ResourceAccessUserList$outboundSchema;
  /** @deprecated use `ResourceAccessUserList$Outbound` instead. */
  export type Outbound = ResourceAccessUserList$Outbound;
}

export function resourceAccessUserListToJSON(
  resourceAccessUserList: ResourceAccessUserList,
): string {
  return JSON.stringify(
    ResourceAccessUserList$outboundSchema.parse(resourceAccessUserList),
  );
}

export function resourceAccessUserListFromJSON(
  jsonString: string,
): SafeParseResult<ResourceAccessUserList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceAccessUserList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceAccessUserList' from JSON`,
  );
}
