/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UpdateResourceInfo,
  UpdateResourceInfo$inboundSchema,
  UpdateResourceInfo$Outbound,
  UpdateResourceInfo$outboundSchema,
} from "./updateresourceinfo.js";

export type UpdateResourceInfoList = {
  /**
   * A list of resources with information to update.
   */
  resources: Array<UpdateResourceInfo>;
};

/** @internal */
export const UpdateResourceInfoList$inboundSchema: z.ZodType<
  UpdateResourceInfoList,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.array(UpdateResourceInfo$inboundSchema),
});

/** @internal */
export type UpdateResourceInfoList$Outbound = {
  resources: Array<UpdateResourceInfo$Outbound>;
};

/** @internal */
export const UpdateResourceInfoList$outboundSchema: z.ZodType<
  UpdateResourceInfoList$Outbound,
  z.ZodTypeDef,
  UpdateResourceInfoList
> = z.object({
  resources: z.array(UpdateResourceInfo$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceInfoList$ {
  /** @deprecated use `UpdateResourceInfoList$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceInfoList$inboundSchema;
  /** @deprecated use `UpdateResourceInfoList$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceInfoList$outboundSchema;
  /** @deprecated use `UpdateResourceInfoList$Outbound` instead. */
  export type Outbound = UpdateResourceInfoList$Outbound;
}

export function updateResourceInfoListToJSON(
  updateResourceInfoList: UpdateResourceInfoList,
): string {
  return JSON.stringify(
    UpdateResourceInfoList$outboundSchema.parse(updateResourceInfoList),
  );
}

export function updateResourceInfoListFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceInfoList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceInfoList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceInfoList' from JSON`,
  );
}
