/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OnCallSchedule,
  OnCallSchedule$inboundSchema,
  OnCallSchedule$Outbound,
  OnCallSchedule$outboundSchema,
} from "./oncallschedule.js";

export type OnCallScheduleList = {
  onCallSchedules: Array<OnCallSchedule>;
};

/** @internal */
export const OnCallScheduleList$inboundSchema: z.ZodType<
  OnCallScheduleList,
  z.ZodTypeDef,
  unknown
> = z.object({
  on_call_schedules: z.array(OnCallSchedule$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "on_call_schedules": "onCallSchedules",
  });
});

/** @internal */
export type OnCallScheduleList$Outbound = {
  on_call_schedules: Array<OnCallSchedule$Outbound>;
};

/** @internal */
export const OnCallScheduleList$outboundSchema: z.ZodType<
  OnCallScheduleList$Outbound,
  z.ZodTypeDef,
  OnCallScheduleList
> = z.object({
  onCallSchedules: z.array(OnCallSchedule$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    onCallSchedules: "on_call_schedules",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnCallScheduleList$ {
  /** @deprecated use `OnCallScheduleList$inboundSchema` instead. */
  export const inboundSchema = OnCallScheduleList$inboundSchema;
  /** @deprecated use `OnCallScheduleList$outboundSchema` instead. */
  export const outboundSchema = OnCallScheduleList$outboundSchema;
  /** @deprecated use `OnCallScheduleList$Outbound` instead. */
  export type Outbound = OnCallScheduleList$Outbound;
}

export function onCallScheduleListToJSON(
  onCallScheduleList: OnCallScheduleList,
): string {
  return JSON.stringify(
    OnCallScheduleList$outboundSchema.parse(onCallScheduleList),
  );
}

export function onCallScheduleListFromJSON(
  jsonString: string,
): SafeParseResult<OnCallScheduleList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnCallScheduleList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnCallScheduleList' from JSON`,
  );
}
