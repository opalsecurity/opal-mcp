/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageChannelProviderEnum,
  MessageChannelProviderEnum$inboundSchema,
  MessageChannelProviderEnum$outboundSchema,
} from "./messagechannelproviderenum.js";

/**
 * # CreateMessageChannelInfo Object
 *
 * @remarks
 * ### Description
 * The `CreateMessageChannelInfo` object is used to describe the message channel object to be created.
 */
export type CreateMessageChannelInfo = {
  /**
   * The third party provider of the message channel.
   */
  thirdPartyProvider: MessageChannelProviderEnum;
  /**
   * The remote ID of the message channel
   */
  remoteId: string;
};

/** @internal */
export const CreateMessageChannelInfo$inboundSchema: z.ZodType<
  CreateMessageChannelInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  third_party_provider: MessageChannelProviderEnum$inboundSchema,
  remote_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "third_party_provider": "thirdPartyProvider",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type CreateMessageChannelInfo$Outbound = {
  third_party_provider: string;
  remote_id: string;
};

/** @internal */
export const CreateMessageChannelInfo$outboundSchema: z.ZodType<
  CreateMessageChannelInfo$Outbound,
  z.ZodTypeDef,
  CreateMessageChannelInfo
> = z.object({
  thirdPartyProvider: MessageChannelProviderEnum$outboundSchema,
  remoteId: z.string(),
}).transform((v) => {
  return remap$(v, {
    thirdPartyProvider: "third_party_provider",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageChannelInfo$ {
  /** @deprecated use `CreateMessageChannelInfo$inboundSchema` instead. */
  export const inboundSchema = CreateMessageChannelInfo$inboundSchema;
  /** @deprecated use `CreateMessageChannelInfo$outboundSchema` instead. */
  export const outboundSchema = CreateMessageChannelInfo$outboundSchema;
  /** @deprecated use `CreateMessageChannelInfo$Outbound` instead. */
  export type Outbound = CreateMessageChannelInfo$Outbound;
}

export function createMessageChannelInfoToJSON(
  createMessageChannelInfo: CreateMessageChannelInfo,
): string {
  return JSON.stringify(
    CreateMessageChannelInfo$outboundSchema.parse(createMessageChannelInfo),
  );
}

export function createMessageChannelInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateMessageChannelInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMessageChannelInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMessageChannelInfo' from JSON`,
  );
}
