/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * # GroupContainingGroup Object
 *
 * @remarks
 * ### Description
 * The `GroupContainingGroup` object is used to represent a relationship between a group and a group.
 */
export type GroupContainingGroup = {
  /**
   * The groupID of the containing group.
   */
  containingGroupId: string;
};

/** @internal */
export const GroupContainingGroup$inboundSchema: z.ZodType<
  GroupContainingGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  containing_group_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "containing_group_id": "containingGroupId",
  });
});

/** @internal */
export type GroupContainingGroup$Outbound = {
  containing_group_id: string;
};

/** @internal */
export const GroupContainingGroup$outboundSchema: z.ZodType<
  GroupContainingGroup$Outbound,
  z.ZodTypeDef,
  GroupContainingGroup
> = z.object({
  containingGroupId: z.string(),
}).transform((v) => {
  return remap$(v, {
    containingGroupId: "containing_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupContainingGroup$ {
  /** @deprecated use `GroupContainingGroup$inboundSchema` instead. */
  export const inboundSchema = GroupContainingGroup$inboundSchema;
  /** @deprecated use `GroupContainingGroup$outboundSchema` instead. */
  export const outboundSchema = GroupContainingGroup$outboundSchema;
  /** @deprecated use `GroupContainingGroup$Outbound` instead. */
  export type Outbound = GroupContainingGroup$Outbound;
}

export function groupContainingGroupToJSON(
  groupContainingGroup: GroupContainingGroup,
): string {
  return JSON.stringify(
    GroupContainingGroup$outboundSchema.parse(groupContainingGroup),
  );
}

export function groupContainingGroupFromJSON(
  jsonString: string,
): SafeParseResult<GroupContainingGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupContainingGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupContainingGroup' from JSON`,
  );
}
