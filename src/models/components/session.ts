/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceAccessLevel,
  ResourceAccessLevel$inboundSchema,
  ResourceAccessLevel$Outbound,
  ResourceAccessLevel$outboundSchema,
} from "./resourceaccesslevel.js";

/**
 * # Session Object
 *
 * @remarks
 * ### Description
 * The `Session` object is used to represent an access session. Some resources can be accessed temporarily via a time-bounded session.
 *
 * ### Usage Example
 * Fetch from the `LIST Sessions` endpoint.
 */
export type Session = {
  /**
   * The ID of the connection.
   */
  connectionId: string;
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * The ID of the resource.
   */
  resourceId: string;
  /**
   * # Access Level Object
   *
   * @remarks
   * ### Description
   * The `AccessLevel` object is used to represent the level of access that a principal has. The "default" access
   * level is a `AccessLevel` object whose fields are all empty strings.
   *
   * ### Usage Example
   * View the `AccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
   */
  accessLevel: ResourceAccessLevel;
  /**
   * The day and time the user's access will expire.
   */
  expirationDate: Date;
};

/** @internal */
export const Session$inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> =
  z.object({
    connection_id: z.string(),
    user_id: z.string(),
    resource_id: z.string(),
    access_level: ResourceAccessLevel$inboundSchema,
    expiration_date: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "connection_id": "connectionId",
      "user_id": "userId",
      "resource_id": "resourceId",
      "access_level": "accessLevel",
      "expiration_date": "expirationDate",
    });
  });

/** @internal */
export type Session$Outbound = {
  connection_id: string;
  user_id: string;
  resource_id: string;
  access_level: ResourceAccessLevel$Outbound;
  expiration_date: string;
};

/** @internal */
export const Session$outboundSchema: z.ZodType<
  Session$Outbound,
  z.ZodTypeDef,
  Session
> = z.object({
  connectionId: z.string(),
  userId: z.string(),
  resourceId: z.string(),
  accessLevel: ResourceAccessLevel$outboundSchema,
  expirationDate: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    userId: "user_id",
    resourceId: "resource_id",
    accessLevel: "access_level",
    expirationDate: "expiration_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Session$ {
  /** @deprecated use `Session$inboundSchema` instead. */
  export const inboundSchema = Session$inboundSchema;
  /** @deprecated use `Session$outboundSchema` instead. */
  export const outboundSchema = Session$outboundSchema;
  /** @deprecated use `Session$Outbound` instead. */
  export type Outbound = Session$Outbound;
}

export function sessionToJSON(session: Session): string {
  return JSON.stringify(Session$outboundSchema.parse(session));
}

export function sessionFromJSON(
  jsonString: string,
): SafeParseResult<Session, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Session$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Session' from JSON`,
  );
}
